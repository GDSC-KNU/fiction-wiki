

// generator client {
//   provider = "prisma-client-js"
//   previewFeatures = ["referentialIntegrity"]
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
//   referentialIntegrity = "prisma"
// }

// model User {
//   id Int @id @default(autoincrement())
//   phone Int? @unique
//   email String? @unique
//   name String
//   avatar String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  phone         Int?      @unique
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  interests     String?
  fictions      Fiction[]
  // btokens       BToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Keyword {
  id        Int       @id @default(autoincrement())
  name      String
  fictions  KeywordOnfictions[]
}

model Fiction {
  id        Int       @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean   @default(false)
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  keywords  KeywordOnfictions[]
}

model KeywordOnfictions {
  fiction       Fiction     @relation(fields: [fictionId], references: [id])
  fictionId     Int
  keyword       Keyword     @relation(fields: [keywordId], references: [id])
  keywordId     Int
  assignedAt    DateTime    @default(now())
  assignedBy    String

  @@id([fictionId, keywordId])
}

// model BToken {
//   id          String   @id @default(cuid())
//   payload     String   @unique
//   user        User     @relation(fields: [userId], references: [id])
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   userId      String
// }