generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Fiction {
  id            Int                 @id @default(autoincrement())
  categories    CategoriesOnFictions[]
  keywords      KeywordsOnFictions[]
  fictionStat   FictionStat?
  userFictionStat UserFictionStat? 
  mediaMix      String?
  type          String?
  volume        Int?                @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  title         String
  relatedTitle  String?
  relatedAuthor String?
  nationality   String
  genre         String
  startDate     DateTime
  endDate       DateTime
  currentState  String      
  original      String
  platforms     String
  image         String              @db.MediumText
  synopsis      String              @db.MediumText
  characters    String              @db.MediumText
  setup         String              @db.LongText  @default("")
  user          User                @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId        String
  favs          Fav[]
  isAdult       Boolean?            @default(false)
  comments      Comment[]
  author        Author?              @relation(fields: [authorId], references: [id])
  authorId      Int?                 
  isTranslated  String?             @default("")
  introduction  String?             @default("") @db.MediumText
  chacracterImages Json?            @default("[]")
  originalTitle String?             @default("")

  @@index([userId])
  @@index([nationality,createdAt])
  @@index([authorId])
}

model Author {
  id        Int       @id @default(autoincrement())
  fictions  Fiction[]
  name          String    @unique
  relatedName   String?
  rawName       String   @unique
  description   String?   @db.MediumText
  nationality   String?
  sns           String?
}

model FictionStat {
  id                    Int       @id @default(autoincrement())
  fiction               Fiction   @relation(fields: [fictionId], references: [id], onDelete:Cascade)
  fictionId             Int       @unique
  originality           Float
  verisimilitude        Float
  synopsisComposition   Float
  character             Float
  writing               Float
  value                 Float

  @@index([fictionId])
}

model UserFictionStat {
    id                    Int       @id @default(autoincrement())
    fiction               Fiction   @relation(fields: [fictionId], references: [id], onDelete:Cascade)
    fictionId             Int @unique
    users                 User[]
    userRationOnFictions  UserRationOnFiction[] 
    originality           Float
    verisimilitude        Float
    synopsisComposition   Float
    character             Float
    writing               Float
    value                 Float
    total                 Float

    @@index([fictionId])
}



model Keyword {
  id            Int                    @id @default(autoincrement())
  name          String      @unique
  isOfMC        Boolean     @default(false)
  isOfHeroine   Boolean     @default(false)
  isOfCons      Boolean     @default(false)
  fictions      KeywordsOnFictions[]

  @@index([name])
}

model KeywordsOnFictions {
  fiction       Fiction?     @relation(fields: [fictionId], references: [id], onDelete:Cascade)
  fictionId     Int
  keyword       Keyword?     @relation(fields: [keywordId], references: [id], onDelete:Cascade)
  keywordId     Int
  @@id([fictionId, keywordId])

  @@index([fictionId])
  @@index([keywordId])
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String              @unique
  fictions CategoriesOnFictions[]
}

model CategoriesOnFictions {
  fiction       Fiction?     @relation(fields: [fictionId], references: [id], onDelete:Cascade)
  fictionId     Int
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    Int 
  @@id([fictionId, categoryId])

  @@index([fictionId])
  @@index([categoryId])
}



model User {
  id        String      @id @default(cuid())
  phone     String?     @unique
  email     String?     @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]
  fictions  Fiction[]
  fav       Fav[]
  // ratedFictionStat FictionStatFromUser @relation(fields: [ratedFictionStatId], references: [id], onUpdate: NoAction)
  // ratedFictionStatId Int
  ratedFictions UserFictionStat[]
  userRationOnFictions  UserRationOnFiction[]
  // NExt Auth0
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  mbti          String?
  sex           String?
  clientID      String?
  clientKey     String?
  nickname      String?
}

model UserRationOnFiction {
  id                    Int       @id @default(autoincrement())
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String    
  userFictionStat       UserFictionStat @relation(fields: [userFictionStatId], references: [id], onDelete:Cascade)
  userFictionStatId     Int
  originality           Float
  verisimilitude        Float
  synopsisComposition   Float
  character             Float
  writing               Float
  value                 Float
  comment               Comment?

  @@index([userId])
  @@index([userFictionStatId])
}

model Token {
  id            Int         @id @default(autoincrement())
  payload       String      @unique
  user          User        @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
}

model Fav {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId        String
  fiction       Fiction     @relation(fields: [fictionId], references: [id], onDelete:Cascade)
  fictionId     Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([fictionId])
}

//for next-auth

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt @default(now())
  comment           String   @db.MediumText @default("")
  createdBy         User?     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById       String?
  fiction           Fiction?     @relation(fields: [fictionId], references: [id], onDelete:Cascade)
  fictionId         Int?
  userRationOnFictions    UserRationOnFiction?   @relation(fields: [userRationOnFictionsId], references: [id], onDelete:Cascade)
  userRationOnFictionsId  Int? @unique
  upVote            Int      @default(0)
  downVote          Int      @default(0)

  @@index([createdById])
  @@index([fictionId])
}