generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Fiction {
  id            Int                 @id @default(autoincrement())
  categories    CategoriesOnFictions[]
  keywords      KeywordsOnFictions[]
  fictionStat   FictionStat?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  title         String
  startDate     DateTime
  endDate       DateTime
  image         String              @db.MediumText
  description   String              @db.MediumText
  characters    String              @db.MediumText
  user          User                @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId        Int
}

model FictionStat {
  id                Int       @id @default(autoincrement())
  fiction           Fiction   @relation(fields: [fictionId], references: [id])
  fictionId         Int     
  originality       Int
  verisimilitude    Int
  synopsis          Int
  character         Int
  writing           Int
  value             Int
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  fictions CategoriesOnFictions[]
}

model Keyword {
  id Int                    @id @default(autoincrement())
  name String
  fictions KeywordsOnFictions[]
}

model KeywordsOnFictions {
  fiction       Fiction     @relation(fields: [fictionId], references: [id])
  fictionId     Int
  keyword       Keyword     @relation(fields: [keywordId], references: [id])
  keywordId     Int

  @@id([fictionId, keywordId])
}

model CategoriesOnFictions {
  fiction       Fiction     @relation(fields: [fictionId], references: [id])
  fictionId     Int
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int 
  assignedAt    DateTime @default(now())
  assignedBy    String

  @@id([fictionId, categoryId])
}

model User {
  id        Int      @id @default(autoincrement())
  phone     String?     @unique
  email     String?  @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]
  fictions  Fiction[]
}

model Token {
  id            Int         @id @default(autoincrement())
  payload       String      @unique
  user          User        @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId        Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}