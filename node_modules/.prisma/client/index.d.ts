
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Fiction
 * 
 */
export type Fiction = {
  id: number
  createdAt: Date
  updatedAt: Date
  title: string
  author: string
  nationality: string
  genre: string
  startDate: Date
  endDate: Date
  currentState: string
  original: string
  platforms: string
  image: string
  synopsis: string
  characters: string
  userId: string
  isAdult: boolean | null
}

/**
 * Model FictionStat
 * 
 */
export type FictionStat = {
  id: number
  fictionId: number
  originality: number
  verisimilitude: number
  synopsisComposition: number
  character: number
  writing: number
  value: number
}

/**
 * Model UserFictionStat
 * 
 */
export type UserFictionStat = {
  id: number
  fictionId: number
  originality: number
  verisimilitude: number
  synopsisComposition: number
  character: number
  writing: number
  value: number
  total: number
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: number
  name: string
}

/**
 * Model Keyword
 * 
 */
export type Keyword = {
  id: number
  name: string
  isOfMC: boolean
  isOfHeroine: boolean
}

/**
 * Model KeywordsOnFictions
 * 
 */
export type KeywordsOnFictions = {
  fictionId: number
  keywordId: number
}

/**
 * Model CategoriesOnFictions
 * 
 */
export type CategoriesOnFictions = {
  fictionId: number
  categoryId: number
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  phone: string | null
  email: string | null
  name: string
  avatar: string | null
  createdAt: Date
  updatedAt: Date
  emailVerified: Date | null
  image: string | null
}

/**
 * Model UserRationOnFiction
 * 
 */
export type UserRationOnFiction = {
  id: number
  userId: string
  userFictionStatId: number
  originality: number
  verisimilitude: number
  synopsisComposition: number
  character: number
  writing: number
  value: number
  comment: string
}

/**
 * Model Token
 * 
 */
export type Token = {
  id: number
  payload: string
  userId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Fav
 * 
 */
export type Fav = {
  id: number
  userId: string
  fictionId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Account
 * 
 */
export type Account = {
  id: string
  userId: string
  type: string
  provider: string
  providerAccountId: string
  refresh_token: string | null
  access_token: string | null
  expires_at: number | null
  token_type: string | null
  scope: string | null
  id_token: string | null
  session_state: string | null
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  sessionToken: string
  userId: string
  expires: Date
}

/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = {
  identifier: string
  token: string
  expires: Date
}

/**
 * Model Comment
 * 
 */
export type Comment = {
  id: number
  createdAt: Date
  updatedAt: Date
  comment: string
  createdById: string
  fictionId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Fictions
 * const fictions = await prisma.fiction.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Fictions
   * const fictions = await prisma.fiction.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.fiction`: Exposes CRUD operations for the **Fiction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fictions
    * const fictions = await prisma.fiction.findMany()
    * ```
    */
  get fiction(): Prisma.FictionDelegate<GlobalReject>;

  /**
   * `prisma.fictionStat`: Exposes CRUD operations for the **FictionStat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FictionStats
    * const fictionStats = await prisma.fictionStat.findMany()
    * ```
    */
  get fictionStat(): Prisma.FictionStatDelegate<GlobalReject>;

  /**
   * `prisma.userFictionStat`: Exposes CRUD operations for the **UserFictionStat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFictionStats
    * const userFictionStats = await prisma.userFictionStat.findMany()
    * ```
    */
  get userFictionStat(): Prisma.UserFictionStatDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.keyword`: Exposes CRUD operations for the **Keyword** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keywords
    * const keywords = await prisma.keyword.findMany()
    * ```
    */
  get keyword(): Prisma.KeywordDelegate<GlobalReject>;

  /**
   * `prisma.keywordsOnFictions`: Exposes CRUD operations for the **KeywordsOnFictions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KeywordsOnFictions
    * const keywordsOnFictions = await prisma.keywordsOnFictions.findMany()
    * ```
    */
  get keywordsOnFictions(): Prisma.KeywordsOnFictionsDelegate<GlobalReject>;

  /**
   * `prisma.categoriesOnFictions`: Exposes CRUD operations for the **CategoriesOnFictions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriesOnFictions
    * const categoriesOnFictions = await prisma.categoriesOnFictions.findMany()
    * ```
    */
  get categoriesOnFictions(): Prisma.CategoriesOnFictionsDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userRationOnFiction`: Exposes CRUD operations for the **UserRationOnFiction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRationOnFictions
    * const userRationOnFictions = await prisma.userRationOnFiction.findMany()
    * ```
    */
  get userRationOnFiction(): Prisma.UserRationOnFictionDelegate<GlobalReject>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<GlobalReject>;

  /**
   * `prisma.fav`: Exposes CRUD operations for the **Fav** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favs
    * const favs = await prisma.fav.findMany()
    * ```
    */
  get fav(): Prisma.FavDelegate<GlobalReject>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.2.1
   * Query Engine version: 8d8414deb360336e4698a65aa45a1fbaf1ce13d8
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Fiction: 'Fiction',
    FictionStat: 'FictionStat',
    UserFictionStat: 'UserFictionStat',
    Category: 'Category',
    Keyword: 'Keyword',
    KeywordsOnFictions: 'KeywordsOnFictions',
    CategoriesOnFictions: 'CategoriesOnFictions',
    User: 'User',
    UserRationOnFiction: 'UserRationOnFiction',
    Token: 'Token',
    Fav: 'Fav',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Comment: 'Comment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FictionCountOutputType
   */


  export type FictionCountOutputType = {
    categories: number
    keywords: number
    favs: number
    comments: number
  }

  export type FictionCountOutputTypeSelect = {
    categories?: boolean
    keywords?: boolean
    favs?: boolean
    comments?: boolean
  }

  export type FictionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | FictionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? FictionCountOutputType
    : S extends undefined
    ? never
    : S extends FictionCountOutputTypeArgs
    ?'include' extends U
    ? FictionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof FictionCountOutputType ? FictionCountOutputType[P] : never
  } 
    : FictionCountOutputType
  : FictionCountOutputType




  // Custom InputTypes

  /**
   * FictionCountOutputType without action
   */
  export type FictionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FictionCountOutputType
     * 
    **/
    select?: FictionCountOutputTypeSelect | null
  }



  /**
   * Count Type UserFictionStatCountOutputType
   */


  export type UserFictionStatCountOutputType = {
    users: number
    userRationOnFictions: number
  }

  export type UserFictionStatCountOutputTypeSelect = {
    users?: boolean
    userRationOnFictions?: boolean
  }

  export type UserFictionStatCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserFictionStatCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserFictionStatCountOutputType
    : S extends undefined
    ? never
    : S extends UserFictionStatCountOutputTypeArgs
    ?'include' extends U
    ? UserFictionStatCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserFictionStatCountOutputType ? UserFictionStatCountOutputType[P] : never
  } 
    : UserFictionStatCountOutputType
  : UserFictionStatCountOutputType




  // Custom InputTypes

  /**
   * UserFictionStatCountOutputType without action
   */
  export type UserFictionStatCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserFictionStatCountOutputType
     * 
    **/
    select?: UserFictionStatCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    fictions: number
  }

  export type CategoryCountOutputTypeSelect = {
    fictions?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends CategoryCountOutputTypeArgs
    ?'include' extends U
    ? CategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
    : CategoryCountOutputType
  : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type KeywordCountOutputType
   */


  export type KeywordCountOutputType = {
    fictions: number
  }

  export type KeywordCountOutputTypeSelect = {
    fictions?: boolean
  }

  export type KeywordCountOutputTypeGetPayload<
    S extends boolean | null | undefined | KeywordCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? KeywordCountOutputType
    : S extends undefined
    ? never
    : S extends KeywordCountOutputTypeArgs
    ?'include' extends U
    ? KeywordCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof KeywordCountOutputType ? KeywordCountOutputType[P] : never
  } 
    : KeywordCountOutputType
  : KeywordCountOutputType




  // Custom InputTypes

  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the KeywordCountOutputType
     * 
    **/
    select?: KeywordCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    tokens: number
    fictions: number
    fav: number
    ratedFictions: number
    userRationOnFictions: number
    accounts: number
    sessions: number
    comments: number
  }

  export type UserCountOutputTypeSelect = {
    tokens?: boolean
    fictions?: boolean
    fav?: boolean
    ratedFictions?: boolean
    userRationOnFictions?: boolean
    accounts?: boolean
    sessions?: boolean
    comments?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Fiction
   */


  export type AggregateFiction = {
    _count: FictionCountAggregateOutputType | null
    _avg: FictionAvgAggregateOutputType | null
    _sum: FictionSumAggregateOutputType | null
    _min: FictionMinAggregateOutputType | null
    _max: FictionMaxAggregateOutputType | null
  }

  export type FictionAvgAggregateOutputType = {
    id: number | null
  }

  export type FictionSumAggregateOutputType = {
    id: number | null
  }

  export type FictionMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    author: string | null
    nationality: string | null
    genre: string | null
    startDate: Date | null
    endDate: Date | null
    currentState: string | null
    original: string | null
    platforms: string | null
    image: string | null
    synopsis: string | null
    characters: string | null
    userId: string | null
    isAdult: boolean | null
  }

  export type FictionMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    author: string | null
    nationality: string | null
    genre: string | null
    startDate: Date | null
    endDate: Date | null
    currentState: string | null
    original: string | null
    platforms: string | null
    image: string | null
    synopsis: string | null
    characters: string | null
    userId: string | null
    isAdult: boolean | null
  }

  export type FictionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    title: number
    author: number
    nationality: number
    genre: number
    startDate: number
    endDate: number
    currentState: number
    original: number
    platforms: number
    image: number
    synopsis: number
    characters: number
    userId: number
    isAdult: number
    _all: number
  }


  export type FictionAvgAggregateInputType = {
    id?: true
  }

  export type FictionSumAggregateInputType = {
    id?: true
  }

  export type FictionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    author?: true
    nationality?: true
    genre?: true
    startDate?: true
    endDate?: true
    currentState?: true
    original?: true
    platforms?: true
    image?: true
    synopsis?: true
    characters?: true
    userId?: true
    isAdult?: true
  }

  export type FictionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    author?: true
    nationality?: true
    genre?: true
    startDate?: true
    endDate?: true
    currentState?: true
    original?: true
    platforms?: true
    image?: true
    synopsis?: true
    characters?: true
    userId?: true
    isAdult?: true
  }

  export type FictionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    author?: true
    nationality?: true
    genre?: true
    startDate?: true
    endDate?: true
    currentState?: true
    original?: true
    platforms?: true
    image?: true
    synopsis?: true
    characters?: true
    userId?: true
    isAdult?: true
    _all?: true
  }

  export type FictionAggregateArgs = {
    /**
     * Filter which Fiction to aggregate.
     * 
    **/
    where?: FictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fictions to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fictions
    **/
    _count?: true | FictionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FictionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FictionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FictionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FictionMaxAggregateInputType
  }

  export type GetFictionAggregateType<T extends FictionAggregateArgs> = {
        [P in keyof T & keyof AggregateFiction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiction[P]>
      : GetScalarType<T[P], AggregateFiction[P]>
  }




  export type FictionGroupByArgs = {
    where?: FictionWhereInput
    orderBy?: Enumerable<FictionOrderByWithAggregationInput>
    by: Array<FictionScalarFieldEnum>
    having?: FictionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FictionCountAggregateInputType | true
    _avg?: FictionAvgAggregateInputType
    _sum?: FictionSumAggregateInputType
    _min?: FictionMinAggregateInputType
    _max?: FictionMaxAggregateInputType
  }


  export type FictionGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date
    endDate: Date
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    userId: string
    isAdult: boolean | null
    _count: FictionCountAggregateOutputType | null
    _avg: FictionAvgAggregateOutputType | null
    _sum: FictionSumAggregateOutputType | null
    _min: FictionMinAggregateOutputType | null
    _max: FictionMaxAggregateOutputType | null
  }

  type GetFictionGroupByPayload<T extends FictionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FictionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FictionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FictionGroupByOutputType[P]>
            : GetScalarType<T[P], FictionGroupByOutputType[P]>
        }
      >
    >


  export type FictionSelect = {
    id?: boolean
    categories?: boolean | CategoriesOnFictionsFindManyArgs
    keywords?: boolean | KeywordsOnFictionsFindManyArgs
    fictionStat?: boolean | FictionStatArgs
    userFictionStat?: boolean | UserFictionStatArgs
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    author?: boolean
    nationality?: boolean
    genre?: boolean
    startDate?: boolean
    endDate?: boolean
    currentState?: boolean
    original?: boolean
    platforms?: boolean
    image?: boolean
    synopsis?: boolean
    characters?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    favs?: boolean | FavFindManyArgs
    isAdult?: boolean
    comments?: boolean | CommentFindManyArgs
    _count?: boolean | FictionCountOutputTypeArgs
  }

  export type FictionInclude = {
    categories?: boolean | CategoriesOnFictionsFindManyArgs
    keywords?: boolean | KeywordsOnFictionsFindManyArgs
    fictionStat?: boolean | FictionStatArgs
    userFictionStat?: boolean | UserFictionStatArgs
    user?: boolean | UserArgs
    favs?: boolean | FavFindManyArgs
    comments?: boolean | CommentFindManyArgs
    _count?: boolean | FictionCountOutputTypeArgs
  }

  export type FictionGetPayload<
    S extends boolean | null | undefined | FictionArgs,
    U = keyof S
      > = S extends true
        ? Fiction
    : S extends undefined
    ? never
    : S extends FictionArgs | FictionFindManyArgs
    ?'include' extends U
    ? Fiction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'categories' ? Array < CategoriesOnFictionsGetPayload<S['include'][P]>>  :
        P extends 'keywords' ? Array < KeywordsOnFictionsGetPayload<S['include'][P]>>  :
        P extends 'fictionStat' ? FictionStatGetPayload<S['include'][P]> | null :
        P extends 'userFictionStat' ? UserFictionStatGetPayload<S['include'][P]> | null :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'favs' ? Array < FavGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? FictionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'categories' ? Array < CategoriesOnFictionsGetPayload<S['select'][P]>>  :
        P extends 'keywords' ? Array < KeywordsOnFictionsGetPayload<S['select'][P]>>  :
        P extends 'fictionStat' ? FictionStatGetPayload<S['select'][P]> | null :
        P extends 'userFictionStat' ? UserFictionStatGetPayload<S['select'][P]> | null :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'favs' ? Array < FavGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? FictionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Fiction ? Fiction[P] : never
  } 
    : Fiction
  : Fiction


  type FictionCountArgs = Merge<
    Omit<FictionFindManyArgs, 'select' | 'include'> & {
      select?: FictionCountAggregateInputType | true
    }
  >

  export interface FictionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Fiction that matches the filter.
     * @param {FictionFindUniqueArgs} args - Arguments to find a Fiction
     * @example
     * // Get one Fiction
     * const fiction = await prisma.fiction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FictionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FictionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Fiction'> extends True ? CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>> : CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>

    /**
     * Find the first Fiction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionFindFirstArgs} args - Arguments to find a Fiction
     * @example
     * // Get one Fiction
     * const fiction = await prisma.fiction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FictionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FictionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Fiction'> extends True ? CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>> : CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>

    /**
     * Find zero or more Fictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fictions
     * const fictions = await prisma.fiction.findMany()
     * 
     * // Get first 10 Fictions
     * const fictions = await prisma.fiction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fictionWithIdOnly = await prisma.fiction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FictionFindManyArgs>(
      args?: SelectSubset<T, FictionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Fiction>>, PrismaPromise<Array<FictionGetPayload<T>>>>

    /**
     * Create a Fiction.
     * @param {FictionCreateArgs} args - Arguments to create a Fiction.
     * @example
     * // Create one Fiction
     * const Fiction = await prisma.fiction.create({
     *   data: {
     *     // ... data to create a Fiction
     *   }
     * })
     * 
    **/
    create<T extends FictionCreateArgs>(
      args: SelectSubset<T, FictionCreateArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Create many Fictions.
     *     @param {FictionCreateManyArgs} args - Arguments to create many Fictions.
     *     @example
     *     // Create many Fictions
     *     const fiction = await prisma.fiction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FictionCreateManyArgs>(
      args?: SelectSubset<T, FictionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Fiction.
     * @param {FictionDeleteArgs} args - Arguments to delete one Fiction.
     * @example
     * // Delete one Fiction
     * const Fiction = await prisma.fiction.delete({
     *   where: {
     *     // ... filter to delete one Fiction
     *   }
     * })
     * 
    **/
    delete<T extends FictionDeleteArgs>(
      args: SelectSubset<T, FictionDeleteArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Update one Fiction.
     * @param {FictionUpdateArgs} args - Arguments to update one Fiction.
     * @example
     * // Update one Fiction
     * const fiction = await prisma.fiction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FictionUpdateArgs>(
      args: SelectSubset<T, FictionUpdateArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Delete zero or more Fictions.
     * @param {FictionDeleteManyArgs} args - Arguments to filter Fictions to delete.
     * @example
     * // Delete a few Fictions
     * const { count } = await prisma.fiction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FictionDeleteManyArgs>(
      args?: SelectSubset<T, FictionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fictions
     * const fiction = await prisma.fiction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FictionUpdateManyArgs>(
      args: SelectSubset<T, FictionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Fiction.
     * @param {FictionUpsertArgs} args - Arguments to update or create a Fiction.
     * @example
     * // Update or create a Fiction
     * const fiction = await prisma.fiction.upsert({
     *   create: {
     *     // ... data to create a Fiction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fiction we want to update
     *   }
     * })
    **/
    upsert<T extends FictionUpsertArgs>(
      args: SelectSubset<T, FictionUpsertArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Find one Fiction that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FictionFindUniqueOrThrowArgs} args - Arguments to find a Fiction
     * @example
     * // Get one Fiction
     * const fiction = await prisma.fiction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FictionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FictionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Find the first Fiction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionFindFirstOrThrowArgs} args - Arguments to find a Fiction
     * @example
     * // Get one Fiction
     * const fiction = await prisma.fiction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FictionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FictionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Count the number of Fictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionCountArgs} args - Arguments to filter Fictions to count.
     * @example
     * // Count the number of Fictions
     * const count = await prisma.fiction.count({
     *   where: {
     *     // ... the filter for the Fictions we want to count
     *   }
     * })
    **/
    count<T extends FictionCountArgs>(
      args?: Subset<T, FictionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FictionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fiction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FictionAggregateArgs>(args: Subset<T, FictionAggregateArgs>): PrismaPromise<GetFictionAggregateType<T>>

    /**
     * Group by Fiction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FictionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FictionGroupByArgs['orderBy'] }
        : { orderBy?: FictionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FictionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFictionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fiction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FictionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categories<T extends CategoriesOnFictionsFindManyArgs = {}>(args?: Subset<T, CategoriesOnFictionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CategoriesOnFictions>>, PrismaPromise<Array<CategoriesOnFictionsGetPayload<T>>>>;

    keywords<T extends KeywordsOnFictionsFindManyArgs = {}>(args?: Subset<T, KeywordsOnFictionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KeywordsOnFictions>>, PrismaPromise<Array<KeywordsOnFictionsGetPayload<T>>>>;

    fictionStat<T extends FictionStatArgs = {}>(args?: Subset<T, FictionStatArgs>): CheckSelect<T, Prisma__FictionStatClient<FictionStat | null >, Prisma__FictionStatClient<FictionStatGetPayload<T> | null >>;

    userFictionStat<T extends UserFictionStatArgs = {}>(args?: Subset<T, UserFictionStatArgs>): CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat | null >, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    favs<T extends FavFindManyArgs = {}>(args?: Subset<T, FavFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Fav>>, PrismaPromise<Array<FavGetPayload<T>>>>;

    comments<T extends CommentFindManyArgs = {}>(args?: Subset<T, CommentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Fiction base type for findUnique actions
   */
  export type FictionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * Filter, which Fiction to fetch.
     * 
    **/
    where: FictionWhereUniqueInput
  }

  /**
   * Fiction: findUnique
   */
  export interface FictionFindUniqueArgs extends FictionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fiction base type for findFirst actions
   */
  export type FictionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * Filter, which Fiction to fetch.
     * 
    **/
    where?: FictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fictions to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fictions.
     * 
    **/
    cursor?: FictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fictions.
     * 
    **/
    distinct?: Enumerable<FictionScalarFieldEnum>
  }

  /**
   * Fiction: findFirst
   */
  export interface FictionFindFirstArgs extends FictionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fiction findMany
   */
  export type FictionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * Filter, which Fictions to fetch.
     * 
    **/
    where?: FictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fictions to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fictions.
     * 
    **/
    cursor?: FictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fictions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FictionScalarFieldEnum>
  }


  /**
   * Fiction create
   */
  export type FictionCreateArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * The data needed to create a Fiction.
     * 
    **/
    data: XOR<FictionCreateInput, FictionUncheckedCreateInput>
  }


  /**
   * Fiction createMany
   */
  export type FictionCreateManyArgs = {
    /**
     * The data used to create many Fictions.
     * 
    **/
    data: Enumerable<FictionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Fiction update
   */
  export type FictionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * The data needed to update a Fiction.
     * 
    **/
    data: XOR<FictionUpdateInput, FictionUncheckedUpdateInput>
    /**
     * Choose, which Fiction to update.
     * 
    **/
    where: FictionWhereUniqueInput
  }


  /**
   * Fiction updateMany
   */
  export type FictionUpdateManyArgs = {
    /**
     * The data used to update Fictions.
     * 
    **/
    data: XOR<FictionUpdateManyMutationInput, FictionUncheckedUpdateManyInput>
    /**
     * Filter which Fictions to update
     * 
    **/
    where?: FictionWhereInput
  }


  /**
   * Fiction upsert
   */
  export type FictionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * The filter to search for the Fiction to update in case it exists.
     * 
    **/
    where: FictionWhereUniqueInput
    /**
     * In case the Fiction found by the `where` argument doesn't exist, create a new Fiction with this data.
     * 
    **/
    create: XOR<FictionCreateInput, FictionUncheckedCreateInput>
    /**
     * In case the Fiction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FictionUpdateInput, FictionUncheckedUpdateInput>
  }


  /**
   * Fiction delete
   */
  export type FictionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * Filter which Fiction to delete.
     * 
    **/
    where: FictionWhereUniqueInput
  }


  /**
   * Fiction deleteMany
   */
  export type FictionDeleteManyArgs = {
    /**
     * Filter which Fictions to delete
     * 
    **/
    where?: FictionWhereInput
  }


  /**
   * Fiction: findUniqueOrThrow
   */
  export type FictionFindUniqueOrThrowArgs = FictionFindUniqueArgsBase
      

  /**
   * Fiction: findFirstOrThrow
   */
  export type FictionFindFirstOrThrowArgs = FictionFindFirstArgsBase
      

  /**
   * Fiction without action
   */
  export type FictionArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
  }



  /**
   * Model FictionStat
   */


  export type AggregateFictionStat = {
    _count: FictionStatCountAggregateOutputType | null
    _avg: FictionStatAvgAggregateOutputType | null
    _sum: FictionStatSumAggregateOutputType | null
    _min: FictionStatMinAggregateOutputType | null
    _max: FictionStatMaxAggregateOutputType | null
  }

  export type FictionStatAvgAggregateOutputType = {
    id: number | null
    fictionId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
  }

  export type FictionStatSumAggregateOutputType = {
    id: number | null
    fictionId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
  }

  export type FictionStatMinAggregateOutputType = {
    id: number | null
    fictionId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
  }

  export type FictionStatMaxAggregateOutputType = {
    id: number | null
    fictionId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
  }

  export type FictionStatCountAggregateOutputType = {
    id: number
    fictionId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    _all: number
  }


  export type FictionStatAvgAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
  }

  export type FictionStatSumAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
  }

  export type FictionStatMinAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
  }

  export type FictionStatMaxAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
  }

  export type FictionStatCountAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
    _all?: true
  }

  export type FictionStatAggregateArgs = {
    /**
     * Filter which FictionStat to aggregate.
     * 
    **/
    where?: FictionStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FictionStats to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FictionStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FictionStats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FictionStats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FictionStats
    **/
    _count?: true | FictionStatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FictionStatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FictionStatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FictionStatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FictionStatMaxAggregateInputType
  }

  export type GetFictionStatAggregateType<T extends FictionStatAggregateArgs> = {
        [P in keyof T & keyof AggregateFictionStat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFictionStat[P]>
      : GetScalarType<T[P], AggregateFictionStat[P]>
  }




  export type FictionStatGroupByArgs = {
    where?: FictionStatWhereInput
    orderBy?: Enumerable<FictionStatOrderByWithAggregationInput>
    by: Array<FictionStatScalarFieldEnum>
    having?: FictionStatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FictionStatCountAggregateInputType | true
    _avg?: FictionStatAvgAggregateInputType
    _sum?: FictionStatSumAggregateInputType
    _min?: FictionStatMinAggregateInputType
    _max?: FictionStatMaxAggregateInputType
  }


  export type FictionStatGroupByOutputType = {
    id: number
    fictionId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    _count: FictionStatCountAggregateOutputType | null
    _avg: FictionStatAvgAggregateOutputType | null
    _sum: FictionStatSumAggregateOutputType | null
    _min: FictionStatMinAggregateOutputType | null
    _max: FictionStatMaxAggregateOutputType | null
  }

  type GetFictionStatGroupByPayload<T extends FictionStatGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FictionStatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FictionStatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FictionStatGroupByOutputType[P]>
            : GetScalarType<T[P], FictionStatGroupByOutputType[P]>
        }
      >
    >


  export type FictionStatSelect = {
    id?: boolean
    fiction?: boolean | FictionArgs
    fictionId?: boolean
    originality?: boolean
    verisimilitude?: boolean
    synopsisComposition?: boolean
    character?: boolean
    writing?: boolean
    value?: boolean
  }

  export type FictionStatInclude = {
    fiction?: boolean | FictionArgs
  }

  export type FictionStatGetPayload<
    S extends boolean | null | undefined | FictionStatArgs,
    U = keyof S
      > = S extends true
        ? FictionStat
    : S extends undefined
    ? never
    : S extends FictionStatArgs | FictionStatFindManyArgs
    ?'include' extends U
    ? FictionStat  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fiction' ? FictionGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fiction' ? FictionGetPayload<S['select'][P]> :  P extends keyof FictionStat ? FictionStat[P] : never
  } 
    : FictionStat
  : FictionStat


  type FictionStatCountArgs = Merge<
    Omit<FictionStatFindManyArgs, 'select' | 'include'> & {
      select?: FictionStatCountAggregateInputType | true
    }
  >

  export interface FictionStatDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one FictionStat that matches the filter.
     * @param {FictionStatFindUniqueArgs} args - Arguments to find a FictionStat
     * @example
     * // Get one FictionStat
     * const fictionStat = await prisma.fictionStat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FictionStatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FictionStatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FictionStat'> extends True ? CheckSelect<T, Prisma__FictionStatClient<FictionStat>, Prisma__FictionStatClient<FictionStatGetPayload<T>>> : CheckSelect<T, Prisma__FictionStatClient<FictionStat | null >, Prisma__FictionStatClient<FictionStatGetPayload<T> | null >>

    /**
     * Find the first FictionStat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionStatFindFirstArgs} args - Arguments to find a FictionStat
     * @example
     * // Get one FictionStat
     * const fictionStat = await prisma.fictionStat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FictionStatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FictionStatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FictionStat'> extends True ? CheckSelect<T, Prisma__FictionStatClient<FictionStat>, Prisma__FictionStatClient<FictionStatGetPayload<T>>> : CheckSelect<T, Prisma__FictionStatClient<FictionStat | null >, Prisma__FictionStatClient<FictionStatGetPayload<T> | null >>

    /**
     * Find zero or more FictionStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionStatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FictionStats
     * const fictionStats = await prisma.fictionStat.findMany()
     * 
     * // Get first 10 FictionStats
     * const fictionStats = await prisma.fictionStat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fictionStatWithIdOnly = await prisma.fictionStat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FictionStatFindManyArgs>(
      args?: SelectSubset<T, FictionStatFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<FictionStat>>, PrismaPromise<Array<FictionStatGetPayload<T>>>>

    /**
     * Create a FictionStat.
     * @param {FictionStatCreateArgs} args - Arguments to create a FictionStat.
     * @example
     * // Create one FictionStat
     * const FictionStat = await prisma.fictionStat.create({
     *   data: {
     *     // ... data to create a FictionStat
     *   }
     * })
     * 
    **/
    create<T extends FictionStatCreateArgs>(
      args: SelectSubset<T, FictionStatCreateArgs>
    ): CheckSelect<T, Prisma__FictionStatClient<FictionStat>, Prisma__FictionStatClient<FictionStatGetPayload<T>>>

    /**
     * Create many FictionStats.
     *     @param {FictionStatCreateManyArgs} args - Arguments to create many FictionStats.
     *     @example
     *     // Create many FictionStats
     *     const fictionStat = await prisma.fictionStat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FictionStatCreateManyArgs>(
      args?: SelectSubset<T, FictionStatCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FictionStat.
     * @param {FictionStatDeleteArgs} args - Arguments to delete one FictionStat.
     * @example
     * // Delete one FictionStat
     * const FictionStat = await prisma.fictionStat.delete({
     *   where: {
     *     // ... filter to delete one FictionStat
     *   }
     * })
     * 
    **/
    delete<T extends FictionStatDeleteArgs>(
      args: SelectSubset<T, FictionStatDeleteArgs>
    ): CheckSelect<T, Prisma__FictionStatClient<FictionStat>, Prisma__FictionStatClient<FictionStatGetPayload<T>>>

    /**
     * Update one FictionStat.
     * @param {FictionStatUpdateArgs} args - Arguments to update one FictionStat.
     * @example
     * // Update one FictionStat
     * const fictionStat = await prisma.fictionStat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FictionStatUpdateArgs>(
      args: SelectSubset<T, FictionStatUpdateArgs>
    ): CheckSelect<T, Prisma__FictionStatClient<FictionStat>, Prisma__FictionStatClient<FictionStatGetPayload<T>>>

    /**
     * Delete zero or more FictionStats.
     * @param {FictionStatDeleteManyArgs} args - Arguments to filter FictionStats to delete.
     * @example
     * // Delete a few FictionStats
     * const { count } = await prisma.fictionStat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FictionStatDeleteManyArgs>(
      args?: SelectSubset<T, FictionStatDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FictionStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionStatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FictionStats
     * const fictionStat = await prisma.fictionStat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FictionStatUpdateManyArgs>(
      args: SelectSubset<T, FictionStatUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FictionStat.
     * @param {FictionStatUpsertArgs} args - Arguments to update or create a FictionStat.
     * @example
     * // Update or create a FictionStat
     * const fictionStat = await prisma.fictionStat.upsert({
     *   create: {
     *     // ... data to create a FictionStat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FictionStat we want to update
     *   }
     * })
    **/
    upsert<T extends FictionStatUpsertArgs>(
      args: SelectSubset<T, FictionStatUpsertArgs>
    ): CheckSelect<T, Prisma__FictionStatClient<FictionStat>, Prisma__FictionStatClient<FictionStatGetPayload<T>>>

    /**
     * Find one FictionStat that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FictionStatFindUniqueOrThrowArgs} args - Arguments to find a FictionStat
     * @example
     * // Get one FictionStat
     * const fictionStat = await prisma.fictionStat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FictionStatFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FictionStatFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__FictionStatClient<FictionStat>, Prisma__FictionStatClient<FictionStatGetPayload<T>>>

    /**
     * Find the first FictionStat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionStatFindFirstOrThrowArgs} args - Arguments to find a FictionStat
     * @example
     * // Get one FictionStat
     * const fictionStat = await prisma.fictionStat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FictionStatFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FictionStatFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__FictionStatClient<FictionStat>, Prisma__FictionStatClient<FictionStatGetPayload<T>>>

    /**
     * Count the number of FictionStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionStatCountArgs} args - Arguments to filter FictionStats to count.
     * @example
     * // Count the number of FictionStats
     * const count = await prisma.fictionStat.count({
     *   where: {
     *     // ... the filter for the FictionStats we want to count
     *   }
     * })
    **/
    count<T extends FictionStatCountArgs>(
      args?: Subset<T, FictionStatCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FictionStatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FictionStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionStatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FictionStatAggregateArgs>(args: Subset<T, FictionStatAggregateArgs>): PrismaPromise<GetFictionStatAggregateType<T>>

    /**
     * Group by FictionStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionStatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FictionStatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FictionStatGroupByArgs['orderBy'] }
        : { orderBy?: FictionStatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FictionStatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFictionStatGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for FictionStat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FictionStatClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fiction<T extends FictionArgs = {}>(args?: Subset<T, FictionArgs>): CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * FictionStat base type for findUnique actions
   */
  export type FictionStatFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FictionStat
     * 
    **/
    select?: FictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionStatInclude | null
    /**
     * Filter, which FictionStat to fetch.
     * 
    **/
    where: FictionStatWhereUniqueInput
  }

  /**
   * FictionStat: findUnique
   */
  export interface FictionStatFindUniqueArgs extends FictionStatFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FictionStat base type for findFirst actions
   */
  export type FictionStatFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FictionStat
     * 
    **/
    select?: FictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionStatInclude | null
    /**
     * Filter, which FictionStat to fetch.
     * 
    **/
    where?: FictionStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FictionStats to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FictionStats.
     * 
    **/
    cursor?: FictionStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FictionStats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FictionStats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FictionStats.
     * 
    **/
    distinct?: Enumerable<FictionStatScalarFieldEnum>
  }

  /**
   * FictionStat: findFirst
   */
  export interface FictionStatFindFirstArgs extends FictionStatFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FictionStat findMany
   */
  export type FictionStatFindManyArgs = {
    /**
     * Select specific fields to fetch from the FictionStat
     * 
    **/
    select?: FictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionStatInclude | null
    /**
     * Filter, which FictionStats to fetch.
     * 
    **/
    where?: FictionStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FictionStats to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FictionStats.
     * 
    **/
    cursor?: FictionStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FictionStats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FictionStats.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FictionStatScalarFieldEnum>
  }


  /**
   * FictionStat create
   */
  export type FictionStatCreateArgs = {
    /**
     * Select specific fields to fetch from the FictionStat
     * 
    **/
    select?: FictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionStatInclude | null
    /**
     * The data needed to create a FictionStat.
     * 
    **/
    data: XOR<FictionStatCreateInput, FictionStatUncheckedCreateInput>
  }


  /**
   * FictionStat createMany
   */
  export type FictionStatCreateManyArgs = {
    /**
     * The data used to create many FictionStats.
     * 
    **/
    data: Enumerable<FictionStatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FictionStat update
   */
  export type FictionStatUpdateArgs = {
    /**
     * Select specific fields to fetch from the FictionStat
     * 
    **/
    select?: FictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionStatInclude | null
    /**
     * The data needed to update a FictionStat.
     * 
    **/
    data: XOR<FictionStatUpdateInput, FictionStatUncheckedUpdateInput>
    /**
     * Choose, which FictionStat to update.
     * 
    **/
    where: FictionStatWhereUniqueInput
  }


  /**
   * FictionStat updateMany
   */
  export type FictionStatUpdateManyArgs = {
    /**
     * The data used to update FictionStats.
     * 
    **/
    data: XOR<FictionStatUpdateManyMutationInput, FictionStatUncheckedUpdateManyInput>
    /**
     * Filter which FictionStats to update
     * 
    **/
    where?: FictionStatWhereInput
  }


  /**
   * FictionStat upsert
   */
  export type FictionStatUpsertArgs = {
    /**
     * Select specific fields to fetch from the FictionStat
     * 
    **/
    select?: FictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionStatInclude | null
    /**
     * The filter to search for the FictionStat to update in case it exists.
     * 
    **/
    where: FictionStatWhereUniqueInput
    /**
     * In case the FictionStat found by the `where` argument doesn't exist, create a new FictionStat with this data.
     * 
    **/
    create: XOR<FictionStatCreateInput, FictionStatUncheckedCreateInput>
    /**
     * In case the FictionStat was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FictionStatUpdateInput, FictionStatUncheckedUpdateInput>
  }


  /**
   * FictionStat delete
   */
  export type FictionStatDeleteArgs = {
    /**
     * Select specific fields to fetch from the FictionStat
     * 
    **/
    select?: FictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionStatInclude | null
    /**
     * Filter which FictionStat to delete.
     * 
    **/
    where: FictionStatWhereUniqueInput
  }


  /**
   * FictionStat deleteMany
   */
  export type FictionStatDeleteManyArgs = {
    /**
     * Filter which FictionStats to delete
     * 
    **/
    where?: FictionStatWhereInput
  }


  /**
   * FictionStat: findUniqueOrThrow
   */
  export type FictionStatFindUniqueOrThrowArgs = FictionStatFindUniqueArgsBase
      

  /**
   * FictionStat: findFirstOrThrow
   */
  export type FictionStatFindFirstOrThrowArgs = FictionStatFindFirstArgsBase
      

  /**
   * FictionStat without action
   */
  export type FictionStatArgs = {
    /**
     * Select specific fields to fetch from the FictionStat
     * 
    **/
    select?: FictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionStatInclude | null
  }



  /**
   * Model UserFictionStat
   */


  export type AggregateUserFictionStat = {
    _count: UserFictionStatCountAggregateOutputType | null
    _avg: UserFictionStatAvgAggregateOutputType | null
    _sum: UserFictionStatSumAggregateOutputType | null
    _min: UserFictionStatMinAggregateOutputType | null
    _max: UserFictionStatMaxAggregateOutputType | null
  }

  export type UserFictionStatAvgAggregateOutputType = {
    id: number | null
    fictionId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
    total: number | null
  }

  export type UserFictionStatSumAggregateOutputType = {
    id: number | null
    fictionId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
    total: number | null
  }

  export type UserFictionStatMinAggregateOutputType = {
    id: number | null
    fictionId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
    total: number | null
  }

  export type UserFictionStatMaxAggregateOutputType = {
    id: number | null
    fictionId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
    total: number | null
  }

  export type UserFictionStatCountAggregateOutputType = {
    id: number
    fictionId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
    _all: number
  }


  export type UserFictionStatAvgAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
    total?: true
  }

  export type UserFictionStatSumAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
    total?: true
  }

  export type UserFictionStatMinAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
    total?: true
  }

  export type UserFictionStatMaxAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
    total?: true
  }

  export type UserFictionStatCountAggregateInputType = {
    id?: true
    fictionId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
    total?: true
    _all?: true
  }

  export type UserFictionStatAggregateArgs = {
    /**
     * Filter which UserFictionStat to aggregate.
     * 
    **/
    where?: UserFictionStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFictionStats to fetch.
     * 
    **/
    orderBy?: Enumerable<UserFictionStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserFictionStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFictionStats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFictionStats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFictionStats
    **/
    _count?: true | UserFictionStatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserFictionStatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserFictionStatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFictionStatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFictionStatMaxAggregateInputType
  }

  export type GetUserFictionStatAggregateType<T extends UserFictionStatAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFictionStat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFictionStat[P]>
      : GetScalarType<T[P], AggregateUserFictionStat[P]>
  }




  export type UserFictionStatGroupByArgs = {
    where?: UserFictionStatWhereInput
    orderBy?: Enumerable<UserFictionStatOrderByWithAggregationInput>
    by: Array<UserFictionStatScalarFieldEnum>
    having?: UserFictionStatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFictionStatCountAggregateInputType | true
    _avg?: UserFictionStatAvgAggregateInputType
    _sum?: UserFictionStatSumAggregateInputType
    _min?: UserFictionStatMinAggregateInputType
    _max?: UserFictionStatMaxAggregateInputType
  }


  export type UserFictionStatGroupByOutputType = {
    id: number
    fictionId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
    _count: UserFictionStatCountAggregateOutputType | null
    _avg: UserFictionStatAvgAggregateOutputType | null
    _sum: UserFictionStatSumAggregateOutputType | null
    _min: UserFictionStatMinAggregateOutputType | null
    _max: UserFictionStatMaxAggregateOutputType | null
  }

  type GetUserFictionStatGroupByPayload<T extends UserFictionStatGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserFictionStatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFictionStatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFictionStatGroupByOutputType[P]>
            : GetScalarType<T[P], UserFictionStatGroupByOutputType[P]>
        }
      >
    >


  export type UserFictionStatSelect = {
    id?: boolean
    fiction?: boolean | FictionArgs
    fictionId?: boolean
    users?: boolean | UserFindManyArgs
    userRationOnFictions?: boolean | UserRationOnFictionFindManyArgs
    originality?: boolean
    verisimilitude?: boolean
    synopsisComposition?: boolean
    character?: boolean
    writing?: boolean
    value?: boolean
    total?: boolean
    _count?: boolean | UserFictionStatCountOutputTypeArgs
  }

  export type UserFictionStatInclude = {
    fiction?: boolean | FictionArgs
    users?: boolean | UserFindManyArgs
    userRationOnFictions?: boolean | UserRationOnFictionFindManyArgs
    _count?: boolean | UserFictionStatCountOutputTypeArgs
  }

  export type UserFictionStatGetPayload<
    S extends boolean | null | undefined | UserFictionStatArgs,
    U = keyof S
      > = S extends true
        ? UserFictionStat
    : S extends undefined
    ? never
    : S extends UserFictionStatArgs | UserFictionStatFindManyArgs
    ?'include' extends U
    ? UserFictionStat  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fiction' ? FictionGetPayload<S['include'][P]> :
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'userRationOnFictions' ? Array < UserRationOnFictionGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserFictionStatCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fiction' ? FictionGetPayload<S['select'][P]> :
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'userRationOnFictions' ? Array < UserRationOnFictionGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserFictionStatCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof UserFictionStat ? UserFictionStat[P] : never
  } 
    : UserFictionStat
  : UserFictionStat


  type UserFictionStatCountArgs = Merge<
    Omit<UserFictionStatFindManyArgs, 'select' | 'include'> & {
      select?: UserFictionStatCountAggregateInputType | true
    }
  >

  export interface UserFictionStatDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserFictionStat that matches the filter.
     * @param {UserFictionStatFindUniqueArgs} args - Arguments to find a UserFictionStat
     * @example
     * // Get one UserFictionStat
     * const userFictionStat = await prisma.userFictionStat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFictionStatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFictionStatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserFictionStat'> extends True ? CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat>, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T>>> : CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat | null >, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T> | null >>

    /**
     * Find the first UserFictionStat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFictionStatFindFirstArgs} args - Arguments to find a UserFictionStat
     * @example
     * // Get one UserFictionStat
     * const userFictionStat = await prisma.userFictionStat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFictionStatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFictionStatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserFictionStat'> extends True ? CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat>, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T>>> : CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat | null >, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T> | null >>

    /**
     * Find zero or more UserFictionStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFictionStatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFictionStats
     * const userFictionStats = await prisma.userFictionStat.findMany()
     * 
     * // Get first 10 UserFictionStats
     * const userFictionStats = await prisma.userFictionStat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userFictionStatWithIdOnly = await prisma.userFictionStat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFictionStatFindManyArgs>(
      args?: SelectSubset<T, UserFictionStatFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserFictionStat>>, PrismaPromise<Array<UserFictionStatGetPayload<T>>>>

    /**
     * Create a UserFictionStat.
     * @param {UserFictionStatCreateArgs} args - Arguments to create a UserFictionStat.
     * @example
     * // Create one UserFictionStat
     * const UserFictionStat = await prisma.userFictionStat.create({
     *   data: {
     *     // ... data to create a UserFictionStat
     *   }
     * })
     * 
    **/
    create<T extends UserFictionStatCreateArgs>(
      args: SelectSubset<T, UserFictionStatCreateArgs>
    ): CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat>, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T>>>

    /**
     * Create many UserFictionStats.
     *     @param {UserFictionStatCreateManyArgs} args - Arguments to create many UserFictionStats.
     *     @example
     *     // Create many UserFictionStats
     *     const userFictionStat = await prisma.userFictionStat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserFictionStatCreateManyArgs>(
      args?: SelectSubset<T, UserFictionStatCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserFictionStat.
     * @param {UserFictionStatDeleteArgs} args - Arguments to delete one UserFictionStat.
     * @example
     * // Delete one UserFictionStat
     * const UserFictionStat = await prisma.userFictionStat.delete({
     *   where: {
     *     // ... filter to delete one UserFictionStat
     *   }
     * })
     * 
    **/
    delete<T extends UserFictionStatDeleteArgs>(
      args: SelectSubset<T, UserFictionStatDeleteArgs>
    ): CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat>, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T>>>

    /**
     * Update one UserFictionStat.
     * @param {UserFictionStatUpdateArgs} args - Arguments to update one UserFictionStat.
     * @example
     * // Update one UserFictionStat
     * const userFictionStat = await prisma.userFictionStat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserFictionStatUpdateArgs>(
      args: SelectSubset<T, UserFictionStatUpdateArgs>
    ): CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat>, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T>>>

    /**
     * Delete zero or more UserFictionStats.
     * @param {UserFictionStatDeleteManyArgs} args - Arguments to filter UserFictionStats to delete.
     * @example
     * // Delete a few UserFictionStats
     * const { count } = await prisma.userFictionStat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserFictionStatDeleteManyArgs>(
      args?: SelectSubset<T, UserFictionStatDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFictionStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFictionStatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFictionStats
     * const userFictionStat = await prisma.userFictionStat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserFictionStatUpdateManyArgs>(
      args: SelectSubset<T, UserFictionStatUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserFictionStat.
     * @param {UserFictionStatUpsertArgs} args - Arguments to update or create a UserFictionStat.
     * @example
     * // Update or create a UserFictionStat
     * const userFictionStat = await prisma.userFictionStat.upsert({
     *   create: {
     *     // ... data to create a UserFictionStat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFictionStat we want to update
     *   }
     * })
    **/
    upsert<T extends UserFictionStatUpsertArgs>(
      args: SelectSubset<T, UserFictionStatUpsertArgs>
    ): CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat>, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T>>>

    /**
     * Find one UserFictionStat that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFictionStatFindUniqueOrThrowArgs} args - Arguments to find a UserFictionStat
     * @example
     * // Get one UserFictionStat
     * const userFictionStat = await prisma.userFictionStat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFictionStatFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFictionStatFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat>, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T>>>

    /**
     * Find the first UserFictionStat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFictionStatFindFirstOrThrowArgs} args - Arguments to find a UserFictionStat
     * @example
     * // Get one UserFictionStat
     * const userFictionStat = await prisma.userFictionStat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFictionStatFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFictionStatFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat>, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T>>>

    /**
     * Count the number of UserFictionStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFictionStatCountArgs} args - Arguments to filter UserFictionStats to count.
     * @example
     * // Count the number of UserFictionStats
     * const count = await prisma.userFictionStat.count({
     *   where: {
     *     // ... the filter for the UserFictionStats we want to count
     *   }
     * })
    **/
    count<T extends UserFictionStatCountArgs>(
      args?: Subset<T, UserFictionStatCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFictionStatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFictionStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFictionStatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFictionStatAggregateArgs>(args: Subset<T, UserFictionStatAggregateArgs>): PrismaPromise<GetUserFictionStatAggregateType<T>>

    /**
     * Group by UserFictionStat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFictionStatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFictionStatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFictionStatGroupByArgs['orderBy'] }
        : { orderBy?: UserFictionStatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFictionStatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFictionStatGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFictionStat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserFictionStatClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fiction<T extends FictionArgs = {}>(args?: Subset<T, FictionArgs>): CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>;

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    userRationOnFictions<T extends UserRationOnFictionFindManyArgs = {}>(args?: Subset<T, UserRationOnFictionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserRationOnFiction>>, PrismaPromise<Array<UserRationOnFictionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserFictionStat base type for findUnique actions
   */
  export type UserFictionStatFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserFictionStat
     * 
    **/
    select?: UserFictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFictionStatInclude | null
    /**
     * Filter, which UserFictionStat to fetch.
     * 
    **/
    where: UserFictionStatWhereUniqueInput
  }

  /**
   * UserFictionStat: findUnique
   */
  export interface UserFictionStatFindUniqueArgs extends UserFictionStatFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserFictionStat base type for findFirst actions
   */
  export type UserFictionStatFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserFictionStat
     * 
    **/
    select?: UserFictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFictionStatInclude | null
    /**
     * Filter, which UserFictionStat to fetch.
     * 
    **/
    where?: UserFictionStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFictionStats to fetch.
     * 
    **/
    orderBy?: Enumerable<UserFictionStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFictionStats.
     * 
    **/
    cursor?: UserFictionStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFictionStats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFictionStats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFictionStats.
     * 
    **/
    distinct?: Enumerable<UserFictionStatScalarFieldEnum>
  }

  /**
   * UserFictionStat: findFirst
   */
  export interface UserFictionStatFindFirstArgs extends UserFictionStatFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserFictionStat findMany
   */
  export type UserFictionStatFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserFictionStat
     * 
    **/
    select?: UserFictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFictionStatInclude | null
    /**
     * Filter, which UserFictionStats to fetch.
     * 
    **/
    where?: UserFictionStatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFictionStats to fetch.
     * 
    **/
    orderBy?: Enumerable<UserFictionStatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFictionStats.
     * 
    **/
    cursor?: UserFictionStatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFictionStats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFictionStats.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserFictionStatScalarFieldEnum>
  }


  /**
   * UserFictionStat create
   */
  export type UserFictionStatCreateArgs = {
    /**
     * Select specific fields to fetch from the UserFictionStat
     * 
    **/
    select?: UserFictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFictionStatInclude | null
    /**
     * The data needed to create a UserFictionStat.
     * 
    **/
    data: XOR<UserFictionStatCreateInput, UserFictionStatUncheckedCreateInput>
  }


  /**
   * UserFictionStat createMany
   */
  export type UserFictionStatCreateManyArgs = {
    /**
     * The data used to create many UserFictionStats.
     * 
    **/
    data: Enumerable<UserFictionStatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserFictionStat update
   */
  export type UserFictionStatUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserFictionStat
     * 
    **/
    select?: UserFictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFictionStatInclude | null
    /**
     * The data needed to update a UserFictionStat.
     * 
    **/
    data: XOR<UserFictionStatUpdateInput, UserFictionStatUncheckedUpdateInput>
    /**
     * Choose, which UserFictionStat to update.
     * 
    **/
    where: UserFictionStatWhereUniqueInput
  }


  /**
   * UserFictionStat updateMany
   */
  export type UserFictionStatUpdateManyArgs = {
    /**
     * The data used to update UserFictionStats.
     * 
    **/
    data: XOR<UserFictionStatUpdateManyMutationInput, UserFictionStatUncheckedUpdateManyInput>
    /**
     * Filter which UserFictionStats to update
     * 
    **/
    where?: UserFictionStatWhereInput
  }


  /**
   * UserFictionStat upsert
   */
  export type UserFictionStatUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserFictionStat
     * 
    **/
    select?: UserFictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFictionStatInclude | null
    /**
     * The filter to search for the UserFictionStat to update in case it exists.
     * 
    **/
    where: UserFictionStatWhereUniqueInput
    /**
     * In case the UserFictionStat found by the `where` argument doesn't exist, create a new UserFictionStat with this data.
     * 
    **/
    create: XOR<UserFictionStatCreateInput, UserFictionStatUncheckedCreateInput>
    /**
     * In case the UserFictionStat was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserFictionStatUpdateInput, UserFictionStatUncheckedUpdateInput>
  }


  /**
   * UserFictionStat delete
   */
  export type UserFictionStatDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserFictionStat
     * 
    **/
    select?: UserFictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFictionStatInclude | null
    /**
     * Filter which UserFictionStat to delete.
     * 
    **/
    where: UserFictionStatWhereUniqueInput
  }


  /**
   * UserFictionStat deleteMany
   */
  export type UserFictionStatDeleteManyArgs = {
    /**
     * Filter which UserFictionStats to delete
     * 
    **/
    where?: UserFictionStatWhereInput
  }


  /**
   * UserFictionStat: findUniqueOrThrow
   */
  export type UserFictionStatFindUniqueOrThrowArgs = UserFictionStatFindUniqueArgsBase
      

  /**
   * UserFictionStat: findFirstOrThrow
   */
  export type UserFictionStatFindFirstOrThrowArgs = UserFictionStatFindFirstArgsBase
      

  /**
   * UserFictionStat without action
   */
  export type UserFictionStatArgs = {
    /**
     * Select specific fields to fetch from the UserFictionStat
     * 
    **/
    select?: UserFictionStatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFictionStatInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    name?: boolean
    fictions?: boolean | CategoriesOnFictionsFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryInclude = {
    fictions?: boolean | CategoriesOnFictionsFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fictions' ? Array < CategoriesOnFictionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fictions' ? Array < CategoriesOnFictionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Find one Category that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fictions<T extends CategoriesOnFictionsFindManyArgs = {}>(args?: Subset<T, CategoriesOnFictionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CategoriesOnFictions>>, PrismaPromise<Array<CategoriesOnFictionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }

  /**
   * Category: findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category: findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category: findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = CategoryFindUniqueArgsBase
      

  /**
   * Category: findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = CategoryFindFirstArgsBase
      

  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Keyword
   */


  export type AggregateKeyword = {
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  export type KeywordAvgAggregateOutputType = {
    id: number | null
  }

  export type KeywordSumAggregateOutputType = {
    id: number | null
  }

  export type KeywordMinAggregateOutputType = {
    id: number | null
    name: string | null
    isOfMC: boolean | null
    isOfHeroine: boolean | null
  }

  export type KeywordMaxAggregateOutputType = {
    id: number | null
    name: string | null
    isOfMC: boolean | null
    isOfHeroine: boolean | null
  }

  export type KeywordCountAggregateOutputType = {
    id: number
    name: number
    isOfMC: number
    isOfHeroine: number
    _all: number
  }


  export type KeywordAvgAggregateInputType = {
    id?: true
  }

  export type KeywordSumAggregateInputType = {
    id?: true
  }

  export type KeywordMinAggregateInputType = {
    id?: true
    name?: true
    isOfMC?: true
    isOfHeroine?: true
  }

  export type KeywordMaxAggregateInputType = {
    id?: true
    name?: true
    isOfMC?: true
    isOfHeroine?: true
  }

  export type KeywordCountAggregateInputType = {
    id?: true
    name?: true
    isOfMC?: true
    isOfHeroine?: true
    _all?: true
  }

  export type KeywordAggregateArgs = {
    /**
     * Filter which Keyword to aggregate.
     * 
    **/
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keywords
    **/
    _count?: true | KeywordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeywordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeywordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeywordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeywordMaxAggregateInputType
  }

  export type GetKeywordAggregateType<T extends KeywordAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyword[P]>
      : GetScalarType<T[P], AggregateKeyword[P]>
  }




  export type KeywordGroupByArgs = {
    where?: KeywordWhereInput
    orderBy?: Enumerable<KeywordOrderByWithAggregationInput>
    by: Array<KeywordScalarFieldEnum>
    having?: KeywordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeywordCountAggregateInputType | true
    _avg?: KeywordAvgAggregateInputType
    _sum?: KeywordSumAggregateInputType
    _min?: KeywordMinAggregateInputType
    _max?: KeywordMaxAggregateInputType
  }


  export type KeywordGroupByOutputType = {
    id: number
    name: string
    isOfMC: boolean
    isOfHeroine: boolean
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  type GetKeywordGroupByPayload<T extends KeywordGroupByArgs> = PrismaPromise<
    Array<
      PickArray<KeywordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeywordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeywordGroupByOutputType[P]>
            : GetScalarType<T[P], KeywordGroupByOutputType[P]>
        }
      >
    >


  export type KeywordSelect = {
    id?: boolean
    name?: boolean
    isOfMC?: boolean
    isOfHeroine?: boolean
    fictions?: boolean | KeywordsOnFictionsFindManyArgs
    _count?: boolean | KeywordCountOutputTypeArgs
  }

  export type KeywordInclude = {
    fictions?: boolean | KeywordsOnFictionsFindManyArgs
    _count?: boolean | KeywordCountOutputTypeArgs
  }

  export type KeywordGetPayload<
    S extends boolean | null | undefined | KeywordArgs,
    U = keyof S
      > = S extends true
        ? Keyword
    : S extends undefined
    ? never
    : S extends KeywordArgs | KeywordFindManyArgs
    ?'include' extends U
    ? Keyword  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fictions' ? Array < KeywordsOnFictionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? KeywordCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fictions' ? Array < KeywordsOnFictionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? KeywordCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Keyword ? Keyword[P] : never
  } 
    : Keyword
  : Keyword


  type KeywordCountArgs = Merge<
    Omit<KeywordFindManyArgs, 'select' | 'include'> & {
      select?: KeywordCountAggregateInputType | true
    }
  >

  export interface KeywordDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Keyword that matches the filter.
     * @param {KeywordFindUniqueArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KeywordFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KeywordFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Keyword'> extends True ? CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>> : CheckSelect<T, Prisma__KeywordClient<Keyword | null >, Prisma__KeywordClient<KeywordGetPayload<T> | null >>

    /**
     * Find the first Keyword that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindFirstArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KeywordFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KeywordFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Keyword'> extends True ? CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>> : CheckSelect<T, Prisma__KeywordClient<Keyword | null >, Prisma__KeywordClient<KeywordGetPayload<T> | null >>

    /**
     * Find zero or more Keywords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keywords
     * const keywords = await prisma.keyword.findMany()
     * 
     * // Get first 10 Keywords
     * const keywords = await prisma.keyword.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keywordWithIdOnly = await prisma.keyword.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KeywordFindManyArgs>(
      args?: SelectSubset<T, KeywordFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Keyword>>, PrismaPromise<Array<KeywordGetPayload<T>>>>

    /**
     * Create a Keyword.
     * @param {KeywordCreateArgs} args - Arguments to create a Keyword.
     * @example
     * // Create one Keyword
     * const Keyword = await prisma.keyword.create({
     *   data: {
     *     // ... data to create a Keyword
     *   }
     * })
     * 
    **/
    create<T extends KeywordCreateArgs>(
      args: SelectSubset<T, KeywordCreateArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Create many Keywords.
     *     @param {KeywordCreateManyArgs} args - Arguments to create many Keywords.
     *     @example
     *     // Create many Keywords
     *     const keyword = await prisma.keyword.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KeywordCreateManyArgs>(
      args?: SelectSubset<T, KeywordCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Keyword.
     * @param {KeywordDeleteArgs} args - Arguments to delete one Keyword.
     * @example
     * // Delete one Keyword
     * const Keyword = await prisma.keyword.delete({
     *   where: {
     *     // ... filter to delete one Keyword
     *   }
     * })
     * 
    **/
    delete<T extends KeywordDeleteArgs>(
      args: SelectSubset<T, KeywordDeleteArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Update one Keyword.
     * @param {KeywordUpdateArgs} args - Arguments to update one Keyword.
     * @example
     * // Update one Keyword
     * const keyword = await prisma.keyword.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KeywordUpdateArgs>(
      args: SelectSubset<T, KeywordUpdateArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Delete zero or more Keywords.
     * @param {KeywordDeleteManyArgs} args - Arguments to filter Keywords to delete.
     * @example
     * // Delete a few Keywords
     * const { count } = await prisma.keyword.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KeywordDeleteManyArgs>(
      args?: SelectSubset<T, KeywordDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keywords
     * const keyword = await prisma.keyword.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KeywordUpdateManyArgs>(
      args: SelectSubset<T, KeywordUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Keyword.
     * @param {KeywordUpsertArgs} args - Arguments to update or create a Keyword.
     * @example
     * // Update or create a Keyword
     * const keyword = await prisma.keyword.upsert({
     *   create: {
     *     // ... data to create a Keyword
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Keyword we want to update
     *   }
     * })
    **/
    upsert<T extends KeywordUpsertArgs>(
      args: SelectSubset<T, KeywordUpsertArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Find one Keyword that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {KeywordFindUniqueOrThrowArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KeywordFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, KeywordFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Find the first Keyword that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindFirstOrThrowArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KeywordFindFirstOrThrowArgs>(
      args?: SelectSubset<T, KeywordFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Count the number of Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordCountArgs} args - Arguments to filter Keywords to count.
     * @example
     * // Count the number of Keywords
     * const count = await prisma.keyword.count({
     *   where: {
     *     // ... the filter for the Keywords we want to count
     *   }
     * })
    **/
    count<T extends KeywordCountArgs>(
      args?: Subset<T, KeywordCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeywordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeywordAggregateArgs>(args: Subset<T, KeywordAggregateArgs>): PrismaPromise<GetKeywordAggregateType<T>>

    /**
     * Group by Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeywordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeywordGroupByArgs['orderBy'] }
        : { orderBy?: KeywordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeywordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Keyword.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KeywordClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fictions<T extends KeywordsOnFictionsFindManyArgs = {}>(args?: Subset<T, KeywordsOnFictionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KeywordsOnFictions>>, PrismaPromise<Array<KeywordsOnFictionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Keyword base type for findUnique actions
   */
  export type KeywordFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter, which Keyword to fetch.
     * 
    **/
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword: findUnique
   */
  export interface KeywordFindUniqueArgs extends KeywordFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Keyword base type for findFirst actions
   */
  export type KeywordFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter, which Keyword to fetch.
     * 
    **/
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keywords.
     * 
    **/
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keywords.
     * 
    **/
    distinct?: Enumerable<KeywordScalarFieldEnum>
  }

  /**
   * Keyword: findFirst
   */
  export interface KeywordFindFirstArgs extends KeywordFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Keyword findMany
   */
  export type KeywordFindManyArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter, which Keywords to fetch.
     * 
    **/
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keywords.
     * 
    **/
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KeywordScalarFieldEnum>
  }


  /**
   * Keyword create
   */
  export type KeywordCreateArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * The data needed to create a Keyword.
     * 
    **/
    data: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
  }


  /**
   * Keyword createMany
   */
  export type KeywordCreateManyArgs = {
    /**
     * The data used to create many Keywords.
     * 
    **/
    data: Enumerable<KeywordCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Keyword update
   */
  export type KeywordUpdateArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * The data needed to update a Keyword.
     * 
    **/
    data: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
    /**
     * Choose, which Keyword to update.
     * 
    **/
    where: KeywordWhereUniqueInput
  }


  /**
   * Keyword updateMany
   */
  export type KeywordUpdateManyArgs = {
    /**
     * The data used to update Keywords.
     * 
    **/
    data: XOR<KeywordUpdateManyMutationInput, KeywordUncheckedUpdateManyInput>
    /**
     * Filter which Keywords to update
     * 
    **/
    where?: KeywordWhereInput
  }


  /**
   * Keyword upsert
   */
  export type KeywordUpsertArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * The filter to search for the Keyword to update in case it exists.
     * 
    **/
    where: KeywordWhereUniqueInput
    /**
     * In case the Keyword found by the `where` argument doesn't exist, create a new Keyword with this data.
     * 
    **/
    create: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
    /**
     * In case the Keyword was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
  }


  /**
   * Keyword delete
   */
  export type KeywordDeleteArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter which Keyword to delete.
     * 
    **/
    where: KeywordWhereUniqueInput
  }


  /**
   * Keyword deleteMany
   */
  export type KeywordDeleteManyArgs = {
    /**
     * Filter which Keywords to delete
     * 
    **/
    where?: KeywordWhereInput
  }


  /**
   * Keyword: findUniqueOrThrow
   */
  export type KeywordFindUniqueOrThrowArgs = KeywordFindUniqueArgsBase
      

  /**
   * Keyword: findFirstOrThrow
   */
  export type KeywordFindFirstOrThrowArgs = KeywordFindFirstArgsBase
      

  /**
   * Keyword without action
   */
  export type KeywordArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
  }



  /**
   * Model KeywordsOnFictions
   */


  export type AggregateKeywordsOnFictions = {
    _count: KeywordsOnFictionsCountAggregateOutputType | null
    _avg: KeywordsOnFictionsAvgAggregateOutputType | null
    _sum: KeywordsOnFictionsSumAggregateOutputType | null
    _min: KeywordsOnFictionsMinAggregateOutputType | null
    _max: KeywordsOnFictionsMaxAggregateOutputType | null
  }

  export type KeywordsOnFictionsAvgAggregateOutputType = {
    fictionId: number | null
    keywordId: number | null
  }

  export type KeywordsOnFictionsSumAggregateOutputType = {
    fictionId: number | null
    keywordId: number | null
  }

  export type KeywordsOnFictionsMinAggregateOutputType = {
    fictionId: number | null
    keywordId: number | null
  }

  export type KeywordsOnFictionsMaxAggregateOutputType = {
    fictionId: number | null
    keywordId: number | null
  }

  export type KeywordsOnFictionsCountAggregateOutputType = {
    fictionId: number
    keywordId: number
    _all: number
  }


  export type KeywordsOnFictionsAvgAggregateInputType = {
    fictionId?: true
    keywordId?: true
  }

  export type KeywordsOnFictionsSumAggregateInputType = {
    fictionId?: true
    keywordId?: true
  }

  export type KeywordsOnFictionsMinAggregateInputType = {
    fictionId?: true
    keywordId?: true
  }

  export type KeywordsOnFictionsMaxAggregateInputType = {
    fictionId?: true
    keywordId?: true
  }

  export type KeywordsOnFictionsCountAggregateInputType = {
    fictionId?: true
    keywordId?: true
    _all?: true
  }

  export type KeywordsOnFictionsAggregateArgs = {
    /**
     * Filter which KeywordsOnFictions to aggregate.
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordsOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordsOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: KeywordsOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordsOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordsOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KeywordsOnFictions
    **/
    _count?: true | KeywordsOnFictionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeywordsOnFictionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeywordsOnFictionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeywordsOnFictionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeywordsOnFictionsMaxAggregateInputType
  }

  export type GetKeywordsOnFictionsAggregateType<T extends KeywordsOnFictionsAggregateArgs> = {
        [P in keyof T & keyof AggregateKeywordsOnFictions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeywordsOnFictions[P]>
      : GetScalarType<T[P], AggregateKeywordsOnFictions[P]>
  }




  export type KeywordsOnFictionsGroupByArgs = {
    where?: KeywordsOnFictionsWhereInput
    orderBy?: Enumerable<KeywordsOnFictionsOrderByWithAggregationInput>
    by: Array<KeywordsOnFictionsScalarFieldEnum>
    having?: KeywordsOnFictionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeywordsOnFictionsCountAggregateInputType | true
    _avg?: KeywordsOnFictionsAvgAggregateInputType
    _sum?: KeywordsOnFictionsSumAggregateInputType
    _min?: KeywordsOnFictionsMinAggregateInputType
    _max?: KeywordsOnFictionsMaxAggregateInputType
  }


  export type KeywordsOnFictionsGroupByOutputType = {
    fictionId: number
    keywordId: number
    _count: KeywordsOnFictionsCountAggregateOutputType | null
    _avg: KeywordsOnFictionsAvgAggregateOutputType | null
    _sum: KeywordsOnFictionsSumAggregateOutputType | null
    _min: KeywordsOnFictionsMinAggregateOutputType | null
    _max: KeywordsOnFictionsMaxAggregateOutputType | null
  }

  type GetKeywordsOnFictionsGroupByPayload<T extends KeywordsOnFictionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<KeywordsOnFictionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeywordsOnFictionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeywordsOnFictionsGroupByOutputType[P]>
            : GetScalarType<T[P], KeywordsOnFictionsGroupByOutputType[P]>
        }
      >
    >


  export type KeywordsOnFictionsSelect = {
    fiction?: boolean | FictionArgs
    fictionId?: boolean
    keyword?: boolean | KeywordArgs
    keywordId?: boolean
  }

  export type KeywordsOnFictionsInclude = {
    fiction?: boolean | FictionArgs
    keyword?: boolean | KeywordArgs
  }

  export type KeywordsOnFictionsGetPayload<
    S extends boolean | null | undefined | KeywordsOnFictionsArgs,
    U = keyof S
      > = S extends true
        ? KeywordsOnFictions
    : S extends undefined
    ? never
    : S extends KeywordsOnFictionsArgs | KeywordsOnFictionsFindManyArgs
    ?'include' extends U
    ? KeywordsOnFictions  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fiction' ? FictionGetPayload<S['include'][P]> | null :
        P extends 'keyword' ? KeywordGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fiction' ? FictionGetPayload<S['select'][P]> | null :
        P extends 'keyword' ? KeywordGetPayload<S['select'][P]> | null :  P extends keyof KeywordsOnFictions ? KeywordsOnFictions[P] : never
  } 
    : KeywordsOnFictions
  : KeywordsOnFictions


  type KeywordsOnFictionsCountArgs = Merge<
    Omit<KeywordsOnFictionsFindManyArgs, 'select' | 'include'> & {
      select?: KeywordsOnFictionsCountAggregateInputType | true
    }
  >

  export interface KeywordsOnFictionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one KeywordsOnFictions that matches the filter.
     * @param {KeywordsOnFictionsFindUniqueArgs} args - Arguments to find a KeywordsOnFictions
     * @example
     * // Get one KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KeywordsOnFictionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KeywordsOnFictionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'KeywordsOnFictions'> extends True ? CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>> : CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions | null >, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T> | null >>

    /**
     * Find the first KeywordsOnFictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsFindFirstArgs} args - Arguments to find a KeywordsOnFictions
     * @example
     * // Get one KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KeywordsOnFictionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KeywordsOnFictionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'KeywordsOnFictions'> extends True ? CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>> : CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions | null >, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T> | null >>

    /**
     * Find zero or more KeywordsOnFictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findMany()
     * 
     * // Get first 10 KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findMany({ take: 10 })
     * 
     * // Only select the `fictionId`
     * const keywordsOnFictionsWithFictionIdOnly = await prisma.keywordsOnFictions.findMany({ select: { fictionId: true } })
     * 
    **/
    findMany<T extends KeywordsOnFictionsFindManyArgs>(
      args?: SelectSubset<T, KeywordsOnFictionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<KeywordsOnFictions>>, PrismaPromise<Array<KeywordsOnFictionsGetPayload<T>>>>

    /**
     * Create a KeywordsOnFictions.
     * @param {KeywordsOnFictionsCreateArgs} args - Arguments to create a KeywordsOnFictions.
     * @example
     * // Create one KeywordsOnFictions
     * const KeywordsOnFictions = await prisma.keywordsOnFictions.create({
     *   data: {
     *     // ... data to create a KeywordsOnFictions
     *   }
     * })
     * 
    **/
    create<T extends KeywordsOnFictionsCreateArgs>(
      args: SelectSubset<T, KeywordsOnFictionsCreateArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Create many KeywordsOnFictions.
     *     @param {KeywordsOnFictionsCreateManyArgs} args - Arguments to create many KeywordsOnFictions.
     *     @example
     *     // Create many KeywordsOnFictions
     *     const keywordsOnFictions = await prisma.keywordsOnFictions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KeywordsOnFictionsCreateManyArgs>(
      args?: SelectSubset<T, KeywordsOnFictionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a KeywordsOnFictions.
     * @param {KeywordsOnFictionsDeleteArgs} args - Arguments to delete one KeywordsOnFictions.
     * @example
     * // Delete one KeywordsOnFictions
     * const KeywordsOnFictions = await prisma.keywordsOnFictions.delete({
     *   where: {
     *     // ... filter to delete one KeywordsOnFictions
     *   }
     * })
     * 
    **/
    delete<T extends KeywordsOnFictionsDeleteArgs>(
      args: SelectSubset<T, KeywordsOnFictionsDeleteArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Update one KeywordsOnFictions.
     * @param {KeywordsOnFictionsUpdateArgs} args - Arguments to update one KeywordsOnFictions.
     * @example
     * // Update one KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KeywordsOnFictionsUpdateArgs>(
      args: SelectSubset<T, KeywordsOnFictionsUpdateArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Delete zero or more KeywordsOnFictions.
     * @param {KeywordsOnFictionsDeleteManyArgs} args - Arguments to filter KeywordsOnFictions to delete.
     * @example
     * // Delete a few KeywordsOnFictions
     * const { count } = await prisma.keywordsOnFictions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KeywordsOnFictionsDeleteManyArgs>(
      args?: SelectSubset<T, KeywordsOnFictionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeywordsOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KeywordsOnFictionsUpdateManyArgs>(
      args: SelectSubset<T, KeywordsOnFictionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one KeywordsOnFictions.
     * @param {KeywordsOnFictionsUpsertArgs} args - Arguments to update or create a KeywordsOnFictions.
     * @example
     * // Update or create a KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.upsert({
     *   create: {
     *     // ... data to create a KeywordsOnFictions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KeywordsOnFictions we want to update
     *   }
     * })
    **/
    upsert<T extends KeywordsOnFictionsUpsertArgs>(
      args: SelectSubset<T, KeywordsOnFictionsUpsertArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Find one KeywordsOnFictions that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {KeywordsOnFictionsFindUniqueOrThrowArgs} args - Arguments to find a KeywordsOnFictions
     * @example
     * // Get one KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KeywordsOnFictionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, KeywordsOnFictionsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Find the first KeywordsOnFictions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsFindFirstOrThrowArgs} args - Arguments to find a KeywordsOnFictions
     * @example
     * // Get one KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KeywordsOnFictionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, KeywordsOnFictionsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Count the number of KeywordsOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsCountArgs} args - Arguments to filter KeywordsOnFictions to count.
     * @example
     * // Count the number of KeywordsOnFictions
     * const count = await prisma.keywordsOnFictions.count({
     *   where: {
     *     // ... the filter for the KeywordsOnFictions we want to count
     *   }
     * })
    **/
    count<T extends KeywordsOnFictionsCountArgs>(
      args?: Subset<T, KeywordsOnFictionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeywordsOnFictionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KeywordsOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeywordsOnFictionsAggregateArgs>(args: Subset<T, KeywordsOnFictionsAggregateArgs>): PrismaPromise<GetKeywordsOnFictionsAggregateType<T>>

    /**
     * Group by KeywordsOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeywordsOnFictionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeywordsOnFictionsGroupByArgs['orderBy'] }
        : { orderBy?: KeywordsOnFictionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeywordsOnFictionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordsOnFictionsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for KeywordsOnFictions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KeywordsOnFictionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fiction<T extends FictionArgs = {}>(args?: Subset<T, FictionArgs>): CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>;

    keyword<T extends KeywordArgs = {}>(args?: Subset<T, KeywordArgs>): CheckSelect<T, Prisma__KeywordClient<Keyword | null >, Prisma__KeywordClient<KeywordGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * KeywordsOnFictions base type for findUnique actions
   */
  export type KeywordsOnFictionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * Filter, which KeywordsOnFictions to fetch.
     * 
    **/
    where: KeywordsOnFictionsWhereUniqueInput
  }

  /**
   * KeywordsOnFictions: findUnique
   */
  export interface KeywordsOnFictionsFindUniqueArgs extends KeywordsOnFictionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * KeywordsOnFictions base type for findFirst actions
   */
  export type KeywordsOnFictionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * Filter, which KeywordsOnFictions to fetch.
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordsOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordsOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeywordsOnFictions.
     * 
    **/
    cursor?: KeywordsOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordsOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordsOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeywordsOnFictions.
     * 
    **/
    distinct?: Enumerable<KeywordsOnFictionsScalarFieldEnum>
  }

  /**
   * KeywordsOnFictions: findFirst
   */
  export interface KeywordsOnFictionsFindFirstArgs extends KeywordsOnFictionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * KeywordsOnFictions findMany
   */
  export type KeywordsOnFictionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * Filter, which KeywordsOnFictions to fetch.
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordsOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordsOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KeywordsOnFictions.
     * 
    **/
    cursor?: KeywordsOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordsOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordsOnFictions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KeywordsOnFictionsScalarFieldEnum>
  }


  /**
   * KeywordsOnFictions create
   */
  export type KeywordsOnFictionsCreateArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * The data needed to create a KeywordsOnFictions.
     * 
    **/
    data: XOR<KeywordsOnFictionsCreateInput, KeywordsOnFictionsUncheckedCreateInput>
  }


  /**
   * KeywordsOnFictions createMany
   */
  export type KeywordsOnFictionsCreateManyArgs = {
    /**
     * The data used to create many KeywordsOnFictions.
     * 
    **/
    data: Enumerable<KeywordsOnFictionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * KeywordsOnFictions update
   */
  export type KeywordsOnFictionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * The data needed to update a KeywordsOnFictions.
     * 
    **/
    data: XOR<KeywordsOnFictionsUpdateInput, KeywordsOnFictionsUncheckedUpdateInput>
    /**
     * Choose, which KeywordsOnFictions to update.
     * 
    **/
    where: KeywordsOnFictionsWhereUniqueInput
  }


  /**
   * KeywordsOnFictions updateMany
   */
  export type KeywordsOnFictionsUpdateManyArgs = {
    /**
     * The data used to update KeywordsOnFictions.
     * 
    **/
    data: XOR<KeywordsOnFictionsUpdateManyMutationInput, KeywordsOnFictionsUncheckedUpdateManyInput>
    /**
     * Filter which KeywordsOnFictions to update
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
  }


  /**
   * KeywordsOnFictions upsert
   */
  export type KeywordsOnFictionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * The filter to search for the KeywordsOnFictions to update in case it exists.
     * 
    **/
    where: KeywordsOnFictionsWhereUniqueInput
    /**
     * In case the KeywordsOnFictions found by the `where` argument doesn't exist, create a new KeywordsOnFictions with this data.
     * 
    **/
    create: XOR<KeywordsOnFictionsCreateInput, KeywordsOnFictionsUncheckedCreateInput>
    /**
     * In case the KeywordsOnFictions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<KeywordsOnFictionsUpdateInput, KeywordsOnFictionsUncheckedUpdateInput>
  }


  /**
   * KeywordsOnFictions delete
   */
  export type KeywordsOnFictionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * Filter which KeywordsOnFictions to delete.
     * 
    **/
    where: KeywordsOnFictionsWhereUniqueInput
  }


  /**
   * KeywordsOnFictions deleteMany
   */
  export type KeywordsOnFictionsDeleteManyArgs = {
    /**
     * Filter which KeywordsOnFictions to delete
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
  }


  /**
   * KeywordsOnFictions: findUniqueOrThrow
   */
  export type KeywordsOnFictionsFindUniqueOrThrowArgs = KeywordsOnFictionsFindUniqueArgsBase
      

  /**
   * KeywordsOnFictions: findFirstOrThrow
   */
  export type KeywordsOnFictionsFindFirstOrThrowArgs = KeywordsOnFictionsFindFirstArgsBase
      

  /**
   * KeywordsOnFictions without action
   */
  export type KeywordsOnFictionsArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
  }



  /**
   * Model CategoriesOnFictions
   */


  export type AggregateCategoriesOnFictions = {
    _count: CategoriesOnFictionsCountAggregateOutputType | null
    _avg: CategoriesOnFictionsAvgAggregateOutputType | null
    _sum: CategoriesOnFictionsSumAggregateOutputType | null
    _min: CategoriesOnFictionsMinAggregateOutputType | null
    _max: CategoriesOnFictionsMaxAggregateOutputType | null
  }

  export type CategoriesOnFictionsAvgAggregateOutputType = {
    fictionId: number | null
    categoryId: number | null
  }

  export type CategoriesOnFictionsSumAggregateOutputType = {
    fictionId: number | null
    categoryId: number | null
  }

  export type CategoriesOnFictionsMinAggregateOutputType = {
    fictionId: number | null
    categoryId: number | null
  }

  export type CategoriesOnFictionsMaxAggregateOutputType = {
    fictionId: number | null
    categoryId: number | null
  }

  export type CategoriesOnFictionsCountAggregateOutputType = {
    fictionId: number
    categoryId: number
    _all: number
  }


  export type CategoriesOnFictionsAvgAggregateInputType = {
    fictionId?: true
    categoryId?: true
  }

  export type CategoriesOnFictionsSumAggregateInputType = {
    fictionId?: true
    categoryId?: true
  }

  export type CategoriesOnFictionsMinAggregateInputType = {
    fictionId?: true
    categoryId?: true
  }

  export type CategoriesOnFictionsMaxAggregateInputType = {
    fictionId?: true
    categoryId?: true
  }

  export type CategoriesOnFictionsCountAggregateInputType = {
    fictionId?: true
    categoryId?: true
    _all?: true
  }

  export type CategoriesOnFictionsAggregateArgs = {
    /**
     * Filter which CategoriesOnFictions to aggregate.
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoriesOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoriesOnFictions
    **/
    _count?: true | CategoriesOnFictionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesOnFictionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesOnFictionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesOnFictionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesOnFictionsMaxAggregateInputType
  }

  export type GetCategoriesOnFictionsAggregateType<T extends CategoriesOnFictionsAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriesOnFictions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriesOnFictions[P]>
      : GetScalarType<T[P], AggregateCategoriesOnFictions[P]>
  }




  export type CategoriesOnFictionsGroupByArgs = {
    where?: CategoriesOnFictionsWhereInput
    orderBy?: Enumerable<CategoriesOnFictionsOrderByWithAggregationInput>
    by: Array<CategoriesOnFictionsScalarFieldEnum>
    having?: CategoriesOnFictionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesOnFictionsCountAggregateInputType | true
    _avg?: CategoriesOnFictionsAvgAggregateInputType
    _sum?: CategoriesOnFictionsSumAggregateInputType
    _min?: CategoriesOnFictionsMinAggregateInputType
    _max?: CategoriesOnFictionsMaxAggregateInputType
  }


  export type CategoriesOnFictionsGroupByOutputType = {
    fictionId: number
    categoryId: number
    _count: CategoriesOnFictionsCountAggregateOutputType | null
    _avg: CategoriesOnFictionsAvgAggregateOutputType | null
    _sum: CategoriesOnFictionsSumAggregateOutputType | null
    _min: CategoriesOnFictionsMinAggregateOutputType | null
    _max: CategoriesOnFictionsMaxAggregateOutputType | null
  }

  type GetCategoriesOnFictionsGroupByPayload<T extends CategoriesOnFictionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoriesOnFictionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesOnFictionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesOnFictionsGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesOnFictionsGroupByOutputType[P]>
        }
      >
    >


  export type CategoriesOnFictionsSelect = {
    fiction?: boolean | FictionArgs
    fictionId?: boolean
    category?: boolean | CategoryArgs
    categoryId?: boolean
  }

  export type CategoriesOnFictionsInclude = {
    fiction?: boolean | FictionArgs
    category?: boolean | CategoryArgs
  }

  export type CategoriesOnFictionsGetPayload<
    S extends boolean | null | undefined | CategoriesOnFictionsArgs,
    U = keyof S
      > = S extends true
        ? CategoriesOnFictions
    : S extends undefined
    ? never
    : S extends CategoriesOnFictionsArgs | CategoriesOnFictionsFindManyArgs
    ?'include' extends U
    ? CategoriesOnFictions  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fiction' ? FictionGetPayload<S['include'][P]> :
        P extends 'category' ? CategoryGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fiction' ? FictionGetPayload<S['select'][P]> :
        P extends 'category' ? CategoryGetPayload<S['select'][P]> :  P extends keyof CategoriesOnFictions ? CategoriesOnFictions[P] : never
  } 
    : CategoriesOnFictions
  : CategoriesOnFictions


  type CategoriesOnFictionsCountArgs = Merge<
    Omit<CategoriesOnFictionsFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesOnFictionsCountAggregateInputType | true
    }
  >

  export interface CategoriesOnFictionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CategoriesOnFictions that matches the filter.
     * @param {CategoriesOnFictionsFindUniqueArgs} args - Arguments to find a CategoriesOnFictions
     * @example
     * // Get one CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriesOnFictionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoriesOnFictionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CategoriesOnFictions'> extends True ? CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions | null >, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T> | null >>

    /**
     * Find the first CategoriesOnFictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsFindFirstArgs} args - Arguments to find a CategoriesOnFictions
     * @example
     * // Get one CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriesOnFictionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoriesOnFictionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CategoriesOnFictions'> extends True ? CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions | null >, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T> | null >>

    /**
     * Find zero or more CategoriesOnFictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findMany()
     * 
     * // Get first 10 CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findMany({ take: 10 })
     * 
     * // Only select the `fictionId`
     * const categoriesOnFictionsWithFictionIdOnly = await prisma.categoriesOnFictions.findMany({ select: { fictionId: true } })
     * 
    **/
    findMany<T extends CategoriesOnFictionsFindManyArgs>(
      args?: SelectSubset<T, CategoriesOnFictionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CategoriesOnFictions>>, PrismaPromise<Array<CategoriesOnFictionsGetPayload<T>>>>

    /**
     * Create a CategoriesOnFictions.
     * @param {CategoriesOnFictionsCreateArgs} args - Arguments to create a CategoriesOnFictions.
     * @example
     * // Create one CategoriesOnFictions
     * const CategoriesOnFictions = await prisma.categoriesOnFictions.create({
     *   data: {
     *     // ... data to create a CategoriesOnFictions
     *   }
     * })
     * 
    **/
    create<T extends CategoriesOnFictionsCreateArgs>(
      args: SelectSubset<T, CategoriesOnFictionsCreateArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Create many CategoriesOnFictions.
     *     @param {CategoriesOnFictionsCreateManyArgs} args - Arguments to create many CategoriesOnFictions.
     *     @example
     *     // Create many CategoriesOnFictions
     *     const categoriesOnFictions = await prisma.categoriesOnFictions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriesOnFictionsCreateManyArgs>(
      args?: SelectSubset<T, CategoriesOnFictionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CategoriesOnFictions.
     * @param {CategoriesOnFictionsDeleteArgs} args - Arguments to delete one CategoriesOnFictions.
     * @example
     * // Delete one CategoriesOnFictions
     * const CategoriesOnFictions = await prisma.categoriesOnFictions.delete({
     *   where: {
     *     // ... filter to delete one CategoriesOnFictions
     *   }
     * })
     * 
    **/
    delete<T extends CategoriesOnFictionsDeleteArgs>(
      args: SelectSubset<T, CategoriesOnFictionsDeleteArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Update one CategoriesOnFictions.
     * @param {CategoriesOnFictionsUpdateArgs} args - Arguments to update one CategoriesOnFictions.
     * @example
     * // Update one CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriesOnFictionsUpdateArgs>(
      args: SelectSubset<T, CategoriesOnFictionsUpdateArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Delete zero or more CategoriesOnFictions.
     * @param {CategoriesOnFictionsDeleteManyArgs} args - Arguments to filter CategoriesOnFictions to delete.
     * @example
     * // Delete a few CategoriesOnFictions
     * const { count } = await prisma.categoriesOnFictions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriesOnFictionsDeleteManyArgs>(
      args?: SelectSubset<T, CategoriesOnFictionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriesOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriesOnFictionsUpdateManyArgs>(
      args: SelectSubset<T, CategoriesOnFictionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriesOnFictions.
     * @param {CategoriesOnFictionsUpsertArgs} args - Arguments to update or create a CategoriesOnFictions.
     * @example
     * // Update or create a CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.upsert({
     *   create: {
     *     // ... data to create a CategoriesOnFictions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriesOnFictions we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriesOnFictionsUpsertArgs>(
      args: SelectSubset<T, CategoriesOnFictionsUpsertArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Find one CategoriesOnFictions that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoriesOnFictionsFindUniqueOrThrowArgs} args - Arguments to find a CategoriesOnFictions
     * @example
     * // Get one CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriesOnFictionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoriesOnFictionsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Find the first CategoriesOnFictions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsFindFirstOrThrowArgs} args - Arguments to find a CategoriesOnFictions
     * @example
     * // Get one CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriesOnFictionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoriesOnFictionsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Count the number of CategoriesOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsCountArgs} args - Arguments to filter CategoriesOnFictions to count.
     * @example
     * // Count the number of CategoriesOnFictions
     * const count = await prisma.categoriesOnFictions.count({
     *   where: {
     *     // ... the filter for the CategoriesOnFictions we want to count
     *   }
     * })
    **/
    count<T extends CategoriesOnFictionsCountArgs>(
      args?: Subset<T, CategoriesOnFictionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesOnFictionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriesOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesOnFictionsAggregateArgs>(args: Subset<T, CategoriesOnFictionsAggregateArgs>): PrismaPromise<GetCategoriesOnFictionsAggregateType<T>>

    /**
     * Group by CategoriesOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesOnFictionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesOnFictionsGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesOnFictionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesOnFictionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesOnFictionsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoriesOnFictions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoriesOnFictionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fiction<T extends FictionArgs = {}>(args?: Subset<T, FictionArgs>): CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>;

    category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CategoriesOnFictions base type for findUnique actions
   */
  export type CategoriesOnFictionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * Filter, which CategoriesOnFictions to fetch.
     * 
    **/
    where: CategoriesOnFictionsWhereUniqueInput
  }

  /**
   * CategoriesOnFictions: findUnique
   */
  export interface CategoriesOnFictionsFindUniqueArgs extends CategoriesOnFictionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategoriesOnFictions base type for findFirst actions
   */
  export type CategoriesOnFictionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * Filter, which CategoriesOnFictions to fetch.
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriesOnFictions.
     * 
    **/
    cursor?: CategoriesOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriesOnFictions.
     * 
    **/
    distinct?: Enumerable<CategoriesOnFictionsScalarFieldEnum>
  }

  /**
   * CategoriesOnFictions: findFirst
   */
  export interface CategoriesOnFictionsFindFirstArgs extends CategoriesOnFictionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategoriesOnFictions findMany
   */
  export type CategoriesOnFictionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * Filter, which CategoriesOnFictions to fetch.
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoriesOnFictions.
     * 
    **/
    cursor?: CategoriesOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnFictions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoriesOnFictionsScalarFieldEnum>
  }


  /**
   * CategoriesOnFictions create
   */
  export type CategoriesOnFictionsCreateArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * The data needed to create a CategoriesOnFictions.
     * 
    **/
    data: XOR<CategoriesOnFictionsCreateInput, CategoriesOnFictionsUncheckedCreateInput>
  }


  /**
   * CategoriesOnFictions createMany
   */
  export type CategoriesOnFictionsCreateManyArgs = {
    /**
     * The data used to create many CategoriesOnFictions.
     * 
    **/
    data: Enumerable<CategoriesOnFictionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CategoriesOnFictions update
   */
  export type CategoriesOnFictionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * The data needed to update a CategoriesOnFictions.
     * 
    **/
    data: XOR<CategoriesOnFictionsUpdateInput, CategoriesOnFictionsUncheckedUpdateInput>
    /**
     * Choose, which CategoriesOnFictions to update.
     * 
    **/
    where: CategoriesOnFictionsWhereUniqueInput
  }


  /**
   * CategoriesOnFictions updateMany
   */
  export type CategoriesOnFictionsUpdateManyArgs = {
    /**
     * The data used to update CategoriesOnFictions.
     * 
    **/
    data: XOR<CategoriesOnFictionsUpdateManyMutationInput, CategoriesOnFictionsUncheckedUpdateManyInput>
    /**
     * Filter which CategoriesOnFictions to update
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
  }


  /**
   * CategoriesOnFictions upsert
   */
  export type CategoriesOnFictionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * The filter to search for the CategoriesOnFictions to update in case it exists.
     * 
    **/
    where: CategoriesOnFictionsWhereUniqueInput
    /**
     * In case the CategoriesOnFictions found by the `where` argument doesn't exist, create a new CategoriesOnFictions with this data.
     * 
    **/
    create: XOR<CategoriesOnFictionsCreateInput, CategoriesOnFictionsUncheckedCreateInput>
    /**
     * In case the CategoriesOnFictions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoriesOnFictionsUpdateInput, CategoriesOnFictionsUncheckedUpdateInput>
  }


  /**
   * CategoriesOnFictions delete
   */
  export type CategoriesOnFictionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * Filter which CategoriesOnFictions to delete.
     * 
    **/
    where: CategoriesOnFictionsWhereUniqueInput
  }


  /**
   * CategoriesOnFictions deleteMany
   */
  export type CategoriesOnFictionsDeleteManyArgs = {
    /**
     * Filter which CategoriesOnFictions to delete
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
  }


  /**
   * CategoriesOnFictions: findUniqueOrThrow
   */
  export type CategoriesOnFictionsFindUniqueOrThrowArgs = CategoriesOnFictionsFindUniqueArgsBase
      

  /**
   * CategoriesOnFictions: findFirstOrThrow
   */
  export type CategoriesOnFictionsFindFirstOrThrowArgs = CategoriesOnFictionsFindFirstArgsBase
      

  /**
   * CategoriesOnFictions without action
   */
  export type CategoriesOnFictionsArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    phone: string | null
    email: string | null
    name: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    emailVerified: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    phone: string | null
    email: string | null
    name: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    emailVerified: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    phone: number
    email: number
    name: number
    avatar: number
    createdAt: number
    updatedAt: number
    emailVerified: number
    image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    phone?: true
    email?: true
    name?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    emailVerified?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    phone?: true
    email?: true
    name?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    emailVerified?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    phone?: true
    email?: true
    name?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    emailVerified?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    phone: string | null
    email: string | null
    name: string
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    emailVerified: Date | null
    image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    phone?: boolean
    email?: boolean
    name?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tokens?: boolean | TokenFindManyArgs
    fictions?: boolean | FictionFindManyArgs
    fav?: boolean | FavFindManyArgs
    ratedFictions?: boolean | UserFictionStatFindManyArgs
    userRationOnFictions?: boolean | UserRationOnFictionFindManyArgs
    emailVerified?: boolean
    image?: boolean
    accounts?: boolean | AccountFindManyArgs
    sessions?: boolean | SessionFindManyArgs
    comments?: boolean | CommentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    tokens?: boolean | TokenFindManyArgs
    fictions?: boolean | FictionFindManyArgs
    fav?: boolean | FavFindManyArgs
    ratedFictions?: boolean | UserFictionStatFindManyArgs
    userRationOnFictions?: boolean | UserRationOnFictionFindManyArgs
    accounts?: boolean | AccountFindManyArgs
    sessions?: boolean | SessionFindManyArgs
    comments?: boolean | CommentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tokens' ? Array < TokenGetPayload<S['include'][P]>>  :
        P extends 'fictions' ? Array < FictionGetPayload<S['include'][P]>>  :
        P extends 'fav' ? Array < FavGetPayload<S['include'][P]>>  :
        P extends 'ratedFictions' ? Array < UserFictionStatGetPayload<S['include'][P]>>  :
        P extends 'userRationOnFictions' ? Array < UserRationOnFictionGetPayload<S['include'][P]>>  :
        P extends 'accounts' ? Array < AccountGetPayload<S['include'][P]>>  :
        P extends 'sessions' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tokens' ? Array < TokenGetPayload<S['select'][P]>>  :
        P extends 'fictions' ? Array < FictionGetPayload<S['select'][P]>>  :
        P extends 'fav' ? Array < FavGetPayload<S['select'][P]>>  :
        P extends 'ratedFictions' ? Array < UserFictionStatGetPayload<S['select'][P]>>  :
        P extends 'userRationOnFictions' ? Array < UserRationOnFictionGetPayload<S['select'][P]>>  :
        P extends 'accounts' ? Array < AccountGetPayload<S['select'][P]>>  :
        P extends 'sessions' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tokens<T extends TokenFindManyArgs = {}>(args?: Subset<T, TokenFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Token>>, PrismaPromise<Array<TokenGetPayload<T>>>>;

    fictions<T extends FictionFindManyArgs = {}>(args?: Subset<T, FictionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Fiction>>, PrismaPromise<Array<FictionGetPayload<T>>>>;

    fav<T extends FavFindManyArgs = {}>(args?: Subset<T, FavFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Fav>>, PrismaPromise<Array<FavGetPayload<T>>>>;

    ratedFictions<T extends UserFictionStatFindManyArgs = {}>(args?: Subset<T, UserFictionStatFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserFictionStat>>, PrismaPromise<Array<UserFictionStatGetPayload<T>>>>;

    userRationOnFictions<T extends UserRationOnFictionFindManyArgs = {}>(args?: Subset<T, UserRationOnFictionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserRationOnFiction>>, PrismaPromise<Array<UserRationOnFictionGetPayload<T>>>>;

    accounts<T extends AccountFindManyArgs = {}>(args?: Subset<T, AccountFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Account>>, PrismaPromise<Array<AccountGetPayload<T>>>>;

    sessions<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    comments<T extends CommentFindManyArgs = {}>(args?: Subset<T, CommentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserRationOnFiction
   */


  export type AggregateUserRationOnFiction = {
    _count: UserRationOnFictionCountAggregateOutputType | null
    _avg: UserRationOnFictionAvgAggregateOutputType | null
    _sum: UserRationOnFictionSumAggregateOutputType | null
    _min: UserRationOnFictionMinAggregateOutputType | null
    _max: UserRationOnFictionMaxAggregateOutputType | null
  }

  export type UserRationOnFictionAvgAggregateOutputType = {
    id: number | null
    userFictionStatId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
  }

  export type UserRationOnFictionSumAggregateOutputType = {
    id: number | null
    userFictionStatId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
  }

  export type UserRationOnFictionMinAggregateOutputType = {
    id: number | null
    userId: string | null
    userFictionStatId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
    comment: string | null
  }

  export type UserRationOnFictionMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    userFictionStatId: number | null
    originality: number | null
    verisimilitude: number | null
    synopsisComposition: number | null
    character: number | null
    writing: number | null
    value: number | null
    comment: string | null
  }

  export type UserRationOnFictionCountAggregateOutputType = {
    id: number
    userId: number
    userFictionStatId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: number
    _all: number
  }


  export type UserRationOnFictionAvgAggregateInputType = {
    id?: true
    userFictionStatId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
  }

  export type UserRationOnFictionSumAggregateInputType = {
    id?: true
    userFictionStatId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
  }

  export type UserRationOnFictionMinAggregateInputType = {
    id?: true
    userId?: true
    userFictionStatId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
    comment?: true
  }

  export type UserRationOnFictionMaxAggregateInputType = {
    id?: true
    userId?: true
    userFictionStatId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
    comment?: true
  }

  export type UserRationOnFictionCountAggregateInputType = {
    id?: true
    userId?: true
    userFictionStatId?: true
    originality?: true
    verisimilitude?: true
    synopsisComposition?: true
    character?: true
    writing?: true
    value?: true
    comment?: true
    _all?: true
  }

  export type UserRationOnFictionAggregateArgs = {
    /**
     * Filter which UserRationOnFiction to aggregate.
     * 
    **/
    where?: UserRationOnFictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRationOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<UserRationOnFictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserRationOnFictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRationOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRationOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRationOnFictions
    **/
    _count?: true | UserRationOnFictionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRationOnFictionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRationOnFictionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRationOnFictionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRationOnFictionMaxAggregateInputType
  }

  export type GetUserRationOnFictionAggregateType<T extends UserRationOnFictionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRationOnFiction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRationOnFiction[P]>
      : GetScalarType<T[P], AggregateUserRationOnFiction[P]>
  }




  export type UserRationOnFictionGroupByArgs = {
    where?: UserRationOnFictionWhereInput
    orderBy?: Enumerable<UserRationOnFictionOrderByWithAggregationInput>
    by: Array<UserRationOnFictionScalarFieldEnum>
    having?: UserRationOnFictionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRationOnFictionCountAggregateInputType | true
    _avg?: UserRationOnFictionAvgAggregateInputType
    _sum?: UserRationOnFictionSumAggregateInputType
    _min?: UserRationOnFictionMinAggregateInputType
    _max?: UserRationOnFictionMaxAggregateInputType
  }


  export type UserRationOnFictionGroupByOutputType = {
    id: number
    userId: string
    userFictionStatId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
    _count: UserRationOnFictionCountAggregateOutputType | null
    _avg: UserRationOnFictionAvgAggregateOutputType | null
    _sum: UserRationOnFictionSumAggregateOutputType | null
    _min: UserRationOnFictionMinAggregateOutputType | null
    _max: UserRationOnFictionMaxAggregateOutputType | null
  }

  type GetUserRationOnFictionGroupByPayload<T extends UserRationOnFictionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserRationOnFictionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRationOnFictionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRationOnFictionGroupByOutputType[P]>
            : GetScalarType<T[P], UserRationOnFictionGroupByOutputType[P]>
        }
      >
    >


  export type UserRationOnFictionSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    userFictionStat?: boolean | UserFictionStatArgs
    userFictionStatId?: boolean
    originality?: boolean
    verisimilitude?: boolean
    synopsisComposition?: boolean
    character?: boolean
    writing?: boolean
    value?: boolean
    comment?: boolean
  }

  export type UserRationOnFictionInclude = {
    user?: boolean | UserArgs
    userFictionStat?: boolean | UserFictionStatArgs
  }

  export type UserRationOnFictionGetPayload<
    S extends boolean | null | undefined | UserRationOnFictionArgs,
    U = keyof S
      > = S extends true
        ? UserRationOnFiction
    : S extends undefined
    ? never
    : S extends UserRationOnFictionArgs | UserRationOnFictionFindManyArgs
    ?'include' extends U
    ? UserRationOnFiction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'userFictionStat' ? UserFictionStatGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'userFictionStat' ? UserFictionStatGetPayload<S['select'][P]> :  P extends keyof UserRationOnFiction ? UserRationOnFiction[P] : never
  } 
    : UserRationOnFiction
  : UserRationOnFiction


  type UserRationOnFictionCountArgs = Merge<
    Omit<UserRationOnFictionFindManyArgs, 'select' | 'include'> & {
      select?: UserRationOnFictionCountAggregateInputType | true
    }
  >

  export interface UserRationOnFictionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserRationOnFiction that matches the filter.
     * @param {UserRationOnFictionFindUniqueArgs} args - Arguments to find a UserRationOnFiction
     * @example
     * // Get one UserRationOnFiction
     * const userRationOnFiction = await prisma.userRationOnFiction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserRationOnFictionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserRationOnFictionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserRationOnFiction'> extends True ? CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction>, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T>>> : CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction | null >, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T> | null >>

    /**
     * Find the first UserRationOnFiction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRationOnFictionFindFirstArgs} args - Arguments to find a UserRationOnFiction
     * @example
     * // Get one UserRationOnFiction
     * const userRationOnFiction = await prisma.userRationOnFiction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserRationOnFictionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserRationOnFictionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserRationOnFiction'> extends True ? CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction>, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T>>> : CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction | null >, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T> | null >>

    /**
     * Find zero or more UserRationOnFictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRationOnFictionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRationOnFictions
     * const userRationOnFictions = await prisma.userRationOnFiction.findMany()
     * 
     * // Get first 10 UserRationOnFictions
     * const userRationOnFictions = await prisma.userRationOnFiction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRationOnFictionWithIdOnly = await prisma.userRationOnFiction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserRationOnFictionFindManyArgs>(
      args?: SelectSubset<T, UserRationOnFictionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserRationOnFiction>>, PrismaPromise<Array<UserRationOnFictionGetPayload<T>>>>

    /**
     * Create a UserRationOnFiction.
     * @param {UserRationOnFictionCreateArgs} args - Arguments to create a UserRationOnFiction.
     * @example
     * // Create one UserRationOnFiction
     * const UserRationOnFiction = await prisma.userRationOnFiction.create({
     *   data: {
     *     // ... data to create a UserRationOnFiction
     *   }
     * })
     * 
    **/
    create<T extends UserRationOnFictionCreateArgs>(
      args: SelectSubset<T, UserRationOnFictionCreateArgs>
    ): CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction>, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T>>>

    /**
     * Create many UserRationOnFictions.
     *     @param {UserRationOnFictionCreateManyArgs} args - Arguments to create many UserRationOnFictions.
     *     @example
     *     // Create many UserRationOnFictions
     *     const userRationOnFiction = await prisma.userRationOnFiction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserRationOnFictionCreateManyArgs>(
      args?: SelectSubset<T, UserRationOnFictionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserRationOnFiction.
     * @param {UserRationOnFictionDeleteArgs} args - Arguments to delete one UserRationOnFiction.
     * @example
     * // Delete one UserRationOnFiction
     * const UserRationOnFiction = await prisma.userRationOnFiction.delete({
     *   where: {
     *     // ... filter to delete one UserRationOnFiction
     *   }
     * })
     * 
    **/
    delete<T extends UserRationOnFictionDeleteArgs>(
      args: SelectSubset<T, UserRationOnFictionDeleteArgs>
    ): CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction>, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T>>>

    /**
     * Update one UserRationOnFiction.
     * @param {UserRationOnFictionUpdateArgs} args - Arguments to update one UserRationOnFiction.
     * @example
     * // Update one UserRationOnFiction
     * const userRationOnFiction = await prisma.userRationOnFiction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserRationOnFictionUpdateArgs>(
      args: SelectSubset<T, UserRationOnFictionUpdateArgs>
    ): CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction>, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T>>>

    /**
     * Delete zero or more UserRationOnFictions.
     * @param {UserRationOnFictionDeleteManyArgs} args - Arguments to filter UserRationOnFictions to delete.
     * @example
     * // Delete a few UserRationOnFictions
     * const { count } = await prisma.userRationOnFiction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserRationOnFictionDeleteManyArgs>(
      args?: SelectSubset<T, UserRationOnFictionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRationOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRationOnFictionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRationOnFictions
     * const userRationOnFiction = await prisma.userRationOnFiction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserRationOnFictionUpdateManyArgs>(
      args: SelectSubset<T, UserRationOnFictionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRationOnFiction.
     * @param {UserRationOnFictionUpsertArgs} args - Arguments to update or create a UserRationOnFiction.
     * @example
     * // Update or create a UserRationOnFiction
     * const userRationOnFiction = await prisma.userRationOnFiction.upsert({
     *   create: {
     *     // ... data to create a UserRationOnFiction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRationOnFiction we want to update
     *   }
     * })
    **/
    upsert<T extends UserRationOnFictionUpsertArgs>(
      args: SelectSubset<T, UserRationOnFictionUpsertArgs>
    ): CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction>, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T>>>

    /**
     * Find one UserRationOnFiction that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserRationOnFictionFindUniqueOrThrowArgs} args - Arguments to find a UserRationOnFiction
     * @example
     * // Get one UserRationOnFiction
     * const userRationOnFiction = await prisma.userRationOnFiction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserRationOnFictionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserRationOnFictionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction>, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T>>>

    /**
     * Find the first UserRationOnFiction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRationOnFictionFindFirstOrThrowArgs} args - Arguments to find a UserRationOnFiction
     * @example
     * // Get one UserRationOnFiction
     * const userRationOnFiction = await prisma.userRationOnFiction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserRationOnFictionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserRationOnFictionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserRationOnFictionClient<UserRationOnFiction>, Prisma__UserRationOnFictionClient<UserRationOnFictionGetPayload<T>>>

    /**
     * Count the number of UserRationOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRationOnFictionCountArgs} args - Arguments to filter UserRationOnFictions to count.
     * @example
     * // Count the number of UserRationOnFictions
     * const count = await prisma.userRationOnFiction.count({
     *   where: {
     *     // ... the filter for the UserRationOnFictions we want to count
     *   }
     * })
    **/
    count<T extends UserRationOnFictionCountArgs>(
      args?: Subset<T, UserRationOnFictionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRationOnFictionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRationOnFiction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRationOnFictionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRationOnFictionAggregateArgs>(args: Subset<T, UserRationOnFictionAggregateArgs>): PrismaPromise<GetUserRationOnFictionAggregateType<T>>

    /**
     * Group by UserRationOnFiction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRationOnFictionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRationOnFictionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRationOnFictionGroupByArgs['orderBy'] }
        : { orderBy?: UserRationOnFictionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRationOnFictionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRationOnFictionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRationOnFiction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserRationOnFictionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    userFictionStat<T extends UserFictionStatArgs = {}>(args?: Subset<T, UserFictionStatArgs>): CheckSelect<T, Prisma__UserFictionStatClient<UserFictionStat | null >, Prisma__UserFictionStatClient<UserFictionStatGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserRationOnFiction base type for findUnique actions
   */
  export type UserRationOnFictionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserRationOnFiction
     * 
    **/
    select?: UserRationOnFictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRationOnFictionInclude | null
    /**
     * Filter, which UserRationOnFiction to fetch.
     * 
    **/
    where: UserRationOnFictionWhereUniqueInput
  }

  /**
   * UserRationOnFiction: findUnique
   */
  export interface UserRationOnFictionFindUniqueArgs extends UserRationOnFictionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserRationOnFiction base type for findFirst actions
   */
  export type UserRationOnFictionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserRationOnFiction
     * 
    **/
    select?: UserRationOnFictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRationOnFictionInclude | null
    /**
     * Filter, which UserRationOnFiction to fetch.
     * 
    **/
    where?: UserRationOnFictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRationOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<UserRationOnFictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRationOnFictions.
     * 
    **/
    cursor?: UserRationOnFictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRationOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRationOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRationOnFictions.
     * 
    **/
    distinct?: Enumerable<UserRationOnFictionScalarFieldEnum>
  }

  /**
   * UserRationOnFiction: findFirst
   */
  export interface UserRationOnFictionFindFirstArgs extends UserRationOnFictionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserRationOnFiction findMany
   */
  export type UserRationOnFictionFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserRationOnFiction
     * 
    **/
    select?: UserRationOnFictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRationOnFictionInclude | null
    /**
     * Filter, which UserRationOnFictions to fetch.
     * 
    **/
    where?: UserRationOnFictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRationOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<UserRationOnFictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRationOnFictions.
     * 
    **/
    cursor?: UserRationOnFictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRationOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRationOnFictions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserRationOnFictionScalarFieldEnum>
  }


  /**
   * UserRationOnFiction create
   */
  export type UserRationOnFictionCreateArgs = {
    /**
     * Select specific fields to fetch from the UserRationOnFiction
     * 
    **/
    select?: UserRationOnFictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRationOnFictionInclude | null
    /**
     * The data needed to create a UserRationOnFiction.
     * 
    **/
    data: XOR<UserRationOnFictionCreateInput, UserRationOnFictionUncheckedCreateInput>
  }


  /**
   * UserRationOnFiction createMany
   */
  export type UserRationOnFictionCreateManyArgs = {
    /**
     * The data used to create many UserRationOnFictions.
     * 
    **/
    data: Enumerable<UserRationOnFictionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserRationOnFiction update
   */
  export type UserRationOnFictionUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserRationOnFiction
     * 
    **/
    select?: UserRationOnFictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRationOnFictionInclude | null
    /**
     * The data needed to update a UserRationOnFiction.
     * 
    **/
    data: XOR<UserRationOnFictionUpdateInput, UserRationOnFictionUncheckedUpdateInput>
    /**
     * Choose, which UserRationOnFiction to update.
     * 
    **/
    where: UserRationOnFictionWhereUniqueInput
  }


  /**
   * UserRationOnFiction updateMany
   */
  export type UserRationOnFictionUpdateManyArgs = {
    /**
     * The data used to update UserRationOnFictions.
     * 
    **/
    data: XOR<UserRationOnFictionUpdateManyMutationInput, UserRationOnFictionUncheckedUpdateManyInput>
    /**
     * Filter which UserRationOnFictions to update
     * 
    **/
    where?: UserRationOnFictionWhereInput
  }


  /**
   * UserRationOnFiction upsert
   */
  export type UserRationOnFictionUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserRationOnFiction
     * 
    **/
    select?: UserRationOnFictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRationOnFictionInclude | null
    /**
     * The filter to search for the UserRationOnFiction to update in case it exists.
     * 
    **/
    where: UserRationOnFictionWhereUniqueInput
    /**
     * In case the UserRationOnFiction found by the `where` argument doesn't exist, create a new UserRationOnFiction with this data.
     * 
    **/
    create: XOR<UserRationOnFictionCreateInput, UserRationOnFictionUncheckedCreateInput>
    /**
     * In case the UserRationOnFiction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserRationOnFictionUpdateInput, UserRationOnFictionUncheckedUpdateInput>
  }


  /**
   * UserRationOnFiction delete
   */
  export type UserRationOnFictionDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserRationOnFiction
     * 
    **/
    select?: UserRationOnFictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRationOnFictionInclude | null
    /**
     * Filter which UserRationOnFiction to delete.
     * 
    **/
    where: UserRationOnFictionWhereUniqueInput
  }


  /**
   * UserRationOnFiction deleteMany
   */
  export type UserRationOnFictionDeleteManyArgs = {
    /**
     * Filter which UserRationOnFictions to delete
     * 
    **/
    where?: UserRationOnFictionWhereInput
  }


  /**
   * UserRationOnFiction: findUniqueOrThrow
   */
  export type UserRationOnFictionFindUniqueOrThrowArgs = UserRationOnFictionFindUniqueArgsBase
      

  /**
   * UserRationOnFiction: findFirstOrThrow
   */
  export type UserRationOnFictionFindFirstOrThrowArgs = UserRationOnFictionFindFirstArgsBase
      

  /**
   * UserRationOnFiction without action
   */
  export type UserRationOnFictionArgs = {
    /**
     * Select specific fields to fetch from the UserRationOnFiction
     * 
    **/
    select?: UserRationOnFictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRationOnFictionInclude | null
  }



  /**
   * Model Token
   */


  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenAvgAggregateOutputType = {
    id: number | null
  }

  export type TokenSumAggregateOutputType = {
    id: number | null
  }

  export type TokenMinAggregateOutputType = {
    id: number | null
    payload: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TokenMaxAggregateOutputType = {
    id: number | null
    payload: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    payload: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TokenAvgAggregateInputType = {
    id?: true
  }

  export type TokenSumAggregateInputType = {
    id?: true
  }

  export type TokenMinAggregateInputType = {
    id?: true
    payload?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    payload?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    payload?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TokenAggregateArgs = {
    /**
     * Filter which Token to aggregate.
     * 
    **/
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs = {
    where?: TokenWhereInput
    orderBy?: Enumerable<TokenOrderByWithAggregationInput>
    by: Array<TokenScalarFieldEnum>
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _avg?: TokenAvgAggregateInputType
    _sum?: TokenSumAggregateInputType
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }


  export type TokenGroupByOutputType = {
    id: number
    payload: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect = {
    id?: boolean
    payload?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TokenInclude = {
    user?: boolean | UserArgs
  }

  export type TokenGetPayload<
    S extends boolean | null | undefined | TokenArgs,
    U = keyof S
      > = S extends true
        ? Token
    : S extends undefined
    ? never
    : S extends TokenArgs | TokenFindManyArgs
    ?'include' extends U
    ? Token  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Token ? Token[P] : never
  } 
    : Token
  : Token


  type TokenCountArgs = Merge<
    Omit<TokenFindManyArgs, 'select' | 'include'> & {
      select?: TokenCountAggregateInputType | true
    }
  >

  export interface TokenDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Token'> extends True ? CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>> : CheckSelect<T, Prisma__TokenClient<Token | null >, Prisma__TokenClient<TokenGetPayload<T> | null >>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Token'> extends True ? CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>> : CheckSelect<T, Prisma__TokenClient<Token | null >, Prisma__TokenClient<TokenGetPayload<T> | null >>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TokenFindManyArgs>(
      args?: SelectSubset<T, TokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Token>>, PrismaPromise<Array<TokenGetPayload<T>>>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
    **/
    create<T extends TokenCreateArgs>(
      args: SelectSubset<T, TokenCreateArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Create many Tokens.
     *     @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     *     @example
     *     // Create many Tokens
     *     const token = await prisma.token.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TokenCreateManyArgs>(
      args?: SelectSubset<T, TokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
    **/
    delete<T extends TokenDeleteArgs>(
      args: SelectSubset<T, TokenDeleteArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TokenUpdateArgs>(
      args: SelectSubset<T, TokenUpdateArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TokenDeleteManyArgs>(
      args?: SelectSubset<T, TokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TokenUpdateManyArgs>(
      args: SelectSubset<T, TokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
    **/
    upsert<T extends TokenUpsertArgs>(
      args: SelectSubset<T, TokenUpsertArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Find one Token that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TokenFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Find the first Token that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TokenFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TokenClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Token base type for findUnique actions
   */
  export type TokenFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Filter, which Token to fetch.
     * 
    **/
    where: TokenWhereUniqueInput
  }

  /**
   * Token: findUnique
   */
  export interface TokenFindUniqueArgs extends TokenFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Token base type for findFirst actions
   */
  export type TokenFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Filter, which Token to fetch.
     * 
    **/
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     * 
    **/
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     * 
    **/
    distinct?: Enumerable<TokenScalarFieldEnum>
  }

  /**
   * Token: findFirst
   */
  export interface TokenFindFirstArgs extends TokenFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Token findMany
   */
  export type TokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Filter, which Tokens to fetch.
     * 
    **/
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     * 
    **/
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TokenScalarFieldEnum>
  }


  /**
   * Token create
   */
  export type TokenCreateArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * The data needed to create a Token.
     * 
    **/
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }


  /**
   * Token createMany
   */
  export type TokenCreateManyArgs = {
    /**
     * The data used to create many Tokens.
     * 
    **/
    data: Enumerable<TokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Token update
   */
  export type TokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * The data needed to update a Token.
     * 
    **/
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     * 
    **/
    where: TokenWhereUniqueInput
  }


  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs = {
    /**
     * The data used to update Tokens.
     * 
    **/
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     * 
    **/
    where?: TokenWhereInput
  }


  /**
   * Token upsert
   */
  export type TokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * The filter to search for the Token to update in case it exists.
     * 
    **/
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     * 
    **/
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }


  /**
   * Token delete
   */
  export type TokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Filter which Token to delete.
     * 
    **/
    where: TokenWhereUniqueInput
  }


  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs = {
    /**
     * Filter which Tokens to delete
     * 
    **/
    where?: TokenWhereInput
  }


  /**
   * Token: findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs = TokenFindUniqueArgsBase
      

  /**
   * Token: findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs = TokenFindFirstArgsBase
      

  /**
   * Token without action
   */
  export type TokenArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
  }



  /**
   * Model Fav
   */


  export type AggregateFav = {
    _count: FavCountAggregateOutputType | null
    _avg: FavAvgAggregateOutputType | null
    _sum: FavSumAggregateOutputType | null
    _min: FavMinAggregateOutputType | null
    _max: FavMaxAggregateOutputType | null
  }

  export type FavAvgAggregateOutputType = {
    id: number | null
    fictionId: number | null
  }

  export type FavSumAggregateOutputType = {
    id: number | null
    fictionId: number | null
  }

  export type FavMinAggregateOutputType = {
    id: number | null
    userId: string | null
    fictionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FavMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    fictionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FavCountAggregateOutputType = {
    id: number
    userId: number
    fictionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FavAvgAggregateInputType = {
    id?: true
    fictionId?: true
  }

  export type FavSumAggregateInputType = {
    id?: true
    fictionId?: true
  }

  export type FavMinAggregateInputType = {
    id?: true
    userId?: true
    fictionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FavMaxAggregateInputType = {
    id?: true
    userId?: true
    fictionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FavCountAggregateInputType = {
    id?: true
    userId?: true
    fictionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FavAggregateArgs = {
    /**
     * Filter which Fav to aggregate.
     * 
    **/
    where?: FavWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favs to fetch.
     * 
    **/
    orderBy?: Enumerable<FavOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FavWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favs
    **/
    _count?: true | FavCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavMaxAggregateInputType
  }

  export type GetFavAggregateType<T extends FavAggregateArgs> = {
        [P in keyof T & keyof AggregateFav]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFav[P]>
      : GetScalarType<T[P], AggregateFav[P]>
  }




  export type FavGroupByArgs = {
    where?: FavWhereInput
    orderBy?: Enumerable<FavOrderByWithAggregationInput>
    by: Array<FavScalarFieldEnum>
    having?: FavScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavCountAggregateInputType | true
    _avg?: FavAvgAggregateInputType
    _sum?: FavSumAggregateInputType
    _min?: FavMinAggregateInputType
    _max?: FavMaxAggregateInputType
  }


  export type FavGroupByOutputType = {
    id: number
    userId: string
    fictionId: number
    createdAt: Date
    updatedAt: Date
    _count: FavCountAggregateOutputType | null
    _avg: FavAvgAggregateOutputType | null
    _sum: FavSumAggregateOutputType | null
    _min: FavMinAggregateOutputType | null
    _max: FavMaxAggregateOutputType | null
  }

  type GetFavGroupByPayload<T extends FavGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FavGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavGroupByOutputType[P]>
            : GetScalarType<T[P], FavGroupByOutputType[P]>
        }
      >
    >


  export type FavSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    fiction?: boolean | FictionArgs
    fictionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FavInclude = {
    user?: boolean | UserArgs
    fiction?: boolean | FictionArgs
  }

  export type FavGetPayload<
    S extends boolean | null | undefined | FavArgs,
    U = keyof S
      > = S extends true
        ? Fav
    : S extends undefined
    ? never
    : S extends FavArgs | FavFindManyArgs
    ?'include' extends U
    ? Fav  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'fiction' ? FictionGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'fiction' ? FictionGetPayload<S['select'][P]> :  P extends keyof Fav ? Fav[P] : never
  } 
    : Fav
  : Fav


  type FavCountArgs = Merge<
    Omit<FavFindManyArgs, 'select' | 'include'> & {
      select?: FavCountAggregateInputType | true
    }
  >

  export interface FavDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Fav that matches the filter.
     * @param {FavFindUniqueArgs} args - Arguments to find a Fav
     * @example
     * // Get one Fav
     * const fav = await prisma.fav.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FavFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Fav'> extends True ? CheckSelect<T, Prisma__FavClient<Fav>, Prisma__FavClient<FavGetPayload<T>>> : CheckSelect<T, Prisma__FavClient<Fav | null >, Prisma__FavClient<FavGetPayload<T> | null >>

    /**
     * Find the first Fav that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavFindFirstArgs} args - Arguments to find a Fav
     * @example
     * // Get one Fav
     * const fav = await prisma.fav.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FavFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Fav'> extends True ? CheckSelect<T, Prisma__FavClient<Fav>, Prisma__FavClient<FavGetPayload<T>>> : CheckSelect<T, Prisma__FavClient<Fav | null >, Prisma__FavClient<FavGetPayload<T> | null >>

    /**
     * Find zero or more Favs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favs
     * const favs = await prisma.fav.findMany()
     * 
     * // Get first 10 Favs
     * const favs = await prisma.fav.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favWithIdOnly = await prisma.fav.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FavFindManyArgs>(
      args?: SelectSubset<T, FavFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Fav>>, PrismaPromise<Array<FavGetPayload<T>>>>

    /**
     * Create a Fav.
     * @param {FavCreateArgs} args - Arguments to create a Fav.
     * @example
     * // Create one Fav
     * const Fav = await prisma.fav.create({
     *   data: {
     *     // ... data to create a Fav
     *   }
     * })
     * 
    **/
    create<T extends FavCreateArgs>(
      args: SelectSubset<T, FavCreateArgs>
    ): CheckSelect<T, Prisma__FavClient<Fav>, Prisma__FavClient<FavGetPayload<T>>>

    /**
     * Create many Favs.
     *     @param {FavCreateManyArgs} args - Arguments to create many Favs.
     *     @example
     *     // Create many Favs
     *     const fav = await prisma.fav.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavCreateManyArgs>(
      args?: SelectSubset<T, FavCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Fav.
     * @param {FavDeleteArgs} args - Arguments to delete one Fav.
     * @example
     * // Delete one Fav
     * const Fav = await prisma.fav.delete({
     *   where: {
     *     // ... filter to delete one Fav
     *   }
     * })
     * 
    **/
    delete<T extends FavDeleteArgs>(
      args: SelectSubset<T, FavDeleteArgs>
    ): CheckSelect<T, Prisma__FavClient<Fav>, Prisma__FavClient<FavGetPayload<T>>>

    /**
     * Update one Fav.
     * @param {FavUpdateArgs} args - Arguments to update one Fav.
     * @example
     * // Update one Fav
     * const fav = await prisma.fav.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavUpdateArgs>(
      args: SelectSubset<T, FavUpdateArgs>
    ): CheckSelect<T, Prisma__FavClient<Fav>, Prisma__FavClient<FavGetPayload<T>>>

    /**
     * Delete zero or more Favs.
     * @param {FavDeleteManyArgs} args - Arguments to filter Favs to delete.
     * @example
     * // Delete a few Favs
     * const { count } = await prisma.fav.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavDeleteManyArgs>(
      args?: SelectSubset<T, FavDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favs
     * const fav = await prisma.fav.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavUpdateManyArgs>(
      args: SelectSubset<T, FavUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Fav.
     * @param {FavUpsertArgs} args - Arguments to update or create a Fav.
     * @example
     * // Update or create a Fav
     * const fav = await prisma.fav.upsert({
     *   create: {
     *     // ... data to create a Fav
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fav we want to update
     *   }
     * })
    **/
    upsert<T extends FavUpsertArgs>(
      args: SelectSubset<T, FavUpsertArgs>
    ): CheckSelect<T, Prisma__FavClient<Fav>, Prisma__FavClient<FavGetPayload<T>>>

    /**
     * Find one Fav that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FavFindUniqueOrThrowArgs} args - Arguments to find a Fav
     * @example
     * // Get one Fav
     * const fav = await prisma.fav.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FavFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__FavClient<Fav>, Prisma__FavClient<FavGetPayload<T>>>

    /**
     * Find the first Fav that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavFindFirstOrThrowArgs} args - Arguments to find a Fav
     * @example
     * // Get one Fav
     * const fav = await prisma.fav.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FavFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__FavClient<Fav>, Prisma__FavClient<FavGetPayload<T>>>

    /**
     * Count the number of Favs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavCountArgs} args - Arguments to filter Favs to count.
     * @example
     * // Count the number of Favs
     * const count = await prisma.fav.count({
     *   where: {
     *     // ... the filter for the Favs we want to count
     *   }
     * })
    **/
    count<T extends FavCountArgs>(
      args?: Subset<T, FavCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fav.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavAggregateArgs>(args: Subset<T, FavAggregateArgs>): PrismaPromise<GetFavAggregateType<T>>

    /**
     * Group by Fav.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavGroupByArgs['orderBy'] }
        : { orderBy?: FavGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fav.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FavClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    fiction<T extends FictionArgs = {}>(args?: Subset<T, FictionArgs>): CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Fav base type for findUnique actions
   */
  export type FavFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Fav
     * 
    **/
    select?: FavSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FavInclude | null
    /**
     * Filter, which Fav to fetch.
     * 
    **/
    where: FavWhereUniqueInput
  }

  /**
   * Fav: findUnique
   */
  export interface FavFindUniqueArgs extends FavFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fav base type for findFirst actions
   */
  export type FavFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Fav
     * 
    **/
    select?: FavSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FavInclude | null
    /**
     * Filter, which Fav to fetch.
     * 
    **/
    where?: FavWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favs to fetch.
     * 
    **/
    orderBy?: Enumerable<FavOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favs.
     * 
    **/
    cursor?: FavWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favs.
     * 
    **/
    distinct?: Enumerable<FavScalarFieldEnum>
  }

  /**
   * Fav: findFirst
   */
  export interface FavFindFirstArgs extends FavFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Fav findMany
   */
  export type FavFindManyArgs = {
    /**
     * Select specific fields to fetch from the Fav
     * 
    **/
    select?: FavSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FavInclude | null
    /**
     * Filter, which Favs to fetch.
     * 
    **/
    where?: FavWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favs to fetch.
     * 
    **/
    orderBy?: Enumerable<FavOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favs.
     * 
    **/
    cursor?: FavWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FavScalarFieldEnum>
  }


  /**
   * Fav create
   */
  export type FavCreateArgs = {
    /**
     * Select specific fields to fetch from the Fav
     * 
    **/
    select?: FavSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FavInclude | null
    /**
     * The data needed to create a Fav.
     * 
    **/
    data: XOR<FavCreateInput, FavUncheckedCreateInput>
  }


  /**
   * Fav createMany
   */
  export type FavCreateManyArgs = {
    /**
     * The data used to create many Favs.
     * 
    **/
    data: Enumerable<FavCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Fav update
   */
  export type FavUpdateArgs = {
    /**
     * Select specific fields to fetch from the Fav
     * 
    **/
    select?: FavSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FavInclude | null
    /**
     * The data needed to update a Fav.
     * 
    **/
    data: XOR<FavUpdateInput, FavUncheckedUpdateInput>
    /**
     * Choose, which Fav to update.
     * 
    **/
    where: FavWhereUniqueInput
  }


  /**
   * Fav updateMany
   */
  export type FavUpdateManyArgs = {
    /**
     * The data used to update Favs.
     * 
    **/
    data: XOR<FavUpdateManyMutationInput, FavUncheckedUpdateManyInput>
    /**
     * Filter which Favs to update
     * 
    **/
    where?: FavWhereInput
  }


  /**
   * Fav upsert
   */
  export type FavUpsertArgs = {
    /**
     * Select specific fields to fetch from the Fav
     * 
    **/
    select?: FavSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FavInclude | null
    /**
     * The filter to search for the Fav to update in case it exists.
     * 
    **/
    where: FavWhereUniqueInput
    /**
     * In case the Fav found by the `where` argument doesn't exist, create a new Fav with this data.
     * 
    **/
    create: XOR<FavCreateInput, FavUncheckedCreateInput>
    /**
     * In case the Fav was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FavUpdateInput, FavUncheckedUpdateInput>
  }


  /**
   * Fav delete
   */
  export type FavDeleteArgs = {
    /**
     * Select specific fields to fetch from the Fav
     * 
    **/
    select?: FavSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FavInclude | null
    /**
     * Filter which Fav to delete.
     * 
    **/
    where: FavWhereUniqueInput
  }


  /**
   * Fav deleteMany
   */
  export type FavDeleteManyArgs = {
    /**
     * Filter which Favs to delete
     * 
    **/
    where?: FavWhereInput
  }


  /**
   * Fav: findUniqueOrThrow
   */
  export type FavFindUniqueOrThrowArgs = FavFindUniqueArgsBase
      

  /**
   * Fav: findFirstOrThrow
   */
  export type FavFindFirstOrThrowArgs = FavFindFirstArgsBase
      

  /**
   * Fav without action
   */
  export type FavArgs = {
    /**
     * Select specific fields to fetch from the Fav
     * 
    **/
    select?: FavSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FavInclude | null
  }



  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which Account to aggregate.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: Array<AccountScalarFieldEnum>
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserArgs
  }

  export type AccountInclude = {
    user?: boolean | UserArgs
  }

  export type AccountGetPayload<
    S extends boolean | null | undefined | AccountArgs,
    U = keyof S
      > = S extends true
        ? Account
    : S extends undefined
    ? never
    : S extends AccountArgs | AccountFindManyArgs
    ?'include' extends U
    ? Account  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Account ? Account[P] : never
  } 
    : Account
  : Account


  type AccountCountArgs = Merge<
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }
  >

  export interface AccountDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>> : CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>> : CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Account>>, PrismaPromise<Array<AccountGetPayload<T>>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Find one Account that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Account base type for findUnique actions
   */
  export type AccountFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where: AccountWhereUniqueInput
  }

  /**
   * Account: findUnique
   */
  export interface AccountFindUniqueArgs extends AccountFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account base type for findFirst actions
   */
  export type AccountFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     * 
    **/
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * Account: findFirst
   */
  export interface AccountFindFirstArgs extends AccountFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findMany
   */
  export type AccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Accounts to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to create a Account.
     * 
    **/
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs = {
    /**
     * The data used to create many Accounts.
     * 
    **/
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to update a Account.
     * 
    **/
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    /**
     * The data used to update Accounts.
     * 
    **/
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The filter to search for the Account to update in case it exists.
     * 
    **/
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     * 
    **/
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter which Account to delete.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    /**
     * Filter which Accounts to delete
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account: findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs = AccountFindUniqueArgsBase
      

  /**
   * Account: findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs = AccountFindFirstArgsBase
      

  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserArgs
  }

  export type SessionInclude = {
    user?: boolean | UserArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Find one Session that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }

  /**
   * Session: findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session: findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session: findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = SessionFindUniqueArgsBase
      

  /**
   * Session: findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = SessionFindFirstArgsBase
      

  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model VerificationToken
   */


  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs = {
    /**
     * Filter which VerificationToken to aggregate.
     * 
    **/
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs = {
    where?: VerificationTokenWhereInput
    orderBy?: Enumerable<VerificationTokenOrderByWithAggregationInput>
    by: Array<VerificationTokenScalarFieldEnum>
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }


  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenGetPayload<
    S extends boolean | null | undefined | VerificationTokenArgs,
    U = keyof S
      > = S extends true
        ? VerificationToken
    : S extends undefined
    ? never
    : S extends VerificationTokenArgs | VerificationTokenFindManyArgs
    ?'include' extends U
    ? VerificationToken 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof VerificationToken ? VerificationToken[P] : never
  } 
    : VerificationToken
  : VerificationToken


  type VerificationTokenCountArgs = Merge<
    Omit<VerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }
  >

  export interface VerificationTokenDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VerificationToken'> extends True ? CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>> : CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken | null >, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null >>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VerificationToken'> extends True ? CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>> : CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken | null >, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null >>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<VerificationToken>>, PrismaPromise<Array<VerificationTokenGetPayload<T>>>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs>(
      args: SelectSubset<T, VerificationTokenCreateArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs>(
      args: SelectSubset<T, VerificationTokenDeleteArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs>(
      args: SelectSubset<T, VerificationTokenUpdateArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs>(
      args: SelectSubset<T, VerificationTokenUpsertArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Find one VerificationToken that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationTokenClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * VerificationToken base type for findUnique actions
   */
  export type VerificationTokenFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken: findUnique
   */
  export interface VerificationTokenFindUniqueArgs extends VerificationTokenFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken base type for findFirst actions
   */
  export type VerificationTokenFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     * 
    **/
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     * 
    **/
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     * 
    **/
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }

  /**
   * VerificationToken: findFirst
   */
  export interface VerificationTokenFindFirstArgs extends VerificationTokenFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationTokens to fetch.
     * 
    **/
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     * 
    **/
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * The data needed to create a VerificationToken.
     * 
    **/
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs = {
    /**
     * The data used to create many VerificationTokens.
     * 
    **/
    data: Enumerable<VerificationTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * The data needed to update a VerificationToken.
     * 
    **/
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs = {
    /**
     * The data used to update VerificationTokens.
     * 
    **/
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     * 
    **/
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     * 
    **/
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Filter which VerificationToken to delete.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs = {
    /**
     * Filter which VerificationTokens to delete
     * 
    **/
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken: findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs = VerificationTokenFindUniqueArgsBase
      

  /**
   * VerificationToken: findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs = VerificationTokenFindFirstArgsBase
      

  /**
   * VerificationToken without action
   */
  export type VerificationTokenArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    fictionId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    fictionId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    comment: string | null
    createdById: string | null
    fictionId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    comment: string | null
    createdById: string | null
    fictionId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    comment: number
    createdById: number
    fictionId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    fictionId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    fictionId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    comment?: true
    createdById?: true
    fictionId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    comment?: true
    createdById?: true
    fictionId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    comment?: true
    createdById?: true
    fictionId?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which Comment to aggregate.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithAggregationInput>
    by: Array<CommentScalarFieldEnum>
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    comment: string
    createdById: string
    fictionId: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    comment?: boolean
    createdBy?: boolean | UserArgs
    createdById?: boolean
    fiction?: boolean | FictionArgs
    fictionId?: boolean
  }

  export type CommentInclude = {
    createdBy?: boolean | UserArgs
    fiction?: boolean | FictionArgs
  }

  export type CommentGetPayload<
    S extends boolean | null | undefined | CommentArgs,
    U = keyof S
      > = S extends true
        ? Comment
    : S extends undefined
    ? never
    : S extends CommentArgs | CommentFindManyArgs
    ?'include' extends U
    ? Comment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'createdBy' ? UserGetPayload<S['include'][P]> :
        P extends 'fiction' ? FictionGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'createdBy' ? UserGetPayload<S['select'][P]> :
        P extends 'fiction' ? FictionGetPayload<S['select'][P]> :  P extends keyof Comment ? Comment[P] : never
  } 
    : Comment
  : Comment


  type CommentCountArgs = Merge<
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }
  >

  export interface CommentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs>(
      args?: SelectSubset<T, CommentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Find one Comment that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Find the first Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    createdBy<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    fiction<T extends FictionArgs = {}>(args?: Subset<T, FictionArgs>): CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Comment base type for findUnique actions
   */
  export type CommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     * 
    **/
    where: CommentWhereUniqueInput
  }

  /**
   * Comment: findUnique
   */
  export interface CommentFindUniqueArgs extends CommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment base type for findFirst actions
   */
  export type CommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     * 
    **/
    distinct?: Enumerable<CommentScalarFieldEnum>
  }

  /**
   * Comment: findFirst
   */
  export interface CommentFindFirstArgs extends CommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
     * 
    **/
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs = {
    /**
     * The data used to create many Comments.
     * 
    **/
    data: Enumerable<CommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
     * 
    **/
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     * 
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    /**
     * The data used to update Comments.
     * 
    **/
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     * 
    **/
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
     * 
    **/
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     * 
    **/
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
     * 
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    /**
     * Filter which Comments to delete
     * 
    **/
    where?: CommentWhereInput
  }


  /**
   * Comment: findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs = CommentFindUniqueArgsBase
      

  /**
   * Comment: findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs = CommentFindFirstArgsBase
      

  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const CategoriesOnFictionsScalarFieldEnum: {
    fictionId: 'fictionId',
    categoryId: 'categoryId'
  };

  export type CategoriesOnFictionsScalarFieldEnum = (typeof CategoriesOnFictionsScalarFieldEnum)[keyof typeof CategoriesOnFictionsScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    comment: 'comment',
    createdById: 'createdById',
    fictionId: 'fictionId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const FavScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fictionId: 'fictionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FavScalarFieldEnum = (typeof FavScalarFieldEnum)[keyof typeof FavScalarFieldEnum]


  export const FictionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    title: 'title',
    author: 'author',
    nationality: 'nationality',
    genre: 'genre',
    startDate: 'startDate',
    endDate: 'endDate',
    currentState: 'currentState',
    original: 'original',
    platforms: 'platforms',
    image: 'image',
    synopsis: 'synopsis',
    characters: 'characters',
    userId: 'userId',
    isAdult: 'isAdult'
  };

  export type FictionScalarFieldEnum = (typeof FictionScalarFieldEnum)[keyof typeof FictionScalarFieldEnum]


  export const FictionStatScalarFieldEnum: {
    id: 'id',
    fictionId: 'fictionId',
    originality: 'originality',
    verisimilitude: 'verisimilitude',
    synopsisComposition: 'synopsisComposition',
    character: 'character',
    writing: 'writing',
    value: 'value'
  };

  export type FictionStatScalarFieldEnum = (typeof FictionStatScalarFieldEnum)[keyof typeof FictionStatScalarFieldEnum]


  export const KeywordScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isOfMC: 'isOfMC',
    isOfHeroine: 'isOfHeroine'
  };

  export type KeywordScalarFieldEnum = (typeof KeywordScalarFieldEnum)[keyof typeof KeywordScalarFieldEnum]


  export const KeywordsOnFictionsScalarFieldEnum: {
    fictionId: 'fictionId',
    keywordId: 'keywordId'
  };

  export type KeywordsOnFictionsScalarFieldEnum = (typeof KeywordsOnFictionsScalarFieldEnum)[keyof typeof KeywordsOnFictionsScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TokenScalarFieldEnum: {
    id: 'id',
    payload: 'payload',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserFictionStatScalarFieldEnum: {
    id: 'id',
    fictionId: 'fictionId',
    originality: 'originality',
    verisimilitude: 'verisimilitude',
    synopsisComposition: 'synopsisComposition',
    character: 'character',
    writing: 'writing',
    value: 'value',
    total: 'total'
  };

  export type UserFictionStatScalarFieldEnum = (typeof UserFictionStatScalarFieldEnum)[keyof typeof UserFictionStatScalarFieldEnum]


  export const UserRationOnFictionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    userFictionStatId: 'userFictionStatId',
    originality: 'originality',
    verisimilitude: 'verisimilitude',
    synopsisComposition: 'synopsisComposition',
    character: 'character',
    writing: 'writing',
    value: 'value',
    comment: 'comment'
  };

  export type UserRationOnFictionScalarFieldEnum = (typeof UserRationOnFictionScalarFieldEnum)[keyof typeof UserRationOnFictionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    email: 'email',
    name: 'name',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    emailVerified: 'emailVerified',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type FictionWhereInput = {
    AND?: Enumerable<FictionWhereInput>
    OR?: Enumerable<FictionWhereInput>
    NOT?: Enumerable<FictionWhereInput>
    id?: IntFilter | number
    categories?: CategoriesOnFictionsListRelationFilter
    keywords?: KeywordsOnFictionsListRelationFilter
    fictionStat?: XOR<FictionStatRelationFilter, FictionStatWhereInput> | null
    userFictionStat?: XOR<UserFictionStatRelationFilter, UserFictionStatWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    author?: StringFilter | string
    nationality?: StringFilter | string
    genre?: StringFilter | string
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    currentState?: StringFilter | string
    original?: StringFilter | string
    platforms?: StringFilter | string
    image?: StringFilter | string
    synopsis?: StringFilter | string
    characters?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    favs?: FavListRelationFilter
    isAdult?: BoolNullableFilter | boolean | null
    comments?: CommentListRelationFilter
  }

  export type FictionOrderByWithRelationInput = {
    id?: SortOrder
    categories?: CategoriesOnFictionsOrderByRelationAggregateInput
    keywords?: KeywordsOnFictionsOrderByRelationAggregateInput
    fictionStat?: FictionStatOrderByWithRelationInput
    userFictionStat?: UserFictionStatOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    author?: SortOrder
    nationality?: SortOrder
    genre?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    currentState?: SortOrder
    original?: SortOrder
    platforms?: SortOrder
    image?: SortOrder
    synopsis?: SortOrder
    characters?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    favs?: FavOrderByRelationAggregateInput
    isAdult?: SortOrder
    comments?: CommentOrderByRelationAggregateInput
  }

  export type FictionWhereUniqueInput = {
    id?: number
  }

  export type FictionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    author?: SortOrder
    nationality?: SortOrder
    genre?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    currentState?: SortOrder
    original?: SortOrder
    platforms?: SortOrder
    image?: SortOrder
    synopsis?: SortOrder
    characters?: SortOrder
    userId?: SortOrder
    isAdult?: SortOrder
    _count?: FictionCountOrderByAggregateInput
    _avg?: FictionAvgOrderByAggregateInput
    _max?: FictionMaxOrderByAggregateInput
    _min?: FictionMinOrderByAggregateInput
    _sum?: FictionSumOrderByAggregateInput
  }

  export type FictionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FictionScalarWhereWithAggregatesInput>
    OR?: Enumerable<FictionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FictionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    title?: StringWithAggregatesFilter | string
    author?: StringWithAggregatesFilter | string
    nationality?: StringWithAggregatesFilter | string
    genre?: StringWithAggregatesFilter | string
    startDate?: DateTimeWithAggregatesFilter | Date | string
    endDate?: DateTimeWithAggregatesFilter | Date | string
    currentState?: StringWithAggregatesFilter | string
    original?: StringWithAggregatesFilter | string
    platforms?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    synopsis?: StringWithAggregatesFilter | string
    characters?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    isAdult?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type FictionStatWhereInput = {
    AND?: Enumerable<FictionStatWhereInput>
    OR?: Enumerable<FictionStatWhereInput>
    NOT?: Enumerable<FictionStatWhereInput>
    id?: IntFilter | number
    fiction?: XOR<FictionRelationFilter, FictionWhereInput>
    fictionId?: IntFilter | number
    originality?: FloatFilter | number
    verisimilitude?: FloatFilter | number
    synopsisComposition?: FloatFilter | number
    character?: FloatFilter | number
    writing?: FloatFilter | number
    value?: FloatFilter | number
  }

  export type FictionStatOrderByWithRelationInput = {
    id?: SortOrder
    fiction?: FictionOrderByWithRelationInput
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
  }

  export type FictionStatWhereUniqueInput = {
    id?: number
    fictionId?: number
  }

  export type FictionStatOrderByWithAggregationInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    _count?: FictionStatCountOrderByAggregateInput
    _avg?: FictionStatAvgOrderByAggregateInput
    _max?: FictionStatMaxOrderByAggregateInput
    _min?: FictionStatMinOrderByAggregateInput
    _sum?: FictionStatSumOrderByAggregateInput
  }

  export type FictionStatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FictionStatScalarWhereWithAggregatesInput>
    OR?: Enumerable<FictionStatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FictionStatScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fictionId?: IntWithAggregatesFilter | number
    originality?: FloatWithAggregatesFilter | number
    verisimilitude?: FloatWithAggregatesFilter | number
    synopsisComposition?: FloatWithAggregatesFilter | number
    character?: FloatWithAggregatesFilter | number
    writing?: FloatWithAggregatesFilter | number
    value?: FloatWithAggregatesFilter | number
  }

  export type UserFictionStatWhereInput = {
    AND?: Enumerable<UserFictionStatWhereInput>
    OR?: Enumerable<UserFictionStatWhereInput>
    NOT?: Enumerable<UserFictionStatWhereInput>
    id?: IntFilter | number
    fiction?: XOR<FictionRelationFilter, FictionWhereInput>
    fictionId?: IntFilter | number
    users?: UserListRelationFilter
    userRationOnFictions?: UserRationOnFictionListRelationFilter
    originality?: FloatFilter | number
    verisimilitude?: FloatFilter | number
    synopsisComposition?: FloatFilter | number
    character?: FloatFilter | number
    writing?: FloatFilter | number
    value?: FloatFilter | number
    total?: FloatFilter | number
  }

  export type UserFictionStatOrderByWithRelationInput = {
    id?: SortOrder
    fiction?: FictionOrderByWithRelationInput
    fictionId?: SortOrder
    users?: UserOrderByRelationAggregateInput
    userRationOnFictions?: UserRationOnFictionOrderByRelationAggregateInput
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    total?: SortOrder
  }

  export type UserFictionStatWhereUniqueInput = {
    id?: number
    fictionId?: number
  }

  export type UserFictionStatOrderByWithAggregationInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    total?: SortOrder
    _count?: UserFictionStatCountOrderByAggregateInput
    _avg?: UserFictionStatAvgOrderByAggregateInput
    _max?: UserFictionStatMaxOrderByAggregateInput
    _min?: UserFictionStatMinOrderByAggregateInput
    _sum?: UserFictionStatSumOrderByAggregateInput
  }

  export type UserFictionStatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserFictionStatScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserFictionStatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserFictionStatScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fictionId?: IntWithAggregatesFilter | number
    originality?: FloatWithAggregatesFilter | number
    verisimilitude?: FloatWithAggregatesFilter | number
    synopsisComposition?: FloatWithAggregatesFilter | number
    character?: FloatWithAggregatesFilter | number
    writing?: FloatWithAggregatesFilter | number
    value?: FloatWithAggregatesFilter | number
    total?: FloatWithAggregatesFilter | number
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    fictions?: CategoriesOnFictionsListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fictions?: CategoriesOnFictionsOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: number
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type KeywordWhereInput = {
    AND?: Enumerable<KeywordWhereInput>
    OR?: Enumerable<KeywordWhereInput>
    NOT?: Enumerable<KeywordWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    isOfMC?: BoolFilter | boolean
    isOfHeroine?: BoolFilter | boolean
    fictions?: KeywordsOnFictionsListRelationFilter
  }

  export type KeywordOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isOfMC?: SortOrder
    isOfHeroine?: SortOrder
    fictions?: KeywordsOnFictionsOrderByRelationAggregateInput
  }

  export type KeywordWhereUniqueInput = {
    id?: number
  }

  export type KeywordOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isOfMC?: SortOrder
    isOfHeroine?: SortOrder
    _count?: KeywordCountOrderByAggregateInput
    _avg?: KeywordAvgOrderByAggregateInput
    _max?: KeywordMaxOrderByAggregateInput
    _min?: KeywordMinOrderByAggregateInput
    _sum?: KeywordSumOrderByAggregateInput
  }

  export type KeywordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KeywordScalarWhereWithAggregatesInput>
    OR?: Enumerable<KeywordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KeywordScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    isOfMC?: BoolWithAggregatesFilter | boolean
    isOfHeroine?: BoolWithAggregatesFilter | boolean
  }

  export type KeywordsOnFictionsWhereInput = {
    AND?: Enumerable<KeywordsOnFictionsWhereInput>
    OR?: Enumerable<KeywordsOnFictionsWhereInput>
    NOT?: Enumerable<KeywordsOnFictionsWhereInput>
    fiction?: XOR<FictionRelationFilter, FictionWhereInput> | null
    fictionId?: IntFilter | number
    keyword?: XOR<KeywordRelationFilter, KeywordWhereInput> | null
    keywordId?: IntFilter | number
  }

  export type KeywordsOnFictionsOrderByWithRelationInput = {
    fiction?: FictionOrderByWithRelationInput
    fictionId?: SortOrder
    keyword?: KeywordOrderByWithRelationInput
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsWhereUniqueInput = {
    fictionId_keywordId?: KeywordsOnFictionsFictionIdKeywordIdCompoundUniqueInput
  }

  export type KeywordsOnFictionsOrderByWithAggregationInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
    _count?: KeywordsOnFictionsCountOrderByAggregateInput
    _avg?: KeywordsOnFictionsAvgOrderByAggregateInput
    _max?: KeywordsOnFictionsMaxOrderByAggregateInput
    _min?: KeywordsOnFictionsMinOrderByAggregateInput
    _sum?: KeywordsOnFictionsSumOrderByAggregateInput
  }

  export type KeywordsOnFictionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KeywordsOnFictionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<KeywordsOnFictionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KeywordsOnFictionsScalarWhereWithAggregatesInput>
    fictionId?: IntWithAggregatesFilter | number
    keywordId?: IntWithAggregatesFilter | number
  }

  export type CategoriesOnFictionsWhereInput = {
    AND?: Enumerable<CategoriesOnFictionsWhereInput>
    OR?: Enumerable<CategoriesOnFictionsWhereInput>
    NOT?: Enumerable<CategoriesOnFictionsWhereInput>
    fiction?: XOR<FictionRelationFilter, FictionWhereInput>
    fictionId?: IntFilter | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    categoryId?: IntFilter | number
  }

  export type CategoriesOnFictionsOrderByWithRelationInput = {
    fiction?: FictionOrderByWithRelationInput
    fictionId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    categoryId?: SortOrder
  }

  export type CategoriesOnFictionsWhereUniqueInput = {
    fictionId_categoryId?: CategoriesOnFictionsFictionIdCategoryIdCompoundUniqueInput
  }

  export type CategoriesOnFictionsOrderByWithAggregationInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
    _count?: CategoriesOnFictionsCountOrderByAggregateInput
    _avg?: CategoriesOnFictionsAvgOrderByAggregateInput
    _max?: CategoriesOnFictionsMaxOrderByAggregateInput
    _min?: CategoriesOnFictionsMinOrderByAggregateInput
    _sum?: CategoriesOnFictionsSumOrderByAggregateInput
  }

  export type CategoriesOnFictionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoriesOnFictionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoriesOnFictionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoriesOnFictionsScalarWhereWithAggregatesInput>
    fictionId?: IntWithAggregatesFilter | number
    categoryId?: IntWithAggregatesFilter | number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    phone?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    name?: StringFilter | string
    avatar?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    tokens?: TokenListRelationFilter
    fictions?: FictionListRelationFilter
    fav?: FavListRelationFilter
    ratedFictions?: UserFictionStatListRelationFilter
    userRationOnFictions?: UserRationOnFictionListRelationFilter
    emailVerified?: DateTimeNullableFilter | Date | string | null
    image?: StringNullableFilter | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tokens?: TokenOrderByRelationAggregateInput
    fictions?: FictionOrderByRelationAggregateInput
    fav?: FavOrderByRelationAggregateInput
    ratedFictions?: UserFictionStatOrderByRelationAggregateInput
    userRationOnFictions?: UserRationOnFictionOrderByRelationAggregateInput
    emailVerified?: SortOrder
    image?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    phone?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    phone?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    name?: StringWithAggregatesFilter | string
    avatar?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    emailVerified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    image?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserRationOnFictionWhereInput = {
    AND?: Enumerable<UserRationOnFictionWhereInput>
    OR?: Enumerable<UserRationOnFictionWhereInput>
    NOT?: Enumerable<UserRationOnFictionWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    userFictionStat?: XOR<UserFictionStatRelationFilter, UserFictionStatWhereInput>
    userFictionStatId?: IntFilter | number
    originality?: FloatFilter | number
    verisimilitude?: FloatFilter | number
    synopsisComposition?: FloatFilter | number
    character?: FloatFilter | number
    writing?: FloatFilter | number
    value?: FloatFilter | number
    comment?: StringFilter | string
  }

  export type UserRationOnFictionOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    userFictionStat?: UserFictionStatOrderByWithRelationInput
    userFictionStatId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    comment?: SortOrder
  }

  export type UserRationOnFictionWhereUniqueInput = {
    id?: number
  }

  export type UserRationOnFictionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    userFictionStatId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    _count?: UserRationOnFictionCountOrderByAggregateInput
    _avg?: UserRationOnFictionAvgOrderByAggregateInput
    _max?: UserRationOnFictionMaxOrderByAggregateInput
    _min?: UserRationOnFictionMinOrderByAggregateInput
    _sum?: UserRationOnFictionSumOrderByAggregateInput
  }

  export type UserRationOnFictionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserRationOnFictionScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserRationOnFictionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserRationOnFictionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    userFictionStatId?: IntWithAggregatesFilter | number
    originality?: FloatWithAggregatesFilter | number
    verisimilitude?: FloatWithAggregatesFilter | number
    synopsisComposition?: FloatWithAggregatesFilter | number
    character?: FloatWithAggregatesFilter | number
    writing?: FloatWithAggregatesFilter | number
    value?: FloatWithAggregatesFilter | number
    comment?: StringWithAggregatesFilter | string
  }

  export type TokenWhereInput = {
    AND?: Enumerable<TokenWhereInput>
    OR?: Enumerable<TokenWhereInput>
    NOT?: Enumerable<TokenWhereInput>
    id?: IntFilter | number
    payload?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    payload?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TokenWhereUniqueInput = {
    id?: number
    payload?: string
  }

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    payload?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _avg?: TokenAvgOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
    _sum?: TokenSumOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<TokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TokenScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    payload?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FavWhereInput = {
    AND?: Enumerable<FavWhereInput>
    OR?: Enumerable<FavWhereInput>
    NOT?: Enumerable<FavWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    fiction?: XOR<FictionRelationFilter, FictionWhereInput>
    fictionId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FavOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    fiction?: FictionOrderByWithRelationInput
    fictionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FavWhereUniqueInput = {
    id?: number
  }

  export type FavOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fictionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FavCountOrderByAggregateInput
    _avg?: FavAvgOrderByAggregateInput
    _max?: FavMaxOrderByAggregateInput
    _min?: FavMinOrderByAggregateInput
    _sum?: FavSumOrderByAggregateInput
  }

  export type FavScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FavScalarWhereWithAggregatesInput>
    OR?: Enumerable<FavScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FavScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    fictionId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = {
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    provider?: StringWithAggregatesFilter | string
    providerAccountId?: StringWithAggregatesFilter | string
    refresh_token?: StringNullableWithAggregatesFilter | string | null
    access_token?: StringNullableWithAggregatesFilter | string | null
    expires_at?: IntNullableWithAggregatesFilter | number | null
    token_type?: StringNullableWithAggregatesFilter | string | null
    scope?: StringNullableWithAggregatesFilter | string | null
    id_token?: StringNullableWithAggregatesFilter | string | null
    session_state?: StringNullableWithAggregatesFilter | string | null
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    sessionToken?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionToken?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: Enumerable<VerificationTokenWhereInput>
    OR?: Enumerable<VerificationTokenWhereInput>
    NOT?: Enumerable<VerificationTokenWhereInput>
    identifier?: StringFilter | string
    token?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = {
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
  }

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    identifier?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    comment?: StringFilter | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    createdById?: StringFilter | string
    fiction?: XOR<FictionRelationFilter, FictionWhereInput>
    fictionId?: IntFilter | number
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    createdById?: SortOrder
    fiction?: FictionOrderByWithRelationInput
    fictionId?: SortOrder
  }

  export type CommentWhereUniqueInput = {
    id?: number
  }

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrder
    createdById?: SortOrder
    fictionId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    comment?: StringWithAggregatesFilter | string
    createdById?: StringWithAggregatesFilter | string
    fictionId?: IntWithAggregatesFilter | number
  }

  export type FictionCreateInput = {
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    user: UserCreateNestedOneWithoutFictionsInput
    favs?: FavCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateInput = {
    id?: number
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatUncheckedCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatUncheckedCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    userId: string
    favs?: FavUncheckedCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionUpdateInput = {
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFictionsNestedInput
    favs?: FavUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUpdateManyWithoutFictionNestedInput
  }

  export type FictionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUncheckedUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUncheckedUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    favs?: FavUncheckedUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUncheckedUpdateManyWithoutFictionNestedInput
  }

  export type FictionCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    userId: string
    isAdult?: boolean | null
  }

  export type FictionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type FictionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type FictionStatCreateInput = {
    fiction: FictionCreateNestedOneWithoutFictionStatInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
  }

  export type FictionStatUncheckedCreateInput = {
    id?: number
    fictionId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
  }

  export type FictionStatUpdateInput = {
    fiction?: FictionUpdateOneRequiredWithoutFictionStatNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type FictionStatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type FictionStatCreateManyInput = {
    id?: number
    fictionId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
  }

  export type FictionStatUpdateManyMutationInput = {
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type FictionStatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type UserFictionStatCreateInput = {
    fiction: FictionCreateNestedOneWithoutUserFictionStatInput
    users?: UserCreateNestedManyWithoutRatedFictionsInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserFictionStatInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
  }

  export type UserFictionStatUncheckedCreateInput = {
    id?: number
    fictionId: number
    users?: UserUncheckedCreateNestedManyWithoutRatedFictionsInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserFictionStatInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
  }

  export type UserFictionStatUpdateInput = {
    fiction?: FictionUpdateOneRequiredWithoutUserFictionStatNestedInput
    users?: UserUpdateManyWithoutRatedFictionsNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserFictionStatNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserFictionStatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutRatedFictionsNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserFictionStatNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserFictionStatCreateManyInput = {
    id?: number
    fictionId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
  }

  export type UserFictionStatUpdateManyMutationInput = {
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserFictionStatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    name: string
    fictions?: CategoriesOnFictionsCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    fictions?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    fictions?: CategoriesOnFictionsUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fictions?: CategoriesOnFictionsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KeywordCreateInput = {
    name: string
    isOfMC?: boolean
    isOfHeroine?: boolean
    fictions?: KeywordsOnFictionsCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUncheckedCreateInput = {
    id?: number
    name: string
    isOfMC?: boolean
    isOfHeroine?: boolean
    fictions?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isOfMC?: BoolFieldUpdateOperationsInput | boolean
    isOfHeroine?: BoolFieldUpdateOperationsInput | boolean
    fictions?: KeywordsOnFictionsUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isOfMC?: BoolFieldUpdateOperationsInput | boolean
    isOfHeroine?: BoolFieldUpdateOperationsInput | boolean
    fictions?: KeywordsOnFictionsUncheckedUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordCreateManyInput = {
    id?: number
    name: string
    isOfMC?: boolean
    isOfHeroine?: boolean
  }

  export type KeywordUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isOfMC?: BoolFieldUpdateOperationsInput | boolean
    isOfHeroine?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KeywordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isOfMC?: BoolFieldUpdateOperationsInput | boolean
    isOfHeroine?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KeywordsOnFictionsCreateInput = {
    fiction?: FictionCreateNestedOneWithoutKeywordsInput
    keyword?: KeywordCreateNestedOneWithoutFictionsInput
  }

  export type KeywordsOnFictionsUncheckedCreateInput = {
    fictionId: number
    keywordId: number
  }

  export type KeywordsOnFictionsUpdateInput = {
    fiction?: FictionUpdateOneWithoutKeywordsNestedInput
    keyword?: KeywordUpdateOneWithoutFictionsNestedInput
  }

  export type KeywordsOnFictionsUncheckedUpdateInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordsOnFictionsCreateManyInput = {
    fictionId: number
    keywordId: number
  }

  export type KeywordsOnFictionsUpdateManyMutationInput = {

  }

  export type KeywordsOnFictionsUncheckedUpdateManyInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnFictionsCreateInput = {
    fiction: FictionCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutFictionsInput
  }

  export type CategoriesOnFictionsUncheckedCreateInput = {
    fictionId: number
    categoryId: number
  }

  export type CategoriesOnFictionsUpdateInput = {
    fiction?: FictionUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutFictionsNestedInput
  }

  export type CategoriesOnFictionsUncheckedUpdateInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnFictionsCreateManyInput = {
    fictionId: number
    categoryId: number
  }

  export type CategoriesOnFictionsUpdateManyMutationInput = {

  }

  export type CategoriesOnFictionsUncheckedUpdateManyInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
    fictions?: FictionCreateNestedManyWithoutUserInput
    fav?: FavCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    fictions?: FictionUncheckedCreateNestedManyWithoutUserInput
    fav?: FavUncheckedCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatUncheckedCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    fictions?: FictionUpdateManyWithoutUserNestedInput
    fav?: FavUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    fictions?: FictionUncheckedUpdateManyWithoutUserNestedInput
    fav?: FavUncheckedUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUncheckedUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: Date | string | null
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserRationOnFictionCreateInput = {
    user: UserCreateNestedOneWithoutUserRationOnFictionsInput
    userFictionStat: UserFictionStatCreateNestedOneWithoutUserRationOnFictionsInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
  }

  export type UserRationOnFictionUncheckedCreateInput = {
    id?: number
    userId: string
    userFictionStatId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
  }

  export type UserRationOnFictionUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUserRationOnFictionsNestedInput
    userFictionStat?: UserFictionStatUpdateOneRequiredWithoutUserRationOnFictionsNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type UserRationOnFictionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    userFictionStatId?: IntFieldUpdateOperationsInput | number
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type UserRationOnFictionCreateManyInput = {
    id?: number
    userId: string
    userFictionStatId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
  }

  export type UserRationOnFictionUpdateManyMutationInput = {
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type UserRationOnFictionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    userFictionStatId?: IntFieldUpdateOperationsInput | number
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type TokenCreateInput = {
    payload: string
    user: UserCreateNestedOneWithoutTokensInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenUncheckedCreateInput = {
    id?: number
    payload: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenUpdateInput = {
    payload?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTokensNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    payload?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateManyInput = {
    id?: number
    payload: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenUpdateManyMutationInput = {
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    payload?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavCreateInput = {
    user: UserCreateNestedOneWithoutFavInput
    fiction: FictionCreateNestedOneWithoutFavsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavUncheckedCreateInput = {
    id?: number
    userId: string
    fictionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavUpdateInput = {
    user?: UserUpdateOneRequiredWithoutFavNestedInput
    fiction?: FictionUpdateOneRequiredWithoutFavsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    fictionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavCreateManyInput = {
    id?: number
    userId: string
    fictionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    fictionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    comment: string
    createdBy: UserCreateNestedOneWithoutCommentsInput
    fiction: FictionCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment: string
    createdById: string
    fictionId: number
  }

  export type CommentUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutCommentsNestedInput
    fiction?: FictionUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment: string
    createdById: string
    fictionId: number
  }

  export type CommentUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type CategoriesOnFictionsListRelationFilter = {
    every?: CategoriesOnFictionsWhereInput
    some?: CategoriesOnFictionsWhereInput
    none?: CategoriesOnFictionsWhereInput
  }

  export type KeywordsOnFictionsListRelationFilter = {
    every?: KeywordsOnFictionsWhereInput
    some?: KeywordsOnFictionsWhereInput
    none?: KeywordsOnFictionsWhereInput
  }

  export type FictionStatRelationFilter = {
    is?: FictionStatWhereInput | null
    isNot?: FictionStatWhereInput | null
  }

  export type UserFictionStatRelationFilter = {
    is?: UserFictionStatWhereInput
    isNot?: UserFictionStatWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FavListRelationFilter = {
    every?: FavWhereInput
    some?: FavWhereInput
    none?: FavWhereInput
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type CategoriesOnFictionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KeywordsOnFictionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FictionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    author?: SortOrder
    nationality?: SortOrder
    genre?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    currentState?: SortOrder
    original?: SortOrder
    platforms?: SortOrder
    image?: SortOrder
    synopsis?: SortOrder
    characters?: SortOrder
    userId?: SortOrder
    isAdult?: SortOrder
  }

  export type FictionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FictionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    author?: SortOrder
    nationality?: SortOrder
    genre?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    currentState?: SortOrder
    original?: SortOrder
    platforms?: SortOrder
    image?: SortOrder
    synopsis?: SortOrder
    characters?: SortOrder
    userId?: SortOrder
    isAdult?: SortOrder
  }

  export type FictionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    author?: SortOrder
    nationality?: SortOrder
    genre?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    currentState?: SortOrder
    original?: SortOrder
    platforms?: SortOrder
    image?: SortOrder
    synopsis?: SortOrder
    characters?: SortOrder
    userId?: SortOrder
    isAdult?: SortOrder
  }

  export type FictionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type FictionRelationFilter = {
    is?: FictionWhereInput | null
    isNot?: FictionWhereInput | null
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type FictionStatCountOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
  }

  export type FictionStatAvgOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
  }

  export type FictionStatMaxOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
  }

  export type FictionStatMinOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
  }

  export type FictionStatSumOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserRationOnFictionListRelationFilter = {
    every?: UserRationOnFictionWhereInput
    some?: UserRationOnFictionWhereInput
    none?: UserRationOnFictionWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRationOnFictionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserFictionStatCountOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    total?: SortOrder
  }

  export type UserFictionStatAvgOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    total?: SortOrder
  }

  export type UserFictionStatMaxOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    total?: SortOrder
  }

  export type UserFictionStatMinOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    total?: SortOrder
  }

  export type UserFictionStatSumOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    total?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type KeywordCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isOfMC?: SortOrder
    isOfHeroine?: SortOrder
  }

  export type KeywordAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KeywordMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isOfMC?: SortOrder
    isOfHeroine?: SortOrder
  }

  export type KeywordMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isOfMC?: SortOrder
    isOfHeroine?: SortOrder
  }

  export type KeywordSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type KeywordRelationFilter = {
    is?: KeywordWhereInput | null
    isNot?: KeywordWhereInput | null
  }

  export type KeywordsOnFictionsFictionIdKeywordIdCompoundUniqueInput = {
    fictionId: number
    keywordId: number
  }

  export type KeywordsOnFictionsCountOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsAvgOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsMaxOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsMinOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsSumOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type CategoriesOnFictionsFictionIdCategoryIdCompoundUniqueInput = {
    fictionId: number
    categoryId: number
  }

  export type CategoriesOnFictionsCountOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoriesOnFictionsAvgOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoriesOnFictionsMaxOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoriesOnFictionsMinOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoriesOnFictionsSumOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type TokenListRelationFilter = {
    every?: TokenWhereInput
    some?: TokenWhereInput
    none?: TokenWhereInput
  }

  export type FictionListRelationFilter = {
    every?: FictionWhereInput
    some?: FictionWhereInput
    none?: FictionWhereInput
  }

  export type UserFictionStatListRelationFilter = {
    every?: UserFictionStatWhereInput
    some?: UserFictionStatWhereInput
    none?: UserFictionStatWhereInput
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type TokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FictionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserFictionStatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type UserRationOnFictionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userFictionStatId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    comment?: SortOrder
  }

  export type UserRationOnFictionAvgOrderByAggregateInput = {
    id?: SortOrder
    userFictionStatId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
  }

  export type UserRationOnFictionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userFictionStatId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    comment?: SortOrder
  }

  export type UserRationOnFictionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userFictionStatId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
    comment?: SortOrder
  }

  export type UserRationOnFictionSumOrderByAggregateInput = {
    id?: SortOrder
    userFictionStatId?: SortOrder
    originality?: SortOrder
    verisimilitude?: SortOrder
    synopsisComposition?: SortOrder
    character?: SortOrder
    writing?: SortOrder
    value?: SortOrder
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    payload?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TokenAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    payload?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    payload?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TokenSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FavCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fictionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FavAvgOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
  }

  export type FavMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fictionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FavMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fictionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FavSumOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrder
    createdById?: SortOrder
    fictionId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrder
    createdById?: SortOrder
    fictionId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comment?: SortOrder
    createdById?: SortOrder
    fictionId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
  }

  export type CategoriesOnFictionsCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutFictionInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutFictionInput>
    createMany?: CategoriesOnFictionsCreateManyFictionInputEnvelope
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
  }

  export type KeywordsOnFictionsCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutFictionInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutFictionInput>
    createMany?: KeywordsOnFictionsCreateManyFictionInputEnvelope
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
  }

  export type FictionStatCreateNestedOneWithoutFictionInput = {
    create?: XOR<FictionStatCreateWithoutFictionInput, FictionStatUncheckedCreateWithoutFictionInput>
    connectOrCreate?: FictionStatCreateOrConnectWithoutFictionInput
    connect?: FictionStatWhereUniqueInput
  }

  export type UserFictionStatCreateNestedOneWithoutFictionInput = {
    create?: XOR<UserFictionStatCreateWithoutFictionInput, UserFictionStatUncheckedCreateWithoutFictionInput>
    connectOrCreate?: UserFictionStatCreateOrConnectWithoutFictionInput
    connect?: UserFictionStatWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFictionsInput = {
    create?: XOR<UserCreateWithoutFictionsInput, UserUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFictionsInput
    connect?: UserWhereUniqueInput
  }

  export type FavCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<FavCreateWithoutFictionInput>, Enumerable<FavUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<FavCreateOrConnectWithoutFictionInput>
    createMany?: FavCreateManyFictionInputEnvelope
    connect?: Enumerable<FavWhereUniqueInput>
  }

  export type CommentCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<CommentCreateWithoutFictionInput>, Enumerable<CommentUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutFictionInput>
    createMany?: CommentCreateManyFictionInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutFictionInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutFictionInput>
    createMany?: CategoriesOnFictionsCreateManyFictionInputEnvelope
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
  }

  export type KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutFictionInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutFictionInput>
    createMany?: KeywordsOnFictionsCreateManyFictionInputEnvelope
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
  }

  export type FictionStatUncheckedCreateNestedOneWithoutFictionInput = {
    create?: XOR<FictionStatCreateWithoutFictionInput, FictionStatUncheckedCreateWithoutFictionInput>
    connectOrCreate?: FictionStatCreateOrConnectWithoutFictionInput
    connect?: FictionStatWhereUniqueInput
  }

  export type UserFictionStatUncheckedCreateNestedOneWithoutFictionInput = {
    create?: XOR<UserFictionStatCreateWithoutFictionInput, UserFictionStatUncheckedCreateWithoutFictionInput>
    connectOrCreate?: UserFictionStatCreateOrConnectWithoutFictionInput
    connect?: UserFictionStatWhereUniqueInput
  }

  export type FavUncheckedCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<FavCreateWithoutFictionInput>, Enumerable<FavUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<FavCreateOrConnectWithoutFictionInput>
    createMany?: FavCreateManyFictionInputEnvelope
    connect?: Enumerable<FavWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<CommentCreateWithoutFictionInput>, Enumerable<CommentUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutFictionInput>
    createMany?: CommentCreateManyFictionInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type CategoriesOnFictionsUpdateManyWithoutFictionNestedInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutFictionInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<CategoriesOnFictionsUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: CategoriesOnFictionsCreateManyFictionInputEnvelope
    set?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    update?: Enumerable<CategoriesOnFictionsUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<CategoriesOnFictionsUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<CategoriesOnFictionsScalarWhereInput>
  }

  export type KeywordsOnFictionsUpdateManyWithoutFictionNestedInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutFictionInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<KeywordsOnFictionsUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: KeywordsOnFictionsCreateManyFictionInputEnvelope
    set?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    delete?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    update?: Enumerable<KeywordsOnFictionsUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<KeywordsOnFictionsUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<KeywordsOnFictionsScalarWhereInput>
  }

  export type FictionStatUpdateOneWithoutFictionNestedInput = {
    create?: XOR<FictionStatCreateWithoutFictionInput, FictionStatUncheckedCreateWithoutFictionInput>
    connectOrCreate?: FictionStatCreateOrConnectWithoutFictionInput
    upsert?: FictionStatUpsertWithoutFictionInput
    disconnect?: boolean
    delete?: boolean
    connect?: FictionStatWhereUniqueInput
    update?: XOR<FictionStatUpdateWithoutFictionInput, FictionStatUncheckedUpdateWithoutFictionInput>
  }

  export type UserFictionStatUpdateOneWithoutFictionNestedInput = {
    create?: XOR<UserFictionStatCreateWithoutFictionInput, UserFictionStatUncheckedCreateWithoutFictionInput>
    connectOrCreate?: UserFictionStatCreateOrConnectWithoutFictionInput
    upsert?: UserFictionStatUpsertWithoutFictionInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserFictionStatWhereUniqueInput
    update?: XOR<UserFictionStatUpdateWithoutFictionInput, UserFictionStatUncheckedUpdateWithoutFictionInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutFictionsNestedInput = {
    create?: XOR<UserCreateWithoutFictionsInput, UserUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFictionsInput
    upsert?: UserUpsertWithoutFictionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFictionsInput, UserUncheckedUpdateWithoutFictionsInput>
  }

  export type FavUpdateManyWithoutFictionNestedInput = {
    create?: XOR<Enumerable<FavCreateWithoutFictionInput>, Enumerable<FavUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<FavCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<FavUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: FavCreateManyFictionInputEnvelope
    set?: Enumerable<FavWhereUniqueInput>
    disconnect?: Enumerable<FavWhereUniqueInput>
    delete?: Enumerable<FavWhereUniqueInput>
    connect?: Enumerable<FavWhereUniqueInput>
    update?: Enumerable<FavUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<FavUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<FavScalarWhereInput>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type CommentUpdateManyWithoutFictionNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutFictionInput>, Enumerable<CommentUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: CommentCreateManyFictionInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoriesOnFictionsUncheckedUpdateManyWithoutFictionNestedInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutFictionInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<CategoriesOnFictionsUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: CategoriesOnFictionsCreateManyFictionInputEnvelope
    set?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    update?: Enumerable<CategoriesOnFictionsUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<CategoriesOnFictionsUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<CategoriesOnFictionsScalarWhereInput>
  }

  export type KeywordsOnFictionsUncheckedUpdateManyWithoutFictionNestedInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutFictionInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<KeywordsOnFictionsUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: KeywordsOnFictionsCreateManyFictionInputEnvelope
    set?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    delete?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    update?: Enumerable<KeywordsOnFictionsUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<KeywordsOnFictionsUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<KeywordsOnFictionsScalarWhereInput>
  }

  export type FictionStatUncheckedUpdateOneWithoutFictionNestedInput = {
    create?: XOR<FictionStatCreateWithoutFictionInput, FictionStatUncheckedCreateWithoutFictionInput>
    connectOrCreate?: FictionStatCreateOrConnectWithoutFictionInput
    upsert?: FictionStatUpsertWithoutFictionInput
    disconnect?: boolean
    delete?: boolean
    connect?: FictionStatWhereUniqueInput
    update?: XOR<FictionStatUpdateWithoutFictionInput, FictionStatUncheckedUpdateWithoutFictionInput>
  }

  export type UserFictionStatUncheckedUpdateOneWithoutFictionNestedInput = {
    create?: XOR<UserFictionStatCreateWithoutFictionInput, UserFictionStatUncheckedCreateWithoutFictionInput>
    connectOrCreate?: UserFictionStatCreateOrConnectWithoutFictionInput
    upsert?: UserFictionStatUpsertWithoutFictionInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserFictionStatWhereUniqueInput
    update?: XOR<UserFictionStatUpdateWithoutFictionInput, UserFictionStatUncheckedUpdateWithoutFictionInput>
  }

  export type FavUncheckedUpdateManyWithoutFictionNestedInput = {
    create?: XOR<Enumerable<FavCreateWithoutFictionInput>, Enumerable<FavUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<FavCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<FavUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: FavCreateManyFictionInputEnvelope
    set?: Enumerable<FavWhereUniqueInput>
    disconnect?: Enumerable<FavWhereUniqueInput>
    delete?: Enumerable<FavWhereUniqueInput>
    connect?: Enumerable<FavWhereUniqueInput>
    update?: Enumerable<FavUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<FavUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<FavScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutFictionNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutFictionInput>, Enumerable<CommentUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: CommentCreateManyFictionInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type FictionCreateNestedOneWithoutFictionStatInput = {
    create?: XOR<FictionCreateWithoutFictionStatInput, FictionUncheckedCreateWithoutFictionStatInput>
    connectOrCreate?: FictionCreateOrConnectWithoutFictionStatInput
    connect?: FictionWhereUniqueInput
  }

  export type FictionUpdateOneRequiredWithoutFictionStatNestedInput = {
    create?: XOR<FictionCreateWithoutFictionStatInput, FictionUncheckedCreateWithoutFictionStatInput>
    connectOrCreate?: FictionCreateOrConnectWithoutFictionStatInput
    upsert?: FictionUpsertWithoutFictionStatInput
    connect?: FictionWhereUniqueInput
    update?: XOR<FictionUpdateWithoutFictionStatInput, FictionUncheckedUpdateWithoutFictionStatInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FictionCreateNestedOneWithoutUserFictionStatInput = {
    create?: XOR<FictionCreateWithoutUserFictionStatInput, FictionUncheckedCreateWithoutUserFictionStatInput>
    connectOrCreate?: FictionCreateOrConnectWithoutUserFictionStatInput
    connect?: FictionWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutRatedFictionsInput = {
    create?: XOR<Enumerable<UserCreateWithoutRatedFictionsInput>, Enumerable<UserUncheckedCreateWithoutRatedFictionsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRatedFictionsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserRationOnFictionCreateNestedManyWithoutUserFictionStatInput = {
    create?: XOR<Enumerable<UserRationOnFictionCreateWithoutUserFictionStatInput>, Enumerable<UserRationOnFictionUncheckedCreateWithoutUserFictionStatInput>>
    connectOrCreate?: Enumerable<UserRationOnFictionCreateOrConnectWithoutUserFictionStatInput>
    createMany?: UserRationOnFictionCreateManyUserFictionStatInputEnvelope
    connect?: Enumerable<UserRationOnFictionWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutRatedFictionsInput = {
    create?: XOR<Enumerable<UserCreateWithoutRatedFictionsInput>, Enumerable<UserUncheckedCreateWithoutRatedFictionsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRatedFictionsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserRationOnFictionUncheckedCreateNestedManyWithoutUserFictionStatInput = {
    create?: XOR<Enumerable<UserRationOnFictionCreateWithoutUserFictionStatInput>, Enumerable<UserRationOnFictionUncheckedCreateWithoutUserFictionStatInput>>
    connectOrCreate?: Enumerable<UserRationOnFictionCreateOrConnectWithoutUserFictionStatInput>
    createMany?: UserRationOnFictionCreateManyUserFictionStatInputEnvelope
    connect?: Enumerable<UserRationOnFictionWhereUniqueInput>
  }

  export type FictionUpdateOneRequiredWithoutUserFictionStatNestedInput = {
    create?: XOR<FictionCreateWithoutUserFictionStatInput, FictionUncheckedCreateWithoutUserFictionStatInput>
    connectOrCreate?: FictionCreateOrConnectWithoutUserFictionStatInput
    upsert?: FictionUpsertWithoutUserFictionStatInput
    connect?: FictionWhereUniqueInput
    update?: XOR<FictionUpdateWithoutUserFictionStatInput, FictionUncheckedUpdateWithoutUserFictionStatInput>
  }

  export type UserUpdateManyWithoutRatedFictionsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRatedFictionsInput>, Enumerable<UserUncheckedCreateWithoutRatedFictionsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRatedFictionsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRatedFictionsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRatedFictionsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRatedFictionsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserRationOnFictionUpdateManyWithoutUserFictionStatNestedInput = {
    create?: XOR<Enumerable<UserRationOnFictionCreateWithoutUserFictionStatInput>, Enumerable<UserRationOnFictionUncheckedCreateWithoutUserFictionStatInput>>
    connectOrCreate?: Enumerable<UserRationOnFictionCreateOrConnectWithoutUserFictionStatInput>
    upsert?: Enumerable<UserRationOnFictionUpsertWithWhereUniqueWithoutUserFictionStatInput>
    createMany?: UserRationOnFictionCreateManyUserFictionStatInputEnvelope
    set?: Enumerable<UserRationOnFictionWhereUniqueInput>
    disconnect?: Enumerable<UserRationOnFictionWhereUniqueInput>
    delete?: Enumerable<UserRationOnFictionWhereUniqueInput>
    connect?: Enumerable<UserRationOnFictionWhereUniqueInput>
    update?: Enumerable<UserRationOnFictionUpdateWithWhereUniqueWithoutUserFictionStatInput>
    updateMany?: Enumerable<UserRationOnFictionUpdateManyWithWhereWithoutUserFictionStatInput>
    deleteMany?: Enumerable<UserRationOnFictionScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutRatedFictionsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutRatedFictionsInput>, Enumerable<UserUncheckedCreateWithoutRatedFictionsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRatedFictionsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRatedFictionsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRatedFictionsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRatedFictionsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserRationOnFictionUncheckedUpdateManyWithoutUserFictionStatNestedInput = {
    create?: XOR<Enumerable<UserRationOnFictionCreateWithoutUserFictionStatInput>, Enumerable<UserRationOnFictionUncheckedCreateWithoutUserFictionStatInput>>
    connectOrCreate?: Enumerable<UserRationOnFictionCreateOrConnectWithoutUserFictionStatInput>
    upsert?: Enumerable<UserRationOnFictionUpsertWithWhereUniqueWithoutUserFictionStatInput>
    createMany?: UserRationOnFictionCreateManyUserFictionStatInputEnvelope
    set?: Enumerable<UserRationOnFictionWhereUniqueInput>
    disconnect?: Enumerable<UserRationOnFictionWhereUniqueInput>
    delete?: Enumerable<UserRationOnFictionWhereUniqueInput>
    connect?: Enumerable<UserRationOnFictionWhereUniqueInput>
    update?: Enumerable<UserRationOnFictionUpdateWithWhereUniqueWithoutUserFictionStatInput>
    updateMany?: Enumerable<UserRationOnFictionUpdateManyWithWhereWithoutUserFictionStatInput>
    deleteMany?: Enumerable<UserRationOnFictionScalarWhereInput>
  }

  export type CategoriesOnFictionsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutCategoryInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutCategoryInput>
    createMany?: CategoriesOnFictionsCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
  }

  export type CategoriesOnFictionsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutCategoryInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutCategoryInput>
    createMany?: CategoriesOnFictionsCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
  }

  export type CategoriesOnFictionsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutCategoryInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoriesOnFictionsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: CategoriesOnFictionsCreateManyCategoryInputEnvelope
    set?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    update?: Enumerable<CategoriesOnFictionsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoriesOnFictionsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoriesOnFictionsScalarWhereInput>
  }

  export type CategoriesOnFictionsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutCategoryInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoriesOnFictionsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: CategoriesOnFictionsCreateManyCategoryInputEnvelope
    set?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    update?: Enumerable<CategoriesOnFictionsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoriesOnFictionsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoriesOnFictionsScalarWhereInput>
  }

  export type KeywordsOnFictionsCreateNestedManyWithoutKeywordInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutKeywordInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutKeywordInput>
    createMany?: KeywordsOnFictionsCreateManyKeywordInputEnvelope
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
  }

  export type KeywordsOnFictionsUncheckedCreateNestedManyWithoutKeywordInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutKeywordInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutKeywordInput>
    createMany?: KeywordsOnFictionsCreateManyKeywordInputEnvelope
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type KeywordsOnFictionsUpdateManyWithoutKeywordNestedInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutKeywordInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutKeywordInput>
    upsert?: Enumerable<KeywordsOnFictionsUpsertWithWhereUniqueWithoutKeywordInput>
    createMany?: KeywordsOnFictionsCreateManyKeywordInputEnvelope
    set?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    delete?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    update?: Enumerable<KeywordsOnFictionsUpdateWithWhereUniqueWithoutKeywordInput>
    updateMany?: Enumerable<KeywordsOnFictionsUpdateManyWithWhereWithoutKeywordInput>
    deleteMany?: Enumerable<KeywordsOnFictionsScalarWhereInput>
  }

  export type KeywordsOnFictionsUncheckedUpdateManyWithoutKeywordNestedInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutKeywordInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutKeywordInput>
    upsert?: Enumerable<KeywordsOnFictionsUpsertWithWhereUniqueWithoutKeywordInput>
    createMany?: KeywordsOnFictionsCreateManyKeywordInputEnvelope
    set?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    delete?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    update?: Enumerable<KeywordsOnFictionsUpdateWithWhereUniqueWithoutKeywordInput>
    updateMany?: Enumerable<KeywordsOnFictionsUpdateManyWithWhereWithoutKeywordInput>
    deleteMany?: Enumerable<KeywordsOnFictionsScalarWhereInput>
  }

  export type FictionCreateNestedOneWithoutKeywordsInput = {
    create?: XOR<FictionCreateWithoutKeywordsInput, FictionUncheckedCreateWithoutKeywordsInput>
    connectOrCreate?: FictionCreateOrConnectWithoutKeywordsInput
    connect?: FictionWhereUniqueInput
  }

  export type KeywordCreateNestedOneWithoutFictionsInput = {
    create?: XOR<KeywordCreateWithoutFictionsInput, KeywordUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutFictionsInput
    connect?: KeywordWhereUniqueInput
  }

  export type FictionUpdateOneWithoutKeywordsNestedInput = {
    create?: XOR<FictionCreateWithoutKeywordsInput, FictionUncheckedCreateWithoutKeywordsInput>
    connectOrCreate?: FictionCreateOrConnectWithoutKeywordsInput
    upsert?: FictionUpsertWithoutKeywordsInput
    disconnect?: boolean
    delete?: boolean
    connect?: FictionWhereUniqueInput
    update?: XOR<FictionUpdateWithoutKeywordsInput, FictionUncheckedUpdateWithoutKeywordsInput>
  }

  export type KeywordUpdateOneWithoutFictionsNestedInput = {
    create?: XOR<KeywordCreateWithoutFictionsInput, KeywordUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutFictionsInput
    upsert?: KeywordUpsertWithoutFictionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: KeywordWhereUniqueInput
    update?: XOR<KeywordUpdateWithoutFictionsInput, KeywordUncheckedUpdateWithoutFictionsInput>
  }

  export type FictionCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<FictionCreateWithoutCategoriesInput, FictionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: FictionCreateOrConnectWithoutCategoriesInput
    connect?: FictionWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutFictionsInput = {
    create?: XOR<CategoryCreateWithoutFictionsInput, CategoryUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFictionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type FictionUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<FictionCreateWithoutCategoriesInput, FictionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: FictionCreateOrConnectWithoutCategoriesInput
    upsert?: FictionUpsertWithoutCategoriesInput
    connect?: FictionWhereUniqueInput
    update?: XOR<FictionUpdateWithoutCategoriesInput, FictionUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutFictionsNestedInput = {
    create?: XOR<CategoryCreateWithoutFictionsInput, CategoryUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFictionsInput
    upsert?: CategoryUpsertWithoutFictionsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutFictionsInput, CategoryUncheckedUpdateWithoutFictionsInput>
  }

  export type TokenCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: Enumerable<TokenWhereUniqueInput>
  }

  export type FictionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FictionCreateWithoutUserInput>, Enumerable<FictionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FictionCreateOrConnectWithoutUserInput>
    createMany?: FictionCreateManyUserInputEnvelope
    connect?: Enumerable<FictionWhereUniqueInput>
  }

  export type FavCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FavCreateWithoutUserInput>, Enumerable<FavUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FavCreateOrConnectWithoutUserInput>
    createMany?: FavCreateManyUserInputEnvelope
    connect?: Enumerable<FavWhereUniqueInput>
  }

  export type UserFictionStatCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserFictionStatCreateWithoutUsersInput>, Enumerable<UserFictionStatUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserFictionStatCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<UserFictionStatWhereUniqueInput>
  }

  export type UserRationOnFictionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserRationOnFictionCreateWithoutUserInput>, Enumerable<UserRationOnFictionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserRationOnFictionCreateOrConnectWithoutUserInput>
    createMany?: UserRationOnFictionCreateManyUserInputEnvelope
    connect?: Enumerable<UserRationOnFictionWhereUniqueInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type CommentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<CommentCreateWithoutCreatedByInput>, Enumerable<CommentUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutCreatedByInput>
    createMany?: CommentCreateManyCreatedByInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type TokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: Enumerable<TokenWhereUniqueInput>
  }

  export type FictionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FictionCreateWithoutUserInput>, Enumerable<FictionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FictionCreateOrConnectWithoutUserInput>
    createMany?: FictionCreateManyUserInputEnvelope
    connect?: Enumerable<FictionWhereUniqueInput>
  }

  export type FavUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FavCreateWithoutUserInput>, Enumerable<FavUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FavCreateOrConnectWithoutUserInput>
    createMany?: FavCreateManyUserInputEnvelope
    connect?: Enumerable<FavWhereUniqueInput>
  }

  export type UserFictionStatUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserFictionStatCreateWithoutUsersInput>, Enumerable<UserFictionStatUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserFictionStatCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<UserFictionStatWhereUniqueInput>
  }

  export type UserRationOnFictionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserRationOnFictionCreateWithoutUserInput>, Enumerable<UserRationOnFictionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserRationOnFictionCreateOrConnectWithoutUserInput>
    createMany?: UserRationOnFictionCreateManyUserInputEnvelope
    connect?: Enumerable<UserRationOnFictionWhereUniqueInput>
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<CommentCreateWithoutCreatedByInput>, Enumerable<CommentUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutCreatedByInput>
    createMany?: CommentCreateManyCreatedByInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    set?: Enumerable<TokenWhereUniqueInput>
    disconnect?: Enumerable<TokenWhereUniqueInput>
    delete?: Enumerable<TokenWhereUniqueInput>
    connect?: Enumerable<TokenWhereUniqueInput>
    update?: Enumerable<TokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TokenScalarWhereInput>
  }

  export type FictionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FictionCreateWithoutUserInput>, Enumerable<FictionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FictionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FictionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FictionCreateManyUserInputEnvelope
    set?: Enumerable<FictionWhereUniqueInput>
    disconnect?: Enumerable<FictionWhereUniqueInput>
    delete?: Enumerable<FictionWhereUniqueInput>
    connect?: Enumerable<FictionWhereUniqueInput>
    update?: Enumerable<FictionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FictionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FictionScalarWhereInput>
  }

  export type FavUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FavCreateWithoutUserInput>, Enumerable<FavUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FavCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FavUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FavCreateManyUserInputEnvelope
    set?: Enumerable<FavWhereUniqueInput>
    disconnect?: Enumerable<FavWhereUniqueInput>
    delete?: Enumerable<FavWhereUniqueInput>
    connect?: Enumerable<FavWhereUniqueInput>
    update?: Enumerable<FavUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FavUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FavScalarWhereInput>
  }

  export type UserFictionStatUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserFictionStatCreateWithoutUsersInput>, Enumerable<UserFictionStatUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserFictionStatCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserFictionStatUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<UserFictionStatWhereUniqueInput>
    disconnect?: Enumerable<UserFictionStatWhereUniqueInput>
    delete?: Enumerable<UserFictionStatWhereUniqueInput>
    connect?: Enumerable<UserFictionStatWhereUniqueInput>
    update?: Enumerable<UserFictionStatUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserFictionStatUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserFictionStatScalarWhereInput>
  }

  export type UserRationOnFictionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserRationOnFictionCreateWithoutUserInput>, Enumerable<UserRationOnFictionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserRationOnFictionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserRationOnFictionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserRationOnFictionCreateManyUserInputEnvelope
    set?: Enumerable<UserRationOnFictionWhereUniqueInput>
    disconnect?: Enumerable<UserRationOnFictionWhereUniqueInput>
    delete?: Enumerable<UserRationOnFictionWhereUniqueInput>
    connect?: Enumerable<UserRationOnFictionWhereUniqueInput>
    update?: Enumerable<UserRationOnFictionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserRationOnFictionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserRationOnFictionScalarWhereInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type CommentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutCreatedByInput>, Enumerable<CommentUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: CommentCreateManyCreatedByInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type TokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    set?: Enumerable<TokenWhereUniqueInput>
    disconnect?: Enumerable<TokenWhereUniqueInput>
    delete?: Enumerable<TokenWhereUniqueInput>
    connect?: Enumerable<TokenWhereUniqueInput>
    update?: Enumerable<TokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TokenScalarWhereInput>
  }

  export type FictionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FictionCreateWithoutUserInput>, Enumerable<FictionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FictionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FictionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FictionCreateManyUserInputEnvelope
    set?: Enumerable<FictionWhereUniqueInput>
    disconnect?: Enumerable<FictionWhereUniqueInput>
    delete?: Enumerable<FictionWhereUniqueInput>
    connect?: Enumerable<FictionWhereUniqueInput>
    update?: Enumerable<FictionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FictionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FictionScalarWhereInput>
  }

  export type FavUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<FavCreateWithoutUserInput>, Enumerable<FavUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FavCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FavUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FavCreateManyUserInputEnvelope
    set?: Enumerable<FavWhereUniqueInput>
    disconnect?: Enumerable<FavWhereUniqueInput>
    delete?: Enumerable<FavWhereUniqueInput>
    connect?: Enumerable<FavWhereUniqueInput>
    update?: Enumerable<FavUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FavUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FavScalarWhereInput>
  }

  export type UserFictionStatUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserFictionStatCreateWithoutUsersInput>, Enumerable<UserFictionStatUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserFictionStatCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserFictionStatUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<UserFictionStatWhereUniqueInput>
    disconnect?: Enumerable<UserFictionStatWhereUniqueInput>
    delete?: Enumerable<UserFictionStatWhereUniqueInput>
    connect?: Enumerable<UserFictionStatWhereUniqueInput>
    update?: Enumerable<UserFictionStatUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserFictionStatUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserFictionStatScalarWhereInput>
  }

  export type UserRationOnFictionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserRationOnFictionCreateWithoutUserInput>, Enumerable<UserRationOnFictionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserRationOnFictionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserRationOnFictionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserRationOnFictionCreateManyUserInputEnvelope
    set?: Enumerable<UserRationOnFictionWhereUniqueInput>
    disconnect?: Enumerable<UserRationOnFictionWhereUniqueInput>
    delete?: Enumerable<UserRationOnFictionWhereUniqueInput>
    connect?: Enumerable<UserRationOnFictionWhereUniqueInput>
    update?: Enumerable<UserRationOnFictionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserRationOnFictionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserRationOnFictionScalarWhereInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutCreatedByInput>, Enumerable<CommentUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: CommentCreateManyCreatedByInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUserRationOnFictionsInput = {
    create?: XOR<UserCreateWithoutUserRationOnFictionsInput, UserUncheckedCreateWithoutUserRationOnFictionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRationOnFictionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserFictionStatCreateNestedOneWithoutUserRationOnFictionsInput = {
    create?: XOR<UserFictionStatCreateWithoutUserRationOnFictionsInput, UserFictionStatUncheckedCreateWithoutUserRationOnFictionsInput>
    connectOrCreate?: UserFictionStatCreateOrConnectWithoutUserRationOnFictionsInput
    connect?: UserFictionStatWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserRationOnFictionsNestedInput = {
    create?: XOR<UserCreateWithoutUserRationOnFictionsInput, UserUncheckedCreateWithoutUserRationOnFictionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRationOnFictionsInput
    upsert?: UserUpsertWithoutUserRationOnFictionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserRationOnFictionsInput, UserUncheckedUpdateWithoutUserRationOnFictionsInput>
  }

  export type UserFictionStatUpdateOneRequiredWithoutUserRationOnFictionsNestedInput = {
    create?: XOR<UserFictionStatCreateWithoutUserRationOnFictionsInput, UserFictionStatUncheckedCreateWithoutUserRationOnFictionsInput>
    connectOrCreate?: UserFictionStatCreateOrConnectWithoutUserRationOnFictionsInput
    upsert?: UserFictionStatUpsertWithoutUserRationOnFictionsInput
    connect?: UserFictionStatWhereUniqueInput
    update?: XOR<UserFictionStatUpdateWithoutUserRationOnFictionsInput, UserFictionStatUncheckedUpdateWithoutUserRationOnFictionsInput>
  }

  export type UserCreateNestedOneWithoutTokensInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTokensNestedInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    upsert?: UserUpsertWithoutTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
  }

  export type UserCreateNestedOneWithoutFavInput = {
    create?: XOR<UserCreateWithoutFavInput, UserUncheckedCreateWithoutFavInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavInput
    connect?: UserWhereUniqueInput
  }

  export type FictionCreateNestedOneWithoutFavsInput = {
    create?: XOR<FictionCreateWithoutFavsInput, FictionUncheckedCreateWithoutFavsInput>
    connectOrCreate?: FictionCreateOrConnectWithoutFavsInput
    connect?: FictionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavNestedInput = {
    create?: XOR<UserCreateWithoutFavInput, UserUncheckedCreateWithoutFavInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavInput
    upsert?: UserUpsertWithoutFavInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFavInput, UserUncheckedUpdateWithoutFavInput>
  }

  export type FictionUpdateOneRequiredWithoutFavsNestedInput = {
    create?: XOR<FictionCreateWithoutFavsInput, FictionUncheckedCreateWithoutFavsInput>
    connectOrCreate?: FictionCreateOrConnectWithoutFavsInput
    upsert?: FictionUpsertWithoutFavsInput
    connect?: FictionWhereUniqueInput
    update?: XOR<FictionUpdateWithoutFavsInput, FictionUncheckedUpdateWithoutFavsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type FictionCreateNestedOneWithoutCommentsInput = {
    create?: XOR<FictionCreateWithoutCommentsInput, FictionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FictionCreateOrConnectWithoutCommentsInput
    connect?: FictionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type FictionUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<FictionCreateWithoutCommentsInput, FictionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FictionCreateOrConnectWithoutCommentsInput
    upsert?: FictionUpsertWithoutCommentsInput
    connect?: FictionWhereUniqueInput
    update?: XOR<FictionUpdateWithoutCommentsInput, FictionUncheckedUpdateWithoutCommentsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type CategoriesOnFictionsCreateWithoutFictionInput = {
    category: CategoryCreateNestedOneWithoutFictionsInput
  }

  export type CategoriesOnFictionsUncheckedCreateWithoutFictionInput = {
    categoryId: number
  }

  export type CategoriesOnFictionsCreateOrConnectWithoutFictionInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    create: XOR<CategoriesOnFictionsCreateWithoutFictionInput, CategoriesOnFictionsUncheckedCreateWithoutFictionInput>
  }

  export type CategoriesOnFictionsCreateManyFictionInputEnvelope = {
    data: Enumerable<CategoriesOnFictionsCreateManyFictionInput>
    skipDuplicates?: boolean
  }

  export type KeywordsOnFictionsCreateWithoutFictionInput = {
    keyword?: KeywordCreateNestedOneWithoutFictionsInput
  }

  export type KeywordsOnFictionsUncheckedCreateWithoutFictionInput = {
    keywordId: number
  }

  export type KeywordsOnFictionsCreateOrConnectWithoutFictionInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    create: XOR<KeywordsOnFictionsCreateWithoutFictionInput, KeywordsOnFictionsUncheckedCreateWithoutFictionInput>
  }

  export type KeywordsOnFictionsCreateManyFictionInputEnvelope = {
    data: Enumerable<KeywordsOnFictionsCreateManyFictionInput>
    skipDuplicates?: boolean
  }

  export type FictionStatCreateWithoutFictionInput = {
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
  }

  export type FictionStatUncheckedCreateWithoutFictionInput = {
    id?: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
  }

  export type FictionStatCreateOrConnectWithoutFictionInput = {
    where: FictionStatWhereUniqueInput
    create: XOR<FictionStatCreateWithoutFictionInput, FictionStatUncheckedCreateWithoutFictionInput>
  }

  export type UserFictionStatCreateWithoutFictionInput = {
    users?: UserCreateNestedManyWithoutRatedFictionsInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserFictionStatInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
  }

  export type UserFictionStatUncheckedCreateWithoutFictionInput = {
    id?: number
    users?: UserUncheckedCreateNestedManyWithoutRatedFictionsInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserFictionStatInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
  }

  export type UserFictionStatCreateOrConnectWithoutFictionInput = {
    where: UserFictionStatWhereUniqueInput
    create: XOR<UserFictionStatCreateWithoutFictionInput, UserFictionStatUncheckedCreateWithoutFictionInput>
  }

  export type UserCreateWithoutFictionsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
    fav?: FavCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutFictionsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    fav?: FavUncheckedCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatUncheckedCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutFictionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFictionsInput, UserUncheckedCreateWithoutFictionsInput>
  }

  export type FavCreateWithoutFictionInput = {
    user: UserCreateNestedOneWithoutFavInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavUncheckedCreateWithoutFictionInput = {
    id?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavCreateOrConnectWithoutFictionInput = {
    where: FavWhereUniqueInput
    create: XOR<FavCreateWithoutFictionInput, FavUncheckedCreateWithoutFictionInput>
  }

  export type FavCreateManyFictionInputEnvelope = {
    data: Enumerable<FavCreateManyFictionInput>
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutFictionInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    comment: string
    createdBy: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutFictionInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment: string
    createdById: string
  }

  export type CommentCreateOrConnectWithoutFictionInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutFictionInput, CommentUncheckedCreateWithoutFictionInput>
  }

  export type CommentCreateManyFictionInputEnvelope = {
    data: Enumerable<CommentCreateManyFictionInput>
    skipDuplicates?: boolean
  }

  export type CategoriesOnFictionsUpsertWithWhereUniqueWithoutFictionInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    update: XOR<CategoriesOnFictionsUpdateWithoutFictionInput, CategoriesOnFictionsUncheckedUpdateWithoutFictionInput>
    create: XOR<CategoriesOnFictionsCreateWithoutFictionInput, CategoriesOnFictionsUncheckedCreateWithoutFictionInput>
  }

  export type CategoriesOnFictionsUpdateWithWhereUniqueWithoutFictionInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    data: XOR<CategoriesOnFictionsUpdateWithoutFictionInput, CategoriesOnFictionsUncheckedUpdateWithoutFictionInput>
  }

  export type CategoriesOnFictionsUpdateManyWithWhereWithoutFictionInput = {
    where: CategoriesOnFictionsScalarWhereInput
    data: XOR<CategoriesOnFictionsUpdateManyMutationInput, CategoriesOnFictionsUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type CategoriesOnFictionsScalarWhereInput = {
    AND?: Enumerable<CategoriesOnFictionsScalarWhereInput>
    OR?: Enumerable<CategoriesOnFictionsScalarWhereInput>
    NOT?: Enumerable<CategoriesOnFictionsScalarWhereInput>
    fictionId?: IntFilter | number
    categoryId?: IntFilter | number
  }

  export type KeywordsOnFictionsUpsertWithWhereUniqueWithoutFictionInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    update: XOR<KeywordsOnFictionsUpdateWithoutFictionInput, KeywordsOnFictionsUncheckedUpdateWithoutFictionInput>
    create: XOR<KeywordsOnFictionsCreateWithoutFictionInput, KeywordsOnFictionsUncheckedCreateWithoutFictionInput>
  }

  export type KeywordsOnFictionsUpdateWithWhereUniqueWithoutFictionInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    data: XOR<KeywordsOnFictionsUpdateWithoutFictionInput, KeywordsOnFictionsUncheckedUpdateWithoutFictionInput>
  }

  export type KeywordsOnFictionsUpdateManyWithWhereWithoutFictionInput = {
    where: KeywordsOnFictionsScalarWhereInput
    data: XOR<KeywordsOnFictionsUpdateManyMutationInput, KeywordsOnFictionsUncheckedUpdateManyWithoutKeywordsInput>
  }

  export type KeywordsOnFictionsScalarWhereInput = {
    AND?: Enumerable<KeywordsOnFictionsScalarWhereInput>
    OR?: Enumerable<KeywordsOnFictionsScalarWhereInput>
    NOT?: Enumerable<KeywordsOnFictionsScalarWhereInput>
    fictionId?: IntFilter | number
    keywordId?: IntFilter | number
  }

  export type FictionStatUpsertWithoutFictionInput = {
    update: XOR<FictionStatUpdateWithoutFictionInput, FictionStatUncheckedUpdateWithoutFictionInput>
    create: XOR<FictionStatCreateWithoutFictionInput, FictionStatUncheckedCreateWithoutFictionInput>
  }

  export type FictionStatUpdateWithoutFictionInput = {
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type FictionStatUncheckedUpdateWithoutFictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
  }

  export type UserFictionStatUpsertWithoutFictionInput = {
    update: XOR<UserFictionStatUpdateWithoutFictionInput, UserFictionStatUncheckedUpdateWithoutFictionInput>
    create: XOR<UserFictionStatCreateWithoutFictionInput, UserFictionStatUncheckedCreateWithoutFictionInput>
  }

  export type UserFictionStatUpdateWithoutFictionInput = {
    users?: UserUpdateManyWithoutRatedFictionsNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserFictionStatNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserFictionStatUncheckedUpdateWithoutFictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutRatedFictionsNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserFictionStatNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutFictionsInput = {
    update: XOR<UserUpdateWithoutFictionsInput, UserUncheckedUpdateWithoutFictionsInput>
    create: XOR<UserCreateWithoutFictionsInput, UserUncheckedCreateWithoutFictionsInput>
  }

  export type UserUpdateWithoutFictionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    fav?: FavUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutFictionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    fav?: FavUncheckedUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUncheckedUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type FavUpsertWithWhereUniqueWithoutFictionInput = {
    where: FavWhereUniqueInput
    update: XOR<FavUpdateWithoutFictionInput, FavUncheckedUpdateWithoutFictionInput>
    create: XOR<FavCreateWithoutFictionInput, FavUncheckedCreateWithoutFictionInput>
  }

  export type FavUpdateWithWhereUniqueWithoutFictionInput = {
    where: FavWhereUniqueInput
    data: XOR<FavUpdateWithoutFictionInput, FavUncheckedUpdateWithoutFictionInput>
  }

  export type FavUpdateManyWithWhereWithoutFictionInput = {
    where: FavScalarWhereInput
    data: XOR<FavUpdateManyMutationInput, FavUncheckedUpdateManyWithoutFavsInput>
  }

  export type FavScalarWhereInput = {
    AND?: Enumerable<FavScalarWhereInput>
    OR?: Enumerable<FavScalarWhereInput>
    NOT?: Enumerable<FavScalarWhereInput>
    id?: IntFilter | number
    userId?: StringFilter | string
    fictionId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutFictionInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutFictionInput, CommentUncheckedUpdateWithoutFictionInput>
    create: XOR<CommentCreateWithoutFictionInput, CommentUncheckedCreateWithoutFictionInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutFictionInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutFictionInput, CommentUncheckedUpdateWithoutFictionInput>
  }

  export type CommentUpdateManyWithWhereWithoutFictionInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    comment?: StringFilter | string
    createdById?: StringFilter | string
    fictionId?: IntFilter | number
  }

  export type FictionCreateWithoutFictionStatInput = {
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
    userFictionStat?: UserFictionStatCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    user: UserCreateNestedOneWithoutFictionsInput
    favs?: FavCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateWithoutFictionStatInput = {
    id?: number
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    userFictionStat?: UserFictionStatUncheckedCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    userId: string
    favs?: FavUncheckedCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionCreateOrConnectWithoutFictionStatInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutFictionStatInput, FictionUncheckedCreateWithoutFictionStatInput>
  }

  export type FictionUpsertWithoutFictionStatInput = {
    update: XOR<FictionUpdateWithoutFictionStatInput, FictionUncheckedUpdateWithoutFictionStatInput>
    create: XOR<FictionCreateWithoutFictionStatInput, FictionUncheckedCreateWithoutFictionStatInput>
  }

  export type FictionUpdateWithoutFictionStatInput = {
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFictionsNestedInput
    favs?: FavUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUpdateManyWithoutFictionNestedInput
  }

  export type FictionUncheckedUpdateWithoutFictionStatInput = {
    id?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUncheckedUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    favs?: FavUncheckedUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUncheckedUpdateManyWithoutFictionNestedInput
  }

  export type FictionCreateWithoutUserFictionStatInput = {
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    user: UserCreateNestedOneWithoutFictionsInput
    favs?: FavCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateWithoutUserFictionStatInput = {
    id?: number
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatUncheckedCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    userId: string
    favs?: FavUncheckedCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionCreateOrConnectWithoutUserFictionStatInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutUserFictionStatInput, FictionUncheckedCreateWithoutUserFictionStatInput>
  }

  export type UserCreateWithoutRatedFictionsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
    fictions?: FictionCreateNestedManyWithoutUserInput
    fav?: FavCreateNestedManyWithoutUserInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutRatedFictionsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    fictions?: FictionUncheckedCreateNestedManyWithoutUserInput
    fav?: FavUncheckedCreateNestedManyWithoutUserInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutRatedFictionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatedFictionsInput, UserUncheckedCreateWithoutRatedFictionsInput>
  }

  export type UserRationOnFictionCreateWithoutUserFictionStatInput = {
    user: UserCreateNestedOneWithoutUserRationOnFictionsInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
  }

  export type UserRationOnFictionUncheckedCreateWithoutUserFictionStatInput = {
    id?: number
    userId: string
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
  }

  export type UserRationOnFictionCreateOrConnectWithoutUserFictionStatInput = {
    where: UserRationOnFictionWhereUniqueInput
    create: XOR<UserRationOnFictionCreateWithoutUserFictionStatInput, UserRationOnFictionUncheckedCreateWithoutUserFictionStatInput>
  }

  export type UserRationOnFictionCreateManyUserFictionStatInputEnvelope = {
    data: Enumerable<UserRationOnFictionCreateManyUserFictionStatInput>
    skipDuplicates?: boolean
  }

  export type FictionUpsertWithoutUserFictionStatInput = {
    update: XOR<FictionUpdateWithoutUserFictionStatInput, FictionUncheckedUpdateWithoutUserFictionStatInput>
    create: XOR<FictionCreateWithoutUserFictionStatInput, FictionUncheckedCreateWithoutUserFictionStatInput>
  }

  export type FictionUpdateWithoutUserFictionStatInput = {
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFictionsNestedInput
    favs?: FavUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUpdateManyWithoutFictionNestedInput
  }

  export type FictionUncheckedUpdateWithoutUserFictionStatInput = {
    id?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUncheckedUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    favs?: FavUncheckedUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUncheckedUpdateManyWithoutFictionNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutRatedFictionsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRatedFictionsInput, UserUncheckedUpdateWithoutRatedFictionsInput>
    create: XOR<UserCreateWithoutRatedFictionsInput, UserUncheckedCreateWithoutRatedFictionsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRatedFictionsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRatedFictionsInput, UserUncheckedUpdateWithoutRatedFictionsInput>
  }

  export type UserUpdateManyWithWhereWithoutRatedFictionsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    phone?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    name?: StringFilter | string
    avatar?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    emailVerified?: DateTimeNullableFilter | Date | string | null
    image?: StringNullableFilter | string | null
  }

  export type UserRationOnFictionUpsertWithWhereUniqueWithoutUserFictionStatInput = {
    where: UserRationOnFictionWhereUniqueInput
    update: XOR<UserRationOnFictionUpdateWithoutUserFictionStatInput, UserRationOnFictionUncheckedUpdateWithoutUserFictionStatInput>
    create: XOR<UserRationOnFictionCreateWithoutUserFictionStatInput, UserRationOnFictionUncheckedCreateWithoutUserFictionStatInput>
  }

  export type UserRationOnFictionUpdateWithWhereUniqueWithoutUserFictionStatInput = {
    where: UserRationOnFictionWhereUniqueInput
    data: XOR<UserRationOnFictionUpdateWithoutUserFictionStatInput, UserRationOnFictionUncheckedUpdateWithoutUserFictionStatInput>
  }

  export type UserRationOnFictionUpdateManyWithWhereWithoutUserFictionStatInput = {
    where: UserRationOnFictionScalarWhereInput
    data: XOR<UserRationOnFictionUpdateManyMutationInput, UserRationOnFictionUncheckedUpdateManyWithoutUserRationOnFictionsInput>
  }

  export type UserRationOnFictionScalarWhereInput = {
    AND?: Enumerable<UserRationOnFictionScalarWhereInput>
    OR?: Enumerable<UserRationOnFictionScalarWhereInput>
    NOT?: Enumerable<UserRationOnFictionScalarWhereInput>
    id?: IntFilter | number
    userId?: StringFilter | string
    userFictionStatId?: IntFilter | number
    originality?: FloatFilter | number
    verisimilitude?: FloatFilter | number
    synopsisComposition?: FloatFilter | number
    character?: FloatFilter | number
    writing?: FloatFilter | number
    value?: FloatFilter | number
    comment?: StringFilter | string
  }

  export type CategoriesOnFictionsCreateWithoutCategoryInput = {
    fiction: FictionCreateNestedOneWithoutCategoriesInput
  }

  export type CategoriesOnFictionsUncheckedCreateWithoutCategoryInput = {
    fictionId: number
  }

  export type CategoriesOnFictionsCreateOrConnectWithoutCategoryInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    create: XOR<CategoriesOnFictionsCreateWithoutCategoryInput, CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>
  }

  export type CategoriesOnFictionsCreateManyCategoryInputEnvelope = {
    data: Enumerable<CategoriesOnFictionsCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type CategoriesOnFictionsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    update: XOR<CategoriesOnFictionsUpdateWithoutCategoryInput, CategoriesOnFictionsUncheckedUpdateWithoutCategoryInput>
    create: XOR<CategoriesOnFictionsCreateWithoutCategoryInput, CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>
  }

  export type CategoriesOnFictionsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    data: XOR<CategoriesOnFictionsUpdateWithoutCategoryInput, CategoriesOnFictionsUncheckedUpdateWithoutCategoryInput>
  }

  export type CategoriesOnFictionsUpdateManyWithWhereWithoutCategoryInput = {
    where: CategoriesOnFictionsScalarWhereInput
    data: XOR<CategoriesOnFictionsUpdateManyMutationInput, CategoriesOnFictionsUncheckedUpdateManyWithoutFictionsInput>
  }

  export type KeywordsOnFictionsCreateWithoutKeywordInput = {
    fiction?: FictionCreateNestedOneWithoutKeywordsInput
  }

  export type KeywordsOnFictionsUncheckedCreateWithoutKeywordInput = {
    fictionId: number
  }

  export type KeywordsOnFictionsCreateOrConnectWithoutKeywordInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    create: XOR<KeywordsOnFictionsCreateWithoutKeywordInput, KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>
  }

  export type KeywordsOnFictionsCreateManyKeywordInputEnvelope = {
    data: Enumerable<KeywordsOnFictionsCreateManyKeywordInput>
    skipDuplicates?: boolean
  }

  export type KeywordsOnFictionsUpsertWithWhereUniqueWithoutKeywordInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    update: XOR<KeywordsOnFictionsUpdateWithoutKeywordInput, KeywordsOnFictionsUncheckedUpdateWithoutKeywordInput>
    create: XOR<KeywordsOnFictionsCreateWithoutKeywordInput, KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>
  }

  export type KeywordsOnFictionsUpdateWithWhereUniqueWithoutKeywordInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    data: XOR<KeywordsOnFictionsUpdateWithoutKeywordInput, KeywordsOnFictionsUncheckedUpdateWithoutKeywordInput>
  }

  export type KeywordsOnFictionsUpdateManyWithWhereWithoutKeywordInput = {
    where: KeywordsOnFictionsScalarWhereInput
    data: XOR<KeywordsOnFictionsUpdateManyMutationInput, KeywordsOnFictionsUncheckedUpdateManyWithoutFictionsInput>
  }

  export type FictionCreateWithoutKeywordsInput = {
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    user: UserCreateNestedOneWithoutFictionsInput
    favs?: FavCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateWithoutKeywordsInput = {
    id?: number
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatUncheckedCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatUncheckedCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    userId: string
    favs?: FavUncheckedCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionCreateOrConnectWithoutKeywordsInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutKeywordsInput, FictionUncheckedCreateWithoutKeywordsInput>
  }

  export type KeywordCreateWithoutFictionsInput = {
    name: string
    isOfMC?: boolean
    isOfHeroine?: boolean
  }

  export type KeywordUncheckedCreateWithoutFictionsInput = {
    id?: number
    name: string
    isOfMC?: boolean
    isOfHeroine?: boolean
  }

  export type KeywordCreateOrConnectWithoutFictionsInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutFictionsInput, KeywordUncheckedCreateWithoutFictionsInput>
  }

  export type FictionUpsertWithoutKeywordsInput = {
    update: XOR<FictionUpdateWithoutKeywordsInput, FictionUncheckedUpdateWithoutKeywordsInput>
    create: XOR<FictionCreateWithoutKeywordsInput, FictionUncheckedCreateWithoutKeywordsInput>
  }

  export type FictionUpdateWithoutKeywordsInput = {
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFictionsNestedInput
    favs?: FavUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUpdateManyWithoutFictionNestedInput
  }

  export type FictionUncheckedUpdateWithoutKeywordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUncheckedUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUncheckedUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    favs?: FavUncheckedUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUncheckedUpdateManyWithoutFictionNestedInput
  }

  export type KeywordUpsertWithoutFictionsInput = {
    update: XOR<KeywordUpdateWithoutFictionsInput, KeywordUncheckedUpdateWithoutFictionsInput>
    create: XOR<KeywordCreateWithoutFictionsInput, KeywordUncheckedCreateWithoutFictionsInput>
  }

  export type KeywordUpdateWithoutFictionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    isOfMC?: BoolFieldUpdateOperationsInput | boolean
    isOfHeroine?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KeywordUncheckedUpdateWithoutFictionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isOfMC?: BoolFieldUpdateOperationsInput | boolean
    isOfHeroine?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FictionCreateWithoutCategoriesInput = {
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    user: UserCreateNestedOneWithoutFictionsInput
    favs?: FavCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateWithoutCategoriesInput = {
    id?: number
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatUncheckedCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatUncheckedCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    userId: string
    favs?: FavUncheckedCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionCreateOrConnectWithoutCategoriesInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutCategoriesInput, FictionUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutFictionsInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutFictionsInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutFictionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutFictionsInput, CategoryUncheckedCreateWithoutFictionsInput>
  }

  export type FictionUpsertWithoutCategoriesInput = {
    update: XOR<FictionUpdateWithoutCategoriesInput, FictionUncheckedUpdateWithoutCategoriesInput>
    create: XOR<FictionCreateWithoutCategoriesInput, FictionUncheckedCreateWithoutCategoriesInput>
  }

  export type FictionUpdateWithoutCategoriesInput = {
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFictionsNestedInput
    favs?: FavUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUpdateManyWithoutFictionNestedInput
  }

  export type FictionUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUncheckedUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUncheckedUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    favs?: FavUncheckedUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUncheckedUpdateManyWithoutFictionNestedInput
  }

  export type CategoryUpsertWithoutFictionsInput = {
    update: XOR<CategoryUpdateWithoutFictionsInput, CategoryUncheckedUpdateWithoutFictionsInput>
    create: XOR<CategoryCreateWithoutFictionsInput, CategoryUncheckedCreateWithoutFictionsInput>
  }

  export type CategoryUpdateWithoutFictionsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutFictionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TokenCreateWithoutUserInput = {
    payload: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenUncheckedCreateWithoutUserInput = {
    id?: number
    payload: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenCreateManyUserInputEnvelope = {
    data: Enumerable<TokenCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FictionCreateWithoutUserInput = {
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    favs?: FavCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateWithoutUserInput = {
    id?: number
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatUncheckedCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatUncheckedCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    favs?: FavUncheckedCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
    comments?: CommentUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionCreateOrConnectWithoutUserInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutUserInput, FictionUncheckedCreateWithoutUserInput>
  }

  export type FictionCreateManyUserInputEnvelope = {
    data: Enumerable<FictionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FavCreateWithoutUserInput = {
    fiction: FictionCreateNestedOneWithoutFavsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavUncheckedCreateWithoutUserInput = {
    id?: number
    fictionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavCreateOrConnectWithoutUserInput = {
    where: FavWhereUniqueInput
    create: XOR<FavCreateWithoutUserInput, FavUncheckedCreateWithoutUserInput>
  }

  export type FavCreateManyUserInputEnvelope = {
    data: Enumerable<FavCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserFictionStatCreateWithoutUsersInput = {
    fiction: FictionCreateNestedOneWithoutUserFictionStatInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserFictionStatInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
  }

  export type UserFictionStatUncheckedCreateWithoutUsersInput = {
    id?: number
    fictionId: number
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserFictionStatInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
  }

  export type UserFictionStatCreateOrConnectWithoutUsersInput = {
    where: UserFictionStatWhereUniqueInput
    create: XOR<UserFictionStatCreateWithoutUsersInput, UserFictionStatUncheckedCreateWithoutUsersInput>
  }

  export type UserRationOnFictionCreateWithoutUserInput = {
    userFictionStat: UserFictionStatCreateNestedOneWithoutUserRationOnFictionsInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
  }

  export type UserRationOnFictionUncheckedCreateWithoutUserInput = {
    id?: number
    userFictionStatId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
  }

  export type UserRationOnFictionCreateOrConnectWithoutUserInput = {
    where: UserRationOnFictionWhereUniqueInput
    create: XOR<UserRationOnFictionCreateWithoutUserInput, UserRationOnFictionUncheckedCreateWithoutUserInput>
  }

  export type UserRationOnFictionCreateManyUserInputEnvelope = {
    data: Enumerable<UserRationOnFictionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: Enumerable<AccountCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutCreatedByInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    comment: string
    fiction: FictionCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutCreatedByInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment: string
    fictionId: number
  }

  export type CommentCreateOrConnectWithoutCreatedByInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCreatedByInput, CommentUncheckedCreateWithoutCreatedByInput>
  }

  export type CommentCreateManyCreatedByInputEnvelope = {
    data: Enumerable<CommentCreateManyCreatedByInput>
    skipDuplicates?: boolean
  }

  export type TokenUpsertWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    update: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenUpdateWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    data: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
  }

  export type TokenUpdateManyWithWhereWithoutUserInput = {
    where: TokenScalarWhereInput
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyWithoutTokensInput>
  }

  export type TokenScalarWhereInput = {
    AND?: Enumerable<TokenScalarWhereInput>
    OR?: Enumerable<TokenScalarWhereInput>
    NOT?: Enumerable<TokenScalarWhereInput>
    id?: IntFilter | number
    payload?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FictionUpsertWithWhereUniqueWithoutUserInput = {
    where: FictionWhereUniqueInput
    update: XOR<FictionUpdateWithoutUserInput, FictionUncheckedUpdateWithoutUserInput>
    create: XOR<FictionCreateWithoutUserInput, FictionUncheckedCreateWithoutUserInput>
  }

  export type FictionUpdateWithWhereUniqueWithoutUserInput = {
    where: FictionWhereUniqueInput
    data: XOR<FictionUpdateWithoutUserInput, FictionUncheckedUpdateWithoutUserInput>
  }

  export type FictionUpdateManyWithWhereWithoutUserInput = {
    where: FictionScalarWhereInput
    data: XOR<FictionUpdateManyMutationInput, FictionUncheckedUpdateManyWithoutFictionsInput>
  }

  export type FictionScalarWhereInput = {
    AND?: Enumerable<FictionScalarWhereInput>
    OR?: Enumerable<FictionScalarWhereInput>
    NOT?: Enumerable<FictionScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    author?: StringFilter | string
    nationality?: StringFilter | string
    genre?: StringFilter | string
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    currentState?: StringFilter | string
    original?: StringFilter | string
    platforms?: StringFilter | string
    image?: StringFilter | string
    synopsis?: StringFilter | string
    characters?: StringFilter | string
    userId?: StringFilter | string
    isAdult?: BoolNullableFilter | boolean | null
  }

  export type FavUpsertWithWhereUniqueWithoutUserInput = {
    where: FavWhereUniqueInput
    update: XOR<FavUpdateWithoutUserInput, FavUncheckedUpdateWithoutUserInput>
    create: XOR<FavCreateWithoutUserInput, FavUncheckedCreateWithoutUserInput>
  }

  export type FavUpdateWithWhereUniqueWithoutUserInput = {
    where: FavWhereUniqueInput
    data: XOR<FavUpdateWithoutUserInput, FavUncheckedUpdateWithoutUserInput>
  }

  export type FavUpdateManyWithWhereWithoutUserInput = {
    where: FavScalarWhereInput
    data: XOR<FavUpdateManyMutationInput, FavUncheckedUpdateManyWithoutFavInput>
  }

  export type UserFictionStatUpsertWithWhereUniqueWithoutUsersInput = {
    where: UserFictionStatWhereUniqueInput
    update: XOR<UserFictionStatUpdateWithoutUsersInput, UserFictionStatUncheckedUpdateWithoutUsersInput>
    create: XOR<UserFictionStatCreateWithoutUsersInput, UserFictionStatUncheckedCreateWithoutUsersInput>
  }

  export type UserFictionStatUpdateWithWhereUniqueWithoutUsersInput = {
    where: UserFictionStatWhereUniqueInput
    data: XOR<UserFictionStatUpdateWithoutUsersInput, UserFictionStatUncheckedUpdateWithoutUsersInput>
  }

  export type UserFictionStatUpdateManyWithWhereWithoutUsersInput = {
    where: UserFictionStatScalarWhereInput
    data: XOR<UserFictionStatUpdateManyMutationInput, UserFictionStatUncheckedUpdateManyWithoutRatedFictionsInput>
  }

  export type UserFictionStatScalarWhereInput = {
    AND?: Enumerable<UserFictionStatScalarWhereInput>
    OR?: Enumerable<UserFictionStatScalarWhereInput>
    NOT?: Enumerable<UserFictionStatScalarWhereInput>
    id?: IntFilter | number
    fictionId?: IntFilter | number
    originality?: FloatFilter | number
    verisimilitude?: FloatFilter | number
    synopsisComposition?: FloatFilter | number
    character?: FloatFilter | number
    writing?: FloatFilter | number
    value?: FloatFilter | number
    total?: FloatFilter | number
  }

  export type UserRationOnFictionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRationOnFictionWhereUniqueInput
    update: XOR<UserRationOnFictionUpdateWithoutUserInput, UserRationOnFictionUncheckedUpdateWithoutUserInput>
    create: XOR<UserRationOnFictionCreateWithoutUserInput, UserRationOnFictionUncheckedCreateWithoutUserInput>
  }

  export type UserRationOnFictionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRationOnFictionWhereUniqueInput
    data: XOR<UserRationOnFictionUpdateWithoutUserInput, UserRationOnFictionUncheckedUpdateWithoutUserInput>
  }

  export type UserRationOnFictionUpdateManyWithWhereWithoutUserInput = {
    where: UserRationOnFictionScalarWhereInput
    data: XOR<UserRationOnFictionUpdateManyMutationInput, UserRationOnFictionUncheckedUpdateManyWithoutUserRationOnFictionsInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutAccountsInput>
  }

  export type AccountScalarWhereInput = {
    AND?: Enumerable<AccountScalarWhereInput>
    OR?: Enumerable<AccountScalarWhereInput>
    NOT?: Enumerable<AccountScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutCreatedByInput, CommentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CommentCreateWithoutCreatedByInput, CommentUncheckedCreateWithoutCreatedByInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutCreatedByInput, CommentUncheckedUpdateWithoutCreatedByInput>
  }

  export type CommentUpdateManyWithWhereWithoutCreatedByInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type UserCreateWithoutUserRationOnFictionsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
    fictions?: FictionCreateNestedManyWithoutUserInput
    fav?: FavCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatCreateNestedManyWithoutUsersInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUserRationOnFictionsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    fictions?: FictionUncheckedCreateNestedManyWithoutUserInput
    fav?: FavUncheckedCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatUncheckedCreateNestedManyWithoutUsersInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUserRationOnFictionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRationOnFictionsInput, UserUncheckedCreateWithoutUserRationOnFictionsInput>
  }

  export type UserFictionStatCreateWithoutUserRationOnFictionsInput = {
    fiction: FictionCreateNestedOneWithoutUserFictionStatInput
    users?: UserCreateNestedManyWithoutRatedFictionsInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
  }

  export type UserFictionStatUncheckedCreateWithoutUserRationOnFictionsInput = {
    id?: number
    fictionId: number
    users?: UserUncheckedCreateNestedManyWithoutRatedFictionsInput
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    total: number
  }

  export type UserFictionStatCreateOrConnectWithoutUserRationOnFictionsInput = {
    where: UserFictionStatWhereUniqueInput
    create: XOR<UserFictionStatCreateWithoutUserRationOnFictionsInput, UserFictionStatUncheckedCreateWithoutUserRationOnFictionsInput>
  }

  export type UserUpsertWithoutUserRationOnFictionsInput = {
    update: XOR<UserUpdateWithoutUserRationOnFictionsInput, UserUncheckedUpdateWithoutUserRationOnFictionsInput>
    create: XOR<UserCreateWithoutUserRationOnFictionsInput, UserUncheckedCreateWithoutUserRationOnFictionsInput>
  }

  export type UserUpdateWithoutUserRationOnFictionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    fictions?: FictionUpdateManyWithoutUserNestedInput
    fav?: FavUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUpdateManyWithoutUsersNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRationOnFictionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    fictions?: FictionUncheckedUpdateManyWithoutUserNestedInput
    fav?: FavUncheckedUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUncheckedUpdateManyWithoutUsersNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserFictionStatUpsertWithoutUserRationOnFictionsInput = {
    update: XOR<UserFictionStatUpdateWithoutUserRationOnFictionsInput, UserFictionStatUncheckedUpdateWithoutUserRationOnFictionsInput>
    create: XOR<UserFictionStatCreateWithoutUserRationOnFictionsInput, UserFictionStatUncheckedCreateWithoutUserRationOnFictionsInput>
  }

  export type UserFictionStatUpdateWithoutUserRationOnFictionsInput = {
    fiction?: FictionUpdateOneRequiredWithoutUserFictionStatNestedInput
    users?: UserUpdateManyWithoutRatedFictionsNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserFictionStatUncheckedUpdateWithoutUserRationOnFictionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutRatedFictionsNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutTokensInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fictions?: FictionCreateNestedManyWithoutUserInput
    fav?: FavCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutTokensInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fictions?: FictionUncheckedCreateNestedManyWithoutUserInput
    fav?: FavUncheckedCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatUncheckedCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpsertWithoutTokensInput = {
    update: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpdateWithoutTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fictions?: FictionUpdateManyWithoutUserNestedInput
    fav?: FavUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fictions?: FictionUncheckedUpdateManyWithoutUserNestedInput
    fav?: FavUncheckedUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUncheckedUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutFavInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
    fictions?: FictionCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutFavInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    fictions?: FictionUncheckedCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatUncheckedCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutFavInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavInput, UserUncheckedCreateWithoutFavInput>
  }

  export type FictionCreateWithoutFavsInput = {
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    user: UserCreateNestedOneWithoutFictionsInput
    isAdult?: boolean | null
    comments?: CommentCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateWithoutFavsInput = {
    id?: number
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatUncheckedCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatUncheckedCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    userId: string
    isAdult?: boolean | null
    comments?: CommentUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionCreateOrConnectWithoutFavsInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutFavsInput, FictionUncheckedCreateWithoutFavsInput>
  }

  export type UserUpsertWithoutFavInput = {
    update: XOR<UserUpdateWithoutFavInput, UserUncheckedUpdateWithoutFavInput>
    create: XOR<UserCreateWithoutFavInput, UserUncheckedCreateWithoutFavInput>
  }

  export type UserUpdateWithoutFavInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    fictions?: FictionUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutFavInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    fictions?: FictionUncheckedUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUncheckedUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type FictionUpsertWithoutFavsInput = {
    update: XOR<FictionUpdateWithoutFavsInput, FictionUncheckedUpdateWithoutFavsInput>
    create: XOR<FictionCreateWithoutFavsInput, FictionUncheckedCreateWithoutFavsInput>
  }

  export type FictionUpdateWithoutFavsInput = {
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFictionsNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUpdateManyWithoutFictionNestedInput
  }

  export type FictionUncheckedUpdateWithoutFavsInput = {
    id?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUncheckedUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUncheckedUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUncheckedUpdateManyWithoutFictionNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
    fictions?: FictionCreateNestedManyWithoutUserInput
    fav?: FavCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    fictions?: FictionUncheckedCreateNestedManyWithoutUserInput
    fav?: FavUncheckedCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatUncheckedCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    fictions?: FictionUpdateManyWithoutUserNestedInput
    fav?: FavUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    fictions?: FictionUncheckedUpdateManyWithoutUserNestedInput
    fav?: FavUncheckedUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUncheckedUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
    fictions?: FictionCreateNestedManyWithoutUserInput
    fav?: FavCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    fictions?: FictionUncheckedCreateNestedManyWithoutUserInput
    fav?: FavUncheckedCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatUncheckedCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    fictions?: FictionUpdateManyWithoutUserNestedInput
    fav?: FavUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    fictions?: FictionUncheckedUpdateManyWithoutUserNestedInput
    fav?: FavUncheckedUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUncheckedUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
    fictions?: FictionCreateNestedManyWithoutUserInput
    fav?: FavCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    fictions?: FictionUncheckedCreateNestedManyWithoutUserInput
    fav?: FavUncheckedCreateNestedManyWithoutUserInput
    ratedFictions?: UserFictionStatUncheckedCreateNestedManyWithoutUsersInput
    userRationOnFictions?: UserRationOnFictionUncheckedCreateNestedManyWithoutUserInput
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type FictionCreateWithoutCommentsInput = {
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    user: UserCreateNestedOneWithoutFictionsInput
    favs?: FavCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
  }

  export type FictionUncheckedCreateWithoutCommentsInput = {
    id?: number
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    fictionStat?: FictionStatUncheckedCreateNestedOneWithoutFictionInput
    userFictionStat?: UserFictionStatUncheckedCreateNestedOneWithoutFictionInput
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    userId: string
    favs?: FavUncheckedCreateNestedManyWithoutFictionInput
    isAdult?: boolean | null
  }

  export type FictionCreateOrConnectWithoutCommentsInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutCommentsInput, FictionUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    fictions?: FictionUpdateManyWithoutUserNestedInput
    fav?: FavUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    fictions?: FictionUncheckedUpdateManyWithoutUserNestedInput
    fav?: FavUncheckedUpdateManyWithoutUserNestedInput
    ratedFictions?: UserFictionStatUncheckedUpdateManyWithoutUsersNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FictionUpsertWithoutCommentsInput = {
    update: XOR<FictionUpdateWithoutCommentsInput, FictionUncheckedUpdateWithoutCommentsInput>
    create: XOR<FictionCreateWithoutCommentsInput, FictionUncheckedCreateWithoutCommentsInput>
  }

  export type FictionUpdateWithoutCommentsInput = {
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFictionsNestedInput
    favs?: FavUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type FictionUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUncheckedUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUncheckedUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    favs?: FavUncheckedUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type CategoriesOnFictionsCreateManyFictionInput = {
    categoryId: number
  }

  export type KeywordsOnFictionsCreateManyFictionInput = {
    keywordId: number
  }

  export type FavCreateManyFictionInput = {
    id?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyFictionInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment: string
    createdById: string
  }

  export type CategoriesOnFictionsUpdateWithoutFictionInput = {
    category?: CategoryUpdateOneRequiredWithoutFictionsNestedInput
  }

  export type CategoriesOnFictionsUncheckedUpdateWithoutFictionInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnFictionsUncheckedUpdateManyWithoutCategoriesInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordsOnFictionsUpdateWithoutFictionInput = {
    keyword?: KeywordUpdateOneWithoutFictionsNestedInput
  }

  export type KeywordsOnFictionsUncheckedUpdateWithoutFictionInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordsOnFictionsUncheckedUpdateManyWithoutKeywordsInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type FavUpdateWithoutFictionInput = {
    user?: UserUpdateOneRequiredWithoutFavNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavUncheckedUpdateWithoutFictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavUncheckedUpdateManyWithoutFavsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutFictionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutFictionInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type UserRationOnFictionCreateManyUserFictionStatInput = {
    id?: number
    userId: string
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
  }

  export type UserUpdateWithoutRatedFictionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserNestedInput
    fictions?: FictionUpdateManyWithoutUserNestedInput
    fav?: FavUpdateManyWithoutUserNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRatedFictionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    fictions?: FictionUncheckedUpdateManyWithoutUserNestedInput
    fav?: FavUncheckedUpdateManyWithoutUserNestedInput
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserNestedInput
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserRationOnFictionUpdateWithoutUserFictionStatInput = {
    user?: UserUpdateOneRequiredWithoutUserRationOnFictionsNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type UserRationOnFictionUncheckedUpdateWithoutUserFictionStatInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type UserRationOnFictionUncheckedUpdateManyWithoutUserRationOnFictionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnFictionsCreateManyCategoryInput = {
    fictionId: number
  }

  export type CategoriesOnFictionsUpdateWithoutCategoryInput = {
    fiction?: FictionUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type CategoriesOnFictionsUncheckedUpdateWithoutCategoryInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnFictionsUncheckedUpdateManyWithoutFictionsInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordsOnFictionsCreateManyKeywordInput = {
    fictionId: number
  }

  export type KeywordsOnFictionsUpdateWithoutKeywordInput = {
    fiction?: FictionUpdateOneWithoutKeywordsNestedInput
  }

  export type KeywordsOnFictionsUncheckedUpdateWithoutKeywordInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordsOnFictionsUncheckedUpdateManyWithoutFictionsInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type TokenCreateManyUserInput = {
    id?: number
    payload: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FictionCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    author: string
    nationality: string
    genre: string
    startDate: Date | string
    endDate: Date | string
    currentState: string
    original: string
    platforms: string
    image: string
    synopsis: string
    characters: string
    isAdult?: boolean | null
  }

  export type FavCreateManyUserInput = {
    id?: number
    fictionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRationOnFictionCreateManyUserInput = {
    id?: number
    userFictionStatId: number
    originality: number
    verisimilitude: number
    synopsisComposition: number
    character: number
    writing: number
    value: number
    comment: string
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type CommentCreateManyCreatedByInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comment: string
    fictionId: number
  }

  export type TokenUpdateWithoutUserInput = {
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FictionUpdateWithoutUserInput = {
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    favs?: FavUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUpdateManyWithoutFictionNestedInput
  }

  export type FictionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionNestedInput
    fictionStat?: FictionStatUncheckedUpdateOneWithoutFictionNestedInput
    userFictionStat?: UserFictionStatUncheckedUpdateOneWithoutFictionNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    favs?: FavUncheckedUpdateManyWithoutFictionNestedInput
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comments?: CommentUncheckedUpdateManyWithoutFictionNestedInput
  }

  export type FictionUncheckedUpdateManyWithoutFictionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    nationality?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentState?: StringFieldUpdateOperationsInput | string
    original?: StringFieldUpdateOperationsInput | string
    platforms?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    synopsis?: StringFieldUpdateOperationsInput | string
    characters?: StringFieldUpdateOperationsInput | string
    isAdult?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type FavUpdateWithoutUserInput = {
    fiction?: FictionUpdateOneRequiredWithoutFavsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavUncheckedUpdateManyWithoutFavInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFictionStatUpdateWithoutUsersInput = {
    fiction?: FictionUpdateOneRequiredWithoutUserFictionStatNestedInput
    userRationOnFictions?: UserRationOnFictionUpdateManyWithoutUserFictionStatNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserFictionStatUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
    userRationOnFictions?: UserRationOnFictionUncheckedUpdateManyWithoutUserFictionStatNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserFictionStatUncheckedUpdateManyWithoutRatedFictionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
  }

  export type UserRationOnFictionUpdateWithoutUserInput = {
    userFictionStat?: UserFictionStatUpdateOneRequiredWithoutUserRationOnFictionsNestedInput
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type UserRationOnFictionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userFictionStatId?: IntFieldUpdateOperationsInput | number
    originality?: FloatFieldUpdateOperationsInput | number
    verisimilitude?: FloatFieldUpdateOperationsInput | number
    synopsisComposition?: FloatFieldUpdateOperationsInput | number
    character?: FloatFieldUpdateOperationsInput | number
    writing?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutCreatedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    fiction?: FictionUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: StringFieldUpdateOperationsInput | string
    fictionId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}