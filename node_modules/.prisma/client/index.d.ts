
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Fiction
 * 
 */
export type Fiction = {
  id: number
  title: string
}

/**
 * Model FictionDetail
 * 
 */
export type FictionDetail = {
  id: number
  fictionId: number
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: number
  name: string
}

/**
 * Model Keyword
 * 
 */
export type Keyword = {
  id: number
  name: string
}

/**
 * Model KeywordsOnFictions
 * 
 */
export type KeywordsOnFictions = {
  fictionId: number
  keywordId: number
}

/**
 * Model CategoriesOnFictions
 * 
 */
export type CategoriesOnFictions = {
  fictionId: number
  categoryId: number
  assignedAt: Date
  assignedBy: string
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  phone: string | null
  email: string | null
  name: string
  avatar: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Token
 * 
 */
export type Token = {
  id: number
  payload: string
  userId: number
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Fictions
 * const fictions = await prisma.fiction.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Fictions
   * const fictions = await prisma.fiction.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.fiction`: Exposes CRUD operations for the **Fiction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fictions
    * const fictions = await prisma.fiction.findMany()
    * ```
    */
  get fiction(): Prisma.FictionDelegate<GlobalReject>;

  /**
   * `prisma.fictionDetail`: Exposes CRUD operations for the **FictionDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FictionDetails
    * const fictionDetails = await prisma.fictionDetail.findMany()
    * ```
    */
  get fictionDetail(): Prisma.FictionDetailDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.keyword`: Exposes CRUD operations for the **Keyword** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keywords
    * const keywords = await prisma.keyword.findMany()
    * ```
    */
  get keyword(): Prisma.KeywordDelegate<GlobalReject>;

  /**
   * `prisma.keywordsOnFictions`: Exposes CRUD operations for the **KeywordsOnFictions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KeywordsOnFictions
    * const keywordsOnFictions = await prisma.keywordsOnFictions.findMany()
    * ```
    */
  get keywordsOnFictions(): Prisma.KeywordsOnFictionsDelegate<GlobalReject>;

  /**
   * `prisma.categoriesOnFictions`: Exposes CRUD operations for the **CategoriesOnFictions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriesOnFictions
    * const categoriesOnFictions = await prisma.categoriesOnFictions.findMany()
    * ```
    */
  get categoriesOnFictions(): Prisma.CategoriesOnFictionsDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.12.0
   * Query Engine version: 22b822189f46ef0dc5c5b503368d1bee01213980
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Fiction: 'Fiction',
    FictionDetail: 'FictionDetail',
    Category: 'Category',
    Keyword: 'Keyword',
    KeywordsOnFictions: 'KeywordsOnFictions',
    CategoriesOnFictions: 'CategoriesOnFictions',
    User: 'User',
    Token: 'Token'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FictionCountOutputType
   */


  export type FictionCountOutputType = {
    categories: number
    keywords: number
  }

  export type FictionCountOutputTypeSelect = {
    categories?: boolean
    keywords?: boolean
  }

  export type FictionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | FictionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? FictionCountOutputType
    : S extends undefined
    ? never
    : S extends FictionCountOutputTypeArgs
    ?'include' extends U
    ? FictionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof FictionCountOutputType ? FictionCountOutputType[P] : never
  } 
    : FictionCountOutputType
  : FictionCountOutputType




  // Custom InputTypes

  /**
   * FictionCountOutputType without action
   */
  export type FictionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FictionCountOutputType
     * 
    **/
    select?: FictionCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    fictions: number
  }

  export type CategoryCountOutputTypeSelect = {
    fictions?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends CategoryCountOutputTypeArgs
    ?'include' extends U
    ? CategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
    : CategoryCountOutputType
  : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type KeywordCountOutputType
   */


  export type KeywordCountOutputType = {
    fictions: number
  }

  export type KeywordCountOutputTypeSelect = {
    fictions?: boolean
  }

  export type KeywordCountOutputTypeGetPayload<
    S extends boolean | null | undefined | KeywordCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? KeywordCountOutputType
    : S extends undefined
    ? never
    : S extends KeywordCountOutputTypeArgs
    ?'include' extends U
    ? KeywordCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof KeywordCountOutputType ? KeywordCountOutputType[P] : never
  } 
    : KeywordCountOutputType
  : KeywordCountOutputType




  // Custom InputTypes

  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the KeywordCountOutputType
     * 
    **/
    select?: KeywordCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    tokens: number
  }

  export type UserCountOutputTypeSelect = {
    tokens?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Fiction
   */


  export type AggregateFiction = {
    _count: FictionCountAggregateOutputType | null
    _avg: FictionAvgAggregateOutputType | null
    _sum: FictionSumAggregateOutputType | null
    _min: FictionMinAggregateOutputType | null
    _max: FictionMaxAggregateOutputType | null
  }

  export type FictionAvgAggregateOutputType = {
    id: number | null
  }

  export type FictionSumAggregateOutputType = {
    id: number | null
  }

  export type FictionMinAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type FictionMaxAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type FictionCountAggregateOutputType = {
    id: number
    title: number
    _all: number
  }


  export type FictionAvgAggregateInputType = {
    id?: true
  }

  export type FictionSumAggregateInputType = {
    id?: true
  }

  export type FictionMinAggregateInputType = {
    id?: true
    title?: true
  }

  export type FictionMaxAggregateInputType = {
    id?: true
    title?: true
  }

  export type FictionCountAggregateInputType = {
    id?: true
    title?: true
    _all?: true
  }

  export type FictionAggregateArgs = {
    /**
     * Filter which Fiction to aggregate.
     * 
    **/
    where?: FictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fictions to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fictions
    **/
    _count?: true | FictionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FictionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FictionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FictionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FictionMaxAggregateInputType
  }

  export type GetFictionAggregateType<T extends FictionAggregateArgs> = {
        [P in keyof T & keyof AggregateFiction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiction[P]>
      : GetScalarType<T[P], AggregateFiction[P]>
  }




  export type FictionGroupByArgs = {
    where?: FictionWhereInput
    orderBy?: Enumerable<FictionOrderByWithAggregationInput>
    by: Array<FictionScalarFieldEnum>
    having?: FictionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FictionCountAggregateInputType | true
    _avg?: FictionAvgAggregateInputType
    _sum?: FictionSumAggregateInputType
    _min?: FictionMinAggregateInputType
    _max?: FictionMaxAggregateInputType
  }


  export type FictionGroupByOutputType = {
    id: number
    title: string
    _count: FictionCountAggregateOutputType | null
    _avg: FictionAvgAggregateOutputType | null
    _sum: FictionSumAggregateOutputType | null
    _min: FictionMinAggregateOutputType | null
    _max: FictionMaxAggregateOutputType | null
  }

  type GetFictionGroupByPayload<T extends FictionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FictionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FictionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FictionGroupByOutputType[P]>
            : GetScalarType<T[P], FictionGroupByOutputType[P]>
        }
      >
    >


  export type FictionSelect = {
    id?: boolean
    title?: boolean
    fictiondetail?: boolean | FictionDetailArgs
    categories?: boolean | CategoriesOnFictionsFindManyArgs
    keywords?: boolean | KeywordsOnFictionsFindManyArgs
    _count?: boolean | FictionCountOutputTypeArgs
  }

  export type FictionInclude = {
    fictiondetail?: boolean | FictionDetailArgs
    categories?: boolean | CategoriesOnFictionsFindManyArgs
    keywords?: boolean | KeywordsOnFictionsFindManyArgs
    _count?: boolean | FictionCountOutputTypeArgs
  }

  export type FictionGetPayload<
    S extends boolean | null | undefined | FictionArgs,
    U = keyof S
      > = S extends true
        ? Fiction
    : S extends undefined
    ? never
    : S extends FictionArgs | FictionFindManyArgs
    ?'include' extends U
    ? Fiction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fictiondetail' ? FictionDetailGetPayload<S['include'][P]> | null :
        P extends 'categories' ? Array < CategoriesOnFictionsGetPayload<S['include'][P]>>  :
        P extends 'keywords' ? Array < KeywordsOnFictionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? FictionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fictiondetail' ? FictionDetailGetPayload<S['select'][P]> | null :
        P extends 'categories' ? Array < CategoriesOnFictionsGetPayload<S['select'][P]>>  :
        P extends 'keywords' ? Array < KeywordsOnFictionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? FictionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Fiction ? Fiction[P] : never
  } 
    : Fiction
  : Fiction


  type FictionCountArgs = Merge<
    Omit<FictionFindManyArgs, 'select' | 'include'> & {
      select?: FictionCountAggregateInputType | true
    }
  >

  export interface FictionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Fiction that matches the filter.
     * @param {FictionFindUniqueArgs} args - Arguments to find a Fiction
     * @example
     * // Get one Fiction
     * const fiction = await prisma.fiction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FictionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FictionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Fiction'> extends True ? CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>> : CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>

    /**
     * Find the first Fiction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionFindFirstArgs} args - Arguments to find a Fiction
     * @example
     * // Get one Fiction
     * const fiction = await prisma.fiction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FictionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FictionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Fiction'> extends True ? CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>> : CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>

    /**
     * Find zero or more Fictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fictions
     * const fictions = await prisma.fiction.findMany()
     * 
     * // Get first 10 Fictions
     * const fictions = await prisma.fiction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fictionWithIdOnly = await prisma.fiction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FictionFindManyArgs>(
      args?: SelectSubset<T, FictionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Fiction>>, PrismaPromise<Array<FictionGetPayload<T>>>>

    /**
     * Create a Fiction.
     * @param {FictionCreateArgs} args - Arguments to create a Fiction.
     * @example
     * // Create one Fiction
     * const Fiction = await prisma.fiction.create({
     *   data: {
     *     // ... data to create a Fiction
     *   }
     * })
     * 
    **/
    create<T extends FictionCreateArgs>(
      args: SelectSubset<T, FictionCreateArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Create many Fictions.
     *     @param {FictionCreateManyArgs} args - Arguments to create many Fictions.
     *     @example
     *     // Create many Fictions
     *     const fiction = await prisma.fiction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FictionCreateManyArgs>(
      args?: SelectSubset<T, FictionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Fiction.
     * @param {FictionDeleteArgs} args - Arguments to delete one Fiction.
     * @example
     * // Delete one Fiction
     * const Fiction = await prisma.fiction.delete({
     *   where: {
     *     // ... filter to delete one Fiction
     *   }
     * })
     * 
    **/
    delete<T extends FictionDeleteArgs>(
      args: SelectSubset<T, FictionDeleteArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Update one Fiction.
     * @param {FictionUpdateArgs} args - Arguments to update one Fiction.
     * @example
     * // Update one Fiction
     * const fiction = await prisma.fiction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FictionUpdateArgs>(
      args: SelectSubset<T, FictionUpdateArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Delete zero or more Fictions.
     * @param {FictionDeleteManyArgs} args - Arguments to filter Fictions to delete.
     * @example
     * // Delete a few Fictions
     * const { count } = await prisma.fiction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FictionDeleteManyArgs>(
      args?: SelectSubset<T, FictionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fictions
     * const fiction = await prisma.fiction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FictionUpdateManyArgs>(
      args: SelectSubset<T, FictionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Fiction.
     * @param {FictionUpsertArgs} args - Arguments to update or create a Fiction.
     * @example
     * // Update or create a Fiction
     * const fiction = await prisma.fiction.upsert({
     *   create: {
     *     // ... data to create a Fiction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fiction we want to update
     *   }
     * })
    **/
    upsert<T extends FictionUpsertArgs>(
      args: SelectSubset<T, FictionUpsertArgs>
    ): CheckSelect<T, Prisma__FictionClient<Fiction>, Prisma__FictionClient<FictionGetPayload<T>>>

    /**
     * Count the number of Fictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionCountArgs} args - Arguments to filter Fictions to count.
     * @example
     * // Count the number of Fictions
     * const count = await prisma.fiction.count({
     *   where: {
     *     // ... the filter for the Fictions we want to count
     *   }
     * })
    **/
    count<T extends FictionCountArgs>(
      args?: Subset<T, FictionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FictionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fiction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FictionAggregateArgs>(args: Subset<T, FictionAggregateArgs>): PrismaPromise<GetFictionAggregateType<T>>

    /**
     * Group by Fiction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FictionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FictionGroupByArgs['orderBy'] }
        : { orderBy?: FictionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FictionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFictionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fiction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FictionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fictiondetail<T extends FictionDetailArgs = {}>(args?: Subset<T, FictionDetailArgs>): CheckSelect<T, Prisma__FictionDetailClient<FictionDetail | null >, Prisma__FictionDetailClient<FictionDetailGetPayload<T> | null >>;

    categories<T extends CategoriesOnFictionsFindManyArgs = {}>(args?: Subset<T, CategoriesOnFictionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CategoriesOnFictions>>, PrismaPromise<Array<CategoriesOnFictionsGetPayload<T>>>>;

    keywords<T extends KeywordsOnFictionsFindManyArgs = {}>(args?: Subset<T, KeywordsOnFictionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KeywordsOnFictions>>, PrismaPromise<Array<KeywordsOnFictionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Fiction findUnique
   */
  export type FictionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * Throw an Error if a Fiction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Fiction to fetch.
     * 
    **/
    where: FictionWhereUniqueInput
  }


  /**
   * Fiction findFirst
   */
  export type FictionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * Throw an Error if a Fiction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Fiction to fetch.
     * 
    **/
    where?: FictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fictions to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fictions.
     * 
    **/
    cursor?: FictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fictions.
     * 
    **/
    distinct?: Enumerable<FictionScalarFieldEnum>
  }


  /**
   * Fiction findMany
   */
  export type FictionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * Filter, which Fictions to fetch.
     * 
    **/
    where?: FictionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fictions to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fictions.
     * 
    **/
    cursor?: FictionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fictions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FictionScalarFieldEnum>
  }


  /**
   * Fiction create
   */
  export type FictionCreateArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * The data needed to create a Fiction.
     * 
    **/
    data: XOR<FictionCreateInput, FictionUncheckedCreateInput>
  }


  /**
   * Fiction createMany
   */
  export type FictionCreateManyArgs = {
    /**
     * The data used to create many Fictions.
     * 
    **/
    data: Enumerable<FictionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Fiction update
   */
  export type FictionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * The data needed to update a Fiction.
     * 
    **/
    data: XOR<FictionUpdateInput, FictionUncheckedUpdateInput>
    /**
     * Choose, which Fiction to update.
     * 
    **/
    where: FictionWhereUniqueInput
  }


  /**
   * Fiction updateMany
   */
  export type FictionUpdateManyArgs = {
    /**
     * The data used to update Fictions.
     * 
    **/
    data: XOR<FictionUpdateManyMutationInput, FictionUncheckedUpdateManyInput>
    /**
     * Filter which Fictions to update
     * 
    **/
    where?: FictionWhereInput
  }


  /**
   * Fiction upsert
   */
  export type FictionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * The filter to search for the Fiction to update in case it exists.
     * 
    **/
    where: FictionWhereUniqueInput
    /**
     * In case the Fiction found by the `where` argument doesn't exist, create a new Fiction with this data.
     * 
    **/
    create: XOR<FictionCreateInput, FictionUncheckedCreateInput>
    /**
     * In case the Fiction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FictionUpdateInput, FictionUncheckedUpdateInput>
  }


  /**
   * Fiction delete
   */
  export type FictionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
    /**
     * Filter which Fiction to delete.
     * 
    **/
    where: FictionWhereUniqueInput
  }


  /**
   * Fiction deleteMany
   */
  export type FictionDeleteManyArgs = {
    /**
     * Filter which Fictions to delete
     * 
    **/
    where?: FictionWhereInput
  }


  /**
   * Fiction without action
   */
  export type FictionArgs = {
    /**
     * Select specific fields to fetch from the Fiction
     * 
    **/
    select?: FictionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionInclude | null
  }



  /**
   * Model FictionDetail
   */


  export type AggregateFictionDetail = {
    _count: FictionDetailCountAggregateOutputType | null
    _avg: FictionDetailAvgAggregateOutputType | null
    _sum: FictionDetailSumAggregateOutputType | null
    _min: FictionDetailMinAggregateOutputType | null
    _max: FictionDetailMaxAggregateOutputType | null
  }

  export type FictionDetailAvgAggregateOutputType = {
    id: number | null
    fictionId: number | null
  }

  export type FictionDetailSumAggregateOutputType = {
    id: number | null
    fictionId: number | null
  }

  export type FictionDetailMinAggregateOutputType = {
    id: number | null
    fictionId: number | null
  }

  export type FictionDetailMaxAggregateOutputType = {
    id: number | null
    fictionId: number | null
  }

  export type FictionDetailCountAggregateOutputType = {
    id: number
    fictionId: number
    _all: number
  }


  export type FictionDetailAvgAggregateInputType = {
    id?: true
    fictionId?: true
  }

  export type FictionDetailSumAggregateInputType = {
    id?: true
    fictionId?: true
  }

  export type FictionDetailMinAggregateInputType = {
    id?: true
    fictionId?: true
  }

  export type FictionDetailMaxAggregateInputType = {
    id?: true
    fictionId?: true
  }

  export type FictionDetailCountAggregateInputType = {
    id?: true
    fictionId?: true
    _all?: true
  }

  export type FictionDetailAggregateArgs = {
    /**
     * Filter which FictionDetail to aggregate.
     * 
    **/
    where?: FictionDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FictionDetails to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionDetailOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FictionDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FictionDetails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FictionDetails.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FictionDetails
    **/
    _count?: true | FictionDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FictionDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FictionDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FictionDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FictionDetailMaxAggregateInputType
  }

  export type GetFictionDetailAggregateType<T extends FictionDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateFictionDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFictionDetail[P]>
      : GetScalarType<T[P], AggregateFictionDetail[P]>
  }




  export type FictionDetailGroupByArgs = {
    where?: FictionDetailWhereInput
    orderBy?: Enumerable<FictionDetailOrderByWithAggregationInput>
    by: Array<FictionDetailScalarFieldEnum>
    having?: FictionDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FictionDetailCountAggregateInputType | true
    _avg?: FictionDetailAvgAggregateInputType
    _sum?: FictionDetailSumAggregateInputType
    _min?: FictionDetailMinAggregateInputType
    _max?: FictionDetailMaxAggregateInputType
  }


  export type FictionDetailGroupByOutputType = {
    id: number
    fictionId: number
    _count: FictionDetailCountAggregateOutputType | null
    _avg: FictionDetailAvgAggregateOutputType | null
    _sum: FictionDetailSumAggregateOutputType | null
    _min: FictionDetailMinAggregateOutputType | null
    _max: FictionDetailMaxAggregateOutputType | null
  }

  type GetFictionDetailGroupByPayload<T extends FictionDetailGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FictionDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FictionDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FictionDetailGroupByOutputType[P]>
            : GetScalarType<T[P], FictionDetailGroupByOutputType[P]>
        }
      >
    >


  export type FictionDetailSelect = {
    id?: boolean
    fiction?: boolean | FictionArgs
    fictionId?: boolean
  }

  export type FictionDetailInclude = {
    fiction?: boolean | FictionArgs
  }

  export type FictionDetailGetPayload<
    S extends boolean | null | undefined | FictionDetailArgs,
    U = keyof S
      > = S extends true
        ? FictionDetail
    : S extends undefined
    ? never
    : S extends FictionDetailArgs | FictionDetailFindManyArgs
    ?'include' extends U
    ? FictionDetail  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fiction' ? FictionGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fiction' ? FictionGetPayload<S['select'][P]> :  P extends keyof FictionDetail ? FictionDetail[P] : never
  } 
    : FictionDetail
  : FictionDetail


  type FictionDetailCountArgs = Merge<
    Omit<FictionDetailFindManyArgs, 'select' | 'include'> & {
      select?: FictionDetailCountAggregateInputType | true
    }
  >

  export interface FictionDetailDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one FictionDetail that matches the filter.
     * @param {FictionDetailFindUniqueArgs} args - Arguments to find a FictionDetail
     * @example
     * // Get one FictionDetail
     * const fictionDetail = await prisma.fictionDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FictionDetailFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FictionDetailFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FictionDetail'> extends True ? CheckSelect<T, Prisma__FictionDetailClient<FictionDetail>, Prisma__FictionDetailClient<FictionDetailGetPayload<T>>> : CheckSelect<T, Prisma__FictionDetailClient<FictionDetail | null >, Prisma__FictionDetailClient<FictionDetailGetPayload<T> | null >>

    /**
     * Find the first FictionDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionDetailFindFirstArgs} args - Arguments to find a FictionDetail
     * @example
     * // Get one FictionDetail
     * const fictionDetail = await prisma.fictionDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FictionDetailFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FictionDetailFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FictionDetail'> extends True ? CheckSelect<T, Prisma__FictionDetailClient<FictionDetail>, Prisma__FictionDetailClient<FictionDetailGetPayload<T>>> : CheckSelect<T, Prisma__FictionDetailClient<FictionDetail | null >, Prisma__FictionDetailClient<FictionDetailGetPayload<T> | null >>

    /**
     * Find zero or more FictionDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FictionDetails
     * const fictionDetails = await prisma.fictionDetail.findMany()
     * 
     * // Get first 10 FictionDetails
     * const fictionDetails = await prisma.fictionDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fictionDetailWithIdOnly = await prisma.fictionDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FictionDetailFindManyArgs>(
      args?: SelectSubset<T, FictionDetailFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<FictionDetail>>, PrismaPromise<Array<FictionDetailGetPayload<T>>>>

    /**
     * Create a FictionDetail.
     * @param {FictionDetailCreateArgs} args - Arguments to create a FictionDetail.
     * @example
     * // Create one FictionDetail
     * const FictionDetail = await prisma.fictionDetail.create({
     *   data: {
     *     // ... data to create a FictionDetail
     *   }
     * })
     * 
    **/
    create<T extends FictionDetailCreateArgs>(
      args: SelectSubset<T, FictionDetailCreateArgs>
    ): CheckSelect<T, Prisma__FictionDetailClient<FictionDetail>, Prisma__FictionDetailClient<FictionDetailGetPayload<T>>>

    /**
     * Create many FictionDetails.
     *     @param {FictionDetailCreateManyArgs} args - Arguments to create many FictionDetails.
     *     @example
     *     // Create many FictionDetails
     *     const fictionDetail = await prisma.fictionDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FictionDetailCreateManyArgs>(
      args?: SelectSubset<T, FictionDetailCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FictionDetail.
     * @param {FictionDetailDeleteArgs} args - Arguments to delete one FictionDetail.
     * @example
     * // Delete one FictionDetail
     * const FictionDetail = await prisma.fictionDetail.delete({
     *   where: {
     *     // ... filter to delete one FictionDetail
     *   }
     * })
     * 
    **/
    delete<T extends FictionDetailDeleteArgs>(
      args: SelectSubset<T, FictionDetailDeleteArgs>
    ): CheckSelect<T, Prisma__FictionDetailClient<FictionDetail>, Prisma__FictionDetailClient<FictionDetailGetPayload<T>>>

    /**
     * Update one FictionDetail.
     * @param {FictionDetailUpdateArgs} args - Arguments to update one FictionDetail.
     * @example
     * // Update one FictionDetail
     * const fictionDetail = await prisma.fictionDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FictionDetailUpdateArgs>(
      args: SelectSubset<T, FictionDetailUpdateArgs>
    ): CheckSelect<T, Prisma__FictionDetailClient<FictionDetail>, Prisma__FictionDetailClient<FictionDetailGetPayload<T>>>

    /**
     * Delete zero or more FictionDetails.
     * @param {FictionDetailDeleteManyArgs} args - Arguments to filter FictionDetails to delete.
     * @example
     * // Delete a few FictionDetails
     * const { count } = await prisma.fictionDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FictionDetailDeleteManyArgs>(
      args?: SelectSubset<T, FictionDetailDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FictionDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FictionDetails
     * const fictionDetail = await prisma.fictionDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FictionDetailUpdateManyArgs>(
      args: SelectSubset<T, FictionDetailUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FictionDetail.
     * @param {FictionDetailUpsertArgs} args - Arguments to update or create a FictionDetail.
     * @example
     * // Update or create a FictionDetail
     * const fictionDetail = await prisma.fictionDetail.upsert({
     *   create: {
     *     // ... data to create a FictionDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FictionDetail we want to update
     *   }
     * })
    **/
    upsert<T extends FictionDetailUpsertArgs>(
      args: SelectSubset<T, FictionDetailUpsertArgs>
    ): CheckSelect<T, Prisma__FictionDetailClient<FictionDetail>, Prisma__FictionDetailClient<FictionDetailGetPayload<T>>>

    /**
     * Count the number of FictionDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionDetailCountArgs} args - Arguments to filter FictionDetails to count.
     * @example
     * // Count the number of FictionDetails
     * const count = await prisma.fictionDetail.count({
     *   where: {
     *     // ... the filter for the FictionDetails we want to count
     *   }
     * })
    **/
    count<T extends FictionDetailCountArgs>(
      args?: Subset<T, FictionDetailCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FictionDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FictionDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FictionDetailAggregateArgs>(args: Subset<T, FictionDetailAggregateArgs>): PrismaPromise<GetFictionDetailAggregateType<T>>

    /**
     * Group by FictionDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FictionDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FictionDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FictionDetailGroupByArgs['orderBy'] }
        : { orderBy?: FictionDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FictionDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFictionDetailGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for FictionDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FictionDetailClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fiction<T extends FictionArgs = {}>(args?: Subset<T, FictionArgs>): CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * FictionDetail findUnique
   */
  export type FictionDetailFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the FictionDetail
     * 
    **/
    select?: FictionDetailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionDetailInclude | null
    /**
     * Throw an Error if a FictionDetail can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FictionDetail to fetch.
     * 
    **/
    where: FictionDetailWhereUniqueInput
  }


  /**
   * FictionDetail findFirst
   */
  export type FictionDetailFindFirstArgs = {
    /**
     * Select specific fields to fetch from the FictionDetail
     * 
    **/
    select?: FictionDetailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionDetailInclude | null
    /**
     * Throw an Error if a FictionDetail can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FictionDetail to fetch.
     * 
    **/
    where?: FictionDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FictionDetails to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionDetailOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FictionDetails.
     * 
    **/
    cursor?: FictionDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FictionDetails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FictionDetails.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FictionDetails.
     * 
    **/
    distinct?: Enumerable<FictionDetailScalarFieldEnum>
  }


  /**
   * FictionDetail findMany
   */
  export type FictionDetailFindManyArgs = {
    /**
     * Select specific fields to fetch from the FictionDetail
     * 
    **/
    select?: FictionDetailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionDetailInclude | null
    /**
     * Filter, which FictionDetails to fetch.
     * 
    **/
    where?: FictionDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FictionDetails to fetch.
     * 
    **/
    orderBy?: Enumerable<FictionDetailOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FictionDetails.
     * 
    **/
    cursor?: FictionDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FictionDetails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FictionDetails.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FictionDetailScalarFieldEnum>
  }


  /**
   * FictionDetail create
   */
  export type FictionDetailCreateArgs = {
    /**
     * Select specific fields to fetch from the FictionDetail
     * 
    **/
    select?: FictionDetailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionDetailInclude | null
    /**
     * The data needed to create a FictionDetail.
     * 
    **/
    data: XOR<FictionDetailCreateInput, FictionDetailUncheckedCreateInput>
  }


  /**
   * FictionDetail createMany
   */
  export type FictionDetailCreateManyArgs = {
    /**
     * The data used to create many FictionDetails.
     * 
    **/
    data: Enumerable<FictionDetailCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FictionDetail update
   */
  export type FictionDetailUpdateArgs = {
    /**
     * Select specific fields to fetch from the FictionDetail
     * 
    **/
    select?: FictionDetailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionDetailInclude | null
    /**
     * The data needed to update a FictionDetail.
     * 
    **/
    data: XOR<FictionDetailUpdateInput, FictionDetailUncheckedUpdateInput>
    /**
     * Choose, which FictionDetail to update.
     * 
    **/
    where: FictionDetailWhereUniqueInput
  }


  /**
   * FictionDetail updateMany
   */
  export type FictionDetailUpdateManyArgs = {
    /**
     * The data used to update FictionDetails.
     * 
    **/
    data: XOR<FictionDetailUpdateManyMutationInput, FictionDetailUncheckedUpdateManyInput>
    /**
     * Filter which FictionDetails to update
     * 
    **/
    where?: FictionDetailWhereInput
  }


  /**
   * FictionDetail upsert
   */
  export type FictionDetailUpsertArgs = {
    /**
     * Select specific fields to fetch from the FictionDetail
     * 
    **/
    select?: FictionDetailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionDetailInclude | null
    /**
     * The filter to search for the FictionDetail to update in case it exists.
     * 
    **/
    where: FictionDetailWhereUniqueInput
    /**
     * In case the FictionDetail found by the `where` argument doesn't exist, create a new FictionDetail with this data.
     * 
    **/
    create: XOR<FictionDetailCreateInput, FictionDetailUncheckedCreateInput>
    /**
     * In case the FictionDetail was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FictionDetailUpdateInput, FictionDetailUncheckedUpdateInput>
  }


  /**
   * FictionDetail delete
   */
  export type FictionDetailDeleteArgs = {
    /**
     * Select specific fields to fetch from the FictionDetail
     * 
    **/
    select?: FictionDetailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionDetailInclude | null
    /**
     * Filter which FictionDetail to delete.
     * 
    **/
    where: FictionDetailWhereUniqueInput
  }


  /**
   * FictionDetail deleteMany
   */
  export type FictionDetailDeleteManyArgs = {
    /**
     * Filter which FictionDetails to delete
     * 
    **/
    where?: FictionDetailWhereInput
  }


  /**
   * FictionDetail without action
   */
  export type FictionDetailArgs = {
    /**
     * Select specific fields to fetch from the FictionDetail
     * 
    **/
    select?: FictionDetailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FictionDetailInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    name?: boolean
    fictions?: boolean | CategoriesOnFictionsFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryInclude = {
    fictions?: boolean | CategoriesOnFictionsFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fictions' ? Array < CategoriesOnFictionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fictions' ? Array < CategoriesOnFictionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fictions<T extends CategoriesOnFictionsFindManyArgs = {}>(args?: Subset<T, CategoriesOnFictionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CategoriesOnFictions>>, PrismaPromise<Array<CategoriesOnFictionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Keyword
   */


  export type AggregateKeyword = {
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  export type KeywordAvgAggregateOutputType = {
    id: number | null
  }

  export type KeywordSumAggregateOutputType = {
    id: number | null
  }

  export type KeywordMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type KeywordMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type KeywordCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type KeywordAvgAggregateInputType = {
    id?: true
  }

  export type KeywordSumAggregateInputType = {
    id?: true
  }

  export type KeywordMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type KeywordMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type KeywordCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type KeywordAggregateArgs = {
    /**
     * Filter which Keyword to aggregate.
     * 
    **/
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keywords
    **/
    _count?: true | KeywordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeywordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeywordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeywordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeywordMaxAggregateInputType
  }

  export type GetKeywordAggregateType<T extends KeywordAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyword[P]>
      : GetScalarType<T[P], AggregateKeyword[P]>
  }




  export type KeywordGroupByArgs = {
    where?: KeywordWhereInput
    orderBy?: Enumerable<KeywordOrderByWithAggregationInput>
    by: Array<KeywordScalarFieldEnum>
    having?: KeywordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeywordCountAggregateInputType | true
    _avg?: KeywordAvgAggregateInputType
    _sum?: KeywordSumAggregateInputType
    _min?: KeywordMinAggregateInputType
    _max?: KeywordMaxAggregateInputType
  }


  export type KeywordGroupByOutputType = {
    id: number
    name: string
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  type GetKeywordGroupByPayload<T extends KeywordGroupByArgs> = PrismaPromise<
    Array<
      PickArray<KeywordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeywordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeywordGroupByOutputType[P]>
            : GetScalarType<T[P], KeywordGroupByOutputType[P]>
        }
      >
    >


  export type KeywordSelect = {
    id?: boolean
    name?: boolean
    fictions?: boolean | KeywordsOnFictionsFindManyArgs
    _count?: boolean | KeywordCountOutputTypeArgs
  }

  export type KeywordInclude = {
    fictions?: boolean | KeywordsOnFictionsFindManyArgs
    _count?: boolean | KeywordCountOutputTypeArgs
  }

  export type KeywordGetPayload<
    S extends boolean | null | undefined | KeywordArgs,
    U = keyof S
      > = S extends true
        ? Keyword
    : S extends undefined
    ? never
    : S extends KeywordArgs | KeywordFindManyArgs
    ?'include' extends U
    ? Keyword  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fictions' ? Array < KeywordsOnFictionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? KeywordCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fictions' ? Array < KeywordsOnFictionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? KeywordCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Keyword ? Keyword[P] : never
  } 
    : Keyword
  : Keyword


  type KeywordCountArgs = Merge<
    Omit<KeywordFindManyArgs, 'select' | 'include'> & {
      select?: KeywordCountAggregateInputType | true
    }
  >

  export interface KeywordDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Keyword that matches the filter.
     * @param {KeywordFindUniqueArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KeywordFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KeywordFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Keyword'> extends True ? CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>> : CheckSelect<T, Prisma__KeywordClient<Keyword | null >, Prisma__KeywordClient<KeywordGetPayload<T> | null >>

    /**
     * Find the first Keyword that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindFirstArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KeywordFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KeywordFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Keyword'> extends True ? CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>> : CheckSelect<T, Prisma__KeywordClient<Keyword | null >, Prisma__KeywordClient<KeywordGetPayload<T> | null >>

    /**
     * Find zero or more Keywords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keywords
     * const keywords = await prisma.keyword.findMany()
     * 
     * // Get first 10 Keywords
     * const keywords = await prisma.keyword.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keywordWithIdOnly = await prisma.keyword.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KeywordFindManyArgs>(
      args?: SelectSubset<T, KeywordFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Keyword>>, PrismaPromise<Array<KeywordGetPayload<T>>>>

    /**
     * Create a Keyword.
     * @param {KeywordCreateArgs} args - Arguments to create a Keyword.
     * @example
     * // Create one Keyword
     * const Keyword = await prisma.keyword.create({
     *   data: {
     *     // ... data to create a Keyword
     *   }
     * })
     * 
    **/
    create<T extends KeywordCreateArgs>(
      args: SelectSubset<T, KeywordCreateArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Create many Keywords.
     *     @param {KeywordCreateManyArgs} args - Arguments to create many Keywords.
     *     @example
     *     // Create many Keywords
     *     const keyword = await prisma.keyword.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KeywordCreateManyArgs>(
      args?: SelectSubset<T, KeywordCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Keyword.
     * @param {KeywordDeleteArgs} args - Arguments to delete one Keyword.
     * @example
     * // Delete one Keyword
     * const Keyword = await prisma.keyword.delete({
     *   where: {
     *     // ... filter to delete one Keyword
     *   }
     * })
     * 
    **/
    delete<T extends KeywordDeleteArgs>(
      args: SelectSubset<T, KeywordDeleteArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Update one Keyword.
     * @param {KeywordUpdateArgs} args - Arguments to update one Keyword.
     * @example
     * // Update one Keyword
     * const keyword = await prisma.keyword.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KeywordUpdateArgs>(
      args: SelectSubset<T, KeywordUpdateArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Delete zero or more Keywords.
     * @param {KeywordDeleteManyArgs} args - Arguments to filter Keywords to delete.
     * @example
     * // Delete a few Keywords
     * const { count } = await prisma.keyword.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KeywordDeleteManyArgs>(
      args?: SelectSubset<T, KeywordDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keywords
     * const keyword = await prisma.keyword.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KeywordUpdateManyArgs>(
      args: SelectSubset<T, KeywordUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Keyword.
     * @param {KeywordUpsertArgs} args - Arguments to update or create a Keyword.
     * @example
     * // Update or create a Keyword
     * const keyword = await prisma.keyword.upsert({
     *   create: {
     *     // ... data to create a Keyword
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Keyword we want to update
     *   }
     * })
    **/
    upsert<T extends KeywordUpsertArgs>(
      args: SelectSubset<T, KeywordUpsertArgs>
    ): CheckSelect<T, Prisma__KeywordClient<Keyword>, Prisma__KeywordClient<KeywordGetPayload<T>>>

    /**
     * Count the number of Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordCountArgs} args - Arguments to filter Keywords to count.
     * @example
     * // Count the number of Keywords
     * const count = await prisma.keyword.count({
     *   where: {
     *     // ... the filter for the Keywords we want to count
     *   }
     * })
    **/
    count<T extends KeywordCountArgs>(
      args?: Subset<T, KeywordCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeywordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeywordAggregateArgs>(args: Subset<T, KeywordAggregateArgs>): PrismaPromise<GetKeywordAggregateType<T>>

    /**
     * Group by Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeywordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeywordGroupByArgs['orderBy'] }
        : { orderBy?: KeywordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeywordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Keyword.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KeywordClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fictions<T extends KeywordsOnFictionsFindManyArgs = {}>(args?: Subset<T, KeywordsOnFictionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<KeywordsOnFictions>>, PrismaPromise<Array<KeywordsOnFictionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Keyword findUnique
   */
  export type KeywordFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Throw an Error if a Keyword can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Keyword to fetch.
     * 
    **/
    where: KeywordWhereUniqueInput
  }


  /**
   * Keyword findFirst
   */
  export type KeywordFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Throw an Error if a Keyword can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Keyword to fetch.
     * 
    **/
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keywords.
     * 
    **/
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keywords.
     * 
    **/
    distinct?: Enumerable<KeywordScalarFieldEnum>
  }


  /**
   * Keyword findMany
   */
  export type KeywordFindManyArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter, which Keywords to fetch.
     * 
    **/
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keywords.
     * 
    **/
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KeywordScalarFieldEnum>
  }


  /**
   * Keyword create
   */
  export type KeywordCreateArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * The data needed to create a Keyword.
     * 
    **/
    data: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
  }


  /**
   * Keyword createMany
   */
  export type KeywordCreateManyArgs = {
    /**
     * The data used to create many Keywords.
     * 
    **/
    data: Enumerable<KeywordCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Keyword update
   */
  export type KeywordUpdateArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * The data needed to update a Keyword.
     * 
    **/
    data: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
    /**
     * Choose, which Keyword to update.
     * 
    **/
    where: KeywordWhereUniqueInput
  }


  /**
   * Keyword updateMany
   */
  export type KeywordUpdateManyArgs = {
    /**
     * The data used to update Keywords.
     * 
    **/
    data: XOR<KeywordUpdateManyMutationInput, KeywordUncheckedUpdateManyInput>
    /**
     * Filter which Keywords to update
     * 
    **/
    where?: KeywordWhereInput
  }


  /**
   * Keyword upsert
   */
  export type KeywordUpsertArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * The filter to search for the Keyword to update in case it exists.
     * 
    **/
    where: KeywordWhereUniqueInput
    /**
     * In case the Keyword found by the `where` argument doesn't exist, create a new Keyword with this data.
     * 
    **/
    create: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
    /**
     * In case the Keyword was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
  }


  /**
   * Keyword delete
   */
  export type KeywordDeleteArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
    /**
     * Filter which Keyword to delete.
     * 
    **/
    where: KeywordWhereUniqueInput
  }


  /**
   * Keyword deleteMany
   */
  export type KeywordDeleteManyArgs = {
    /**
     * Filter which Keywords to delete
     * 
    **/
    where?: KeywordWhereInput
  }


  /**
   * Keyword without action
   */
  export type KeywordArgs = {
    /**
     * Select specific fields to fetch from the Keyword
     * 
    **/
    select?: KeywordSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordInclude | null
  }



  /**
   * Model KeywordsOnFictions
   */


  export type AggregateKeywordsOnFictions = {
    _count: KeywordsOnFictionsCountAggregateOutputType | null
    _avg: KeywordsOnFictionsAvgAggregateOutputType | null
    _sum: KeywordsOnFictionsSumAggregateOutputType | null
    _min: KeywordsOnFictionsMinAggregateOutputType | null
    _max: KeywordsOnFictionsMaxAggregateOutputType | null
  }

  export type KeywordsOnFictionsAvgAggregateOutputType = {
    fictionId: number | null
    keywordId: number | null
  }

  export type KeywordsOnFictionsSumAggregateOutputType = {
    fictionId: number | null
    keywordId: number | null
  }

  export type KeywordsOnFictionsMinAggregateOutputType = {
    fictionId: number | null
    keywordId: number | null
  }

  export type KeywordsOnFictionsMaxAggregateOutputType = {
    fictionId: number | null
    keywordId: number | null
  }

  export type KeywordsOnFictionsCountAggregateOutputType = {
    fictionId: number
    keywordId: number
    _all: number
  }


  export type KeywordsOnFictionsAvgAggregateInputType = {
    fictionId?: true
    keywordId?: true
  }

  export type KeywordsOnFictionsSumAggregateInputType = {
    fictionId?: true
    keywordId?: true
  }

  export type KeywordsOnFictionsMinAggregateInputType = {
    fictionId?: true
    keywordId?: true
  }

  export type KeywordsOnFictionsMaxAggregateInputType = {
    fictionId?: true
    keywordId?: true
  }

  export type KeywordsOnFictionsCountAggregateInputType = {
    fictionId?: true
    keywordId?: true
    _all?: true
  }

  export type KeywordsOnFictionsAggregateArgs = {
    /**
     * Filter which KeywordsOnFictions to aggregate.
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordsOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordsOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: KeywordsOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordsOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordsOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KeywordsOnFictions
    **/
    _count?: true | KeywordsOnFictionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeywordsOnFictionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeywordsOnFictionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeywordsOnFictionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeywordsOnFictionsMaxAggregateInputType
  }

  export type GetKeywordsOnFictionsAggregateType<T extends KeywordsOnFictionsAggregateArgs> = {
        [P in keyof T & keyof AggregateKeywordsOnFictions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeywordsOnFictions[P]>
      : GetScalarType<T[P], AggregateKeywordsOnFictions[P]>
  }




  export type KeywordsOnFictionsGroupByArgs = {
    where?: KeywordsOnFictionsWhereInput
    orderBy?: Enumerable<KeywordsOnFictionsOrderByWithAggregationInput>
    by: Array<KeywordsOnFictionsScalarFieldEnum>
    having?: KeywordsOnFictionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeywordsOnFictionsCountAggregateInputType | true
    _avg?: KeywordsOnFictionsAvgAggregateInputType
    _sum?: KeywordsOnFictionsSumAggregateInputType
    _min?: KeywordsOnFictionsMinAggregateInputType
    _max?: KeywordsOnFictionsMaxAggregateInputType
  }


  export type KeywordsOnFictionsGroupByOutputType = {
    fictionId: number
    keywordId: number
    _count: KeywordsOnFictionsCountAggregateOutputType | null
    _avg: KeywordsOnFictionsAvgAggregateOutputType | null
    _sum: KeywordsOnFictionsSumAggregateOutputType | null
    _min: KeywordsOnFictionsMinAggregateOutputType | null
    _max: KeywordsOnFictionsMaxAggregateOutputType | null
  }

  type GetKeywordsOnFictionsGroupByPayload<T extends KeywordsOnFictionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<KeywordsOnFictionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeywordsOnFictionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeywordsOnFictionsGroupByOutputType[P]>
            : GetScalarType<T[P], KeywordsOnFictionsGroupByOutputType[P]>
        }
      >
    >


  export type KeywordsOnFictionsSelect = {
    fiction?: boolean | FictionArgs
    fictionId?: boolean
    keyword?: boolean | KeywordArgs
    keywordId?: boolean
  }

  export type KeywordsOnFictionsInclude = {
    fiction?: boolean | FictionArgs
    keyword?: boolean | KeywordArgs
  }

  export type KeywordsOnFictionsGetPayload<
    S extends boolean | null | undefined | KeywordsOnFictionsArgs,
    U = keyof S
      > = S extends true
        ? KeywordsOnFictions
    : S extends undefined
    ? never
    : S extends KeywordsOnFictionsArgs | KeywordsOnFictionsFindManyArgs
    ?'include' extends U
    ? KeywordsOnFictions  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fiction' ? FictionGetPayload<S['include'][P]> :
        P extends 'keyword' ? KeywordGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fiction' ? FictionGetPayload<S['select'][P]> :
        P extends 'keyword' ? KeywordGetPayload<S['select'][P]> :  P extends keyof KeywordsOnFictions ? KeywordsOnFictions[P] : never
  } 
    : KeywordsOnFictions
  : KeywordsOnFictions


  type KeywordsOnFictionsCountArgs = Merge<
    Omit<KeywordsOnFictionsFindManyArgs, 'select' | 'include'> & {
      select?: KeywordsOnFictionsCountAggregateInputType | true
    }
  >

  export interface KeywordsOnFictionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one KeywordsOnFictions that matches the filter.
     * @param {KeywordsOnFictionsFindUniqueArgs} args - Arguments to find a KeywordsOnFictions
     * @example
     * // Get one KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KeywordsOnFictionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KeywordsOnFictionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'KeywordsOnFictions'> extends True ? CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>> : CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions | null >, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T> | null >>

    /**
     * Find the first KeywordsOnFictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsFindFirstArgs} args - Arguments to find a KeywordsOnFictions
     * @example
     * // Get one KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KeywordsOnFictionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KeywordsOnFictionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'KeywordsOnFictions'> extends True ? CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>> : CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions | null >, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T> | null >>

    /**
     * Find zero or more KeywordsOnFictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findMany()
     * 
     * // Get first 10 KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.findMany({ take: 10 })
     * 
     * // Only select the `fictionId`
     * const keywordsOnFictionsWithFictionIdOnly = await prisma.keywordsOnFictions.findMany({ select: { fictionId: true } })
     * 
    **/
    findMany<T extends KeywordsOnFictionsFindManyArgs>(
      args?: SelectSubset<T, KeywordsOnFictionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<KeywordsOnFictions>>, PrismaPromise<Array<KeywordsOnFictionsGetPayload<T>>>>

    /**
     * Create a KeywordsOnFictions.
     * @param {KeywordsOnFictionsCreateArgs} args - Arguments to create a KeywordsOnFictions.
     * @example
     * // Create one KeywordsOnFictions
     * const KeywordsOnFictions = await prisma.keywordsOnFictions.create({
     *   data: {
     *     // ... data to create a KeywordsOnFictions
     *   }
     * })
     * 
    **/
    create<T extends KeywordsOnFictionsCreateArgs>(
      args: SelectSubset<T, KeywordsOnFictionsCreateArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Create many KeywordsOnFictions.
     *     @param {KeywordsOnFictionsCreateManyArgs} args - Arguments to create many KeywordsOnFictions.
     *     @example
     *     // Create many KeywordsOnFictions
     *     const keywordsOnFictions = await prisma.keywordsOnFictions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KeywordsOnFictionsCreateManyArgs>(
      args?: SelectSubset<T, KeywordsOnFictionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a KeywordsOnFictions.
     * @param {KeywordsOnFictionsDeleteArgs} args - Arguments to delete one KeywordsOnFictions.
     * @example
     * // Delete one KeywordsOnFictions
     * const KeywordsOnFictions = await prisma.keywordsOnFictions.delete({
     *   where: {
     *     // ... filter to delete one KeywordsOnFictions
     *   }
     * })
     * 
    **/
    delete<T extends KeywordsOnFictionsDeleteArgs>(
      args: SelectSubset<T, KeywordsOnFictionsDeleteArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Update one KeywordsOnFictions.
     * @param {KeywordsOnFictionsUpdateArgs} args - Arguments to update one KeywordsOnFictions.
     * @example
     * // Update one KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KeywordsOnFictionsUpdateArgs>(
      args: SelectSubset<T, KeywordsOnFictionsUpdateArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Delete zero or more KeywordsOnFictions.
     * @param {KeywordsOnFictionsDeleteManyArgs} args - Arguments to filter KeywordsOnFictions to delete.
     * @example
     * // Delete a few KeywordsOnFictions
     * const { count } = await prisma.keywordsOnFictions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KeywordsOnFictionsDeleteManyArgs>(
      args?: SelectSubset<T, KeywordsOnFictionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeywordsOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KeywordsOnFictionsUpdateManyArgs>(
      args: SelectSubset<T, KeywordsOnFictionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one KeywordsOnFictions.
     * @param {KeywordsOnFictionsUpsertArgs} args - Arguments to update or create a KeywordsOnFictions.
     * @example
     * // Update or create a KeywordsOnFictions
     * const keywordsOnFictions = await prisma.keywordsOnFictions.upsert({
     *   create: {
     *     // ... data to create a KeywordsOnFictions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KeywordsOnFictions we want to update
     *   }
     * })
    **/
    upsert<T extends KeywordsOnFictionsUpsertArgs>(
      args: SelectSubset<T, KeywordsOnFictionsUpsertArgs>
    ): CheckSelect<T, Prisma__KeywordsOnFictionsClient<KeywordsOnFictions>, Prisma__KeywordsOnFictionsClient<KeywordsOnFictionsGetPayload<T>>>

    /**
     * Count the number of KeywordsOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsCountArgs} args - Arguments to filter KeywordsOnFictions to count.
     * @example
     * // Count the number of KeywordsOnFictions
     * const count = await prisma.keywordsOnFictions.count({
     *   where: {
     *     // ... the filter for the KeywordsOnFictions we want to count
     *   }
     * })
    **/
    count<T extends KeywordsOnFictionsCountArgs>(
      args?: Subset<T, KeywordsOnFictionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeywordsOnFictionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KeywordsOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeywordsOnFictionsAggregateArgs>(args: Subset<T, KeywordsOnFictionsAggregateArgs>): PrismaPromise<GetKeywordsOnFictionsAggregateType<T>>

    /**
     * Group by KeywordsOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordsOnFictionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeywordsOnFictionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeywordsOnFictionsGroupByArgs['orderBy'] }
        : { orderBy?: KeywordsOnFictionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeywordsOnFictionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordsOnFictionsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for KeywordsOnFictions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KeywordsOnFictionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fiction<T extends FictionArgs = {}>(args?: Subset<T, FictionArgs>): CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>;

    keyword<T extends KeywordArgs = {}>(args?: Subset<T, KeywordArgs>): CheckSelect<T, Prisma__KeywordClient<Keyword | null >, Prisma__KeywordClient<KeywordGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * KeywordsOnFictions findUnique
   */
  export type KeywordsOnFictionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * Throw an Error if a KeywordsOnFictions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KeywordsOnFictions to fetch.
     * 
    **/
    where: KeywordsOnFictionsWhereUniqueInput
  }


  /**
   * KeywordsOnFictions findFirst
   */
  export type KeywordsOnFictionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * Throw an Error if a KeywordsOnFictions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which KeywordsOnFictions to fetch.
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordsOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordsOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeywordsOnFictions.
     * 
    **/
    cursor?: KeywordsOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordsOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordsOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeywordsOnFictions.
     * 
    **/
    distinct?: Enumerable<KeywordsOnFictionsScalarFieldEnum>
  }


  /**
   * KeywordsOnFictions findMany
   */
  export type KeywordsOnFictionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * Filter, which KeywordsOnFictions to fetch.
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordsOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<KeywordsOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KeywordsOnFictions.
     * 
    **/
    cursor?: KeywordsOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordsOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordsOnFictions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KeywordsOnFictionsScalarFieldEnum>
  }


  /**
   * KeywordsOnFictions create
   */
  export type KeywordsOnFictionsCreateArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * The data needed to create a KeywordsOnFictions.
     * 
    **/
    data: XOR<KeywordsOnFictionsCreateInput, KeywordsOnFictionsUncheckedCreateInput>
  }


  /**
   * KeywordsOnFictions createMany
   */
  export type KeywordsOnFictionsCreateManyArgs = {
    /**
     * The data used to create many KeywordsOnFictions.
     * 
    **/
    data: Enumerable<KeywordsOnFictionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * KeywordsOnFictions update
   */
  export type KeywordsOnFictionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * The data needed to update a KeywordsOnFictions.
     * 
    **/
    data: XOR<KeywordsOnFictionsUpdateInput, KeywordsOnFictionsUncheckedUpdateInput>
    /**
     * Choose, which KeywordsOnFictions to update.
     * 
    **/
    where: KeywordsOnFictionsWhereUniqueInput
  }


  /**
   * KeywordsOnFictions updateMany
   */
  export type KeywordsOnFictionsUpdateManyArgs = {
    /**
     * The data used to update KeywordsOnFictions.
     * 
    **/
    data: XOR<KeywordsOnFictionsUpdateManyMutationInput, KeywordsOnFictionsUncheckedUpdateManyInput>
    /**
     * Filter which KeywordsOnFictions to update
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
  }


  /**
   * KeywordsOnFictions upsert
   */
  export type KeywordsOnFictionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * The filter to search for the KeywordsOnFictions to update in case it exists.
     * 
    **/
    where: KeywordsOnFictionsWhereUniqueInput
    /**
     * In case the KeywordsOnFictions found by the `where` argument doesn't exist, create a new KeywordsOnFictions with this data.
     * 
    **/
    create: XOR<KeywordsOnFictionsCreateInput, KeywordsOnFictionsUncheckedCreateInput>
    /**
     * In case the KeywordsOnFictions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<KeywordsOnFictionsUpdateInput, KeywordsOnFictionsUncheckedUpdateInput>
  }


  /**
   * KeywordsOnFictions delete
   */
  export type KeywordsOnFictionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
    /**
     * Filter which KeywordsOnFictions to delete.
     * 
    **/
    where: KeywordsOnFictionsWhereUniqueInput
  }


  /**
   * KeywordsOnFictions deleteMany
   */
  export type KeywordsOnFictionsDeleteManyArgs = {
    /**
     * Filter which KeywordsOnFictions to delete
     * 
    **/
    where?: KeywordsOnFictionsWhereInput
  }


  /**
   * KeywordsOnFictions without action
   */
  export type KeywordsOnFictionsArgs = {
    /**
     * Select specific fields to fetch from the KeywordsOnFictions
     * 
    **/
    select?: KeywordsOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: KeywordsOnFictionsInclude | null
  }



  /**
   * Model CategoriesOnFictions
   */


  export type AggregateCategoriesOnFictions = {
    _count: CategoriesOnFictionsCountAggregateOutputType | null
    _avg: CategoriesOnFictionsAvgAggregateOutputType | null
    _sum: CategoriesOnFictionsSumAggregateOutputType | null
    _min: CategoriesOnFictionsMinAggregateOutputType | null
    _max: CategoriesOnFictionsMaxAggregateOutputType | null
  }

  export type CategoriesOnFictionsAvgAggregateOutputType = {
    fictionId: number | null
    categoryId: number | null
  }

  export type CategoriesOnFictionsSumAggregateOutputType = {
    fictionId: number | null
    categoryId: number | null
  }

  export type CategoriesOnFictionsMinAggregateOutputType = {
    fictionId: number | null
    categoryId: number | null
    assignedAt: Date | null
    assignedBy: string | null
  }

  export type CategoriesOnFictionsMaxAggregateOutputType = {
    fictionId: number | null
    categoryId: number | null
    assignedAt: Date | null
    assignedBy: string | null
  }

  export type CategoriesOnFictionsCountAggregateOutputType = {
    fictionId: number
    categoryId: number
    assignedAt: number
    assignedBy: number
    _all: number
  }


  export type CategoriesOnFictionsAvgAggregateInputType = {
    fictionId?: true
    categoryId?: true
  }

  export type CategoriesOnFictionsSumAggregateInputType = {
    fictionId?: true
    categoryId?: true
  }

  export type CategoriesOnFictionsMinAggregateInputType = {
    fictionId?: true
    categoryId?: true
    assignedAt?: true
    assignedBy?: true
  }

  export type CategoriesOnFictionsMaxAggregateInputType = {
    fictionId?: true
    categoryId?: true
    assignedAt?: true
    assignedBy?: true
  }

  export type CategoriesOnFictionsCountAggregateInputType = {
    fictionId?: true
    categoryId?: true
    assignedAt?: true
    assignedBy?: true
    _all?: true
  }

  export type CategoriesOnFictionsAggregateArgs = {
    /**
     * Filter which CategoriesOnFictions to aggregate.
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoriesOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoriesOnFictions
    **/
    _count?: true | CategoriesOnFictionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesOnFictionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesOnFictionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesOnFictionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesOnFictionsMaxAggregateInputType
  }

  export type GetCategoriesOnFictionsAggregateType<T extends CategoriesOnFictionsAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriesOnFictions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriesOnFictions[P]>
      : GetScalarType<T[P], AggregateCategoriesOnFictions[P]>
  }




  export type CategoriesOnFictionsGroupByArgs = {
    where?: CategoriesOnFictionsWhereInput
    orderBy?: Enumerable<CategoriesOnFictionsOrderByWithAggregationInput>
    by: Array<CategoriesOnFictionsScalarFieldEnum>
    having?: CategoriesOnFictionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesOnFictionsCountAggregateInputType | true
    _avg?: CategoriesOnFictionsAvgAggregateInputType
    _sum?: CategoriesOnFictionsSumAggregateInputType
    _min?: CategoriesOnFictionsMinAggregateInputType
    _max?: CategoriesOnFictionsMaxAggregateInputType
  }


  export type CategoriesOnFictionsGroupByOutputType = {
    fictionId: number
    categoryId: number
    assignedAt: Date
    assignedBy: string
    _count: CategoriesOnFictionsCountAggregateOutputType | null
    _avg: CategoriesOnFictionsAvgAggregateOutputType | null
    _sum: CategoriesOnFictionsSumAggregateOutputType | null
    _min: CategoriesOnFictionsMinAggregateOutputType | null
    _max: CategoriesOnFictionsMaxAggregateOutputType | null
  }

  type GetCategoriesOnFictionsGroupByPayload<T extends CategoriesOnFictionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoriesOnFictionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesOnFictionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesOnFictionsGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesOnFictionsGroupByOutputType[P]>
        }
      >
    >


  export type CategoriesOnFictionsSelect = {
    fiction?: boolean | FictionArgs
    fictionId?: boolean
    category?: boolean | CategoryArgs
    categoryId?: boolean
    assignedAt?: boolean
    assignedBy?: boolean
  }

  export type CategoriesOnFictionsInclude = {
    fiction?: boolean | FictionArgs
    category?: boolean | CategoryArgs
  }

  export type CategoriesOnFictionsGetPayload<
    S extends boolean | null | undefined | CategoriesOnFictionsArgs,
    U = keyof S
      > = S extends true
        ? CategoriesOnFictions
    : S extends undefined
    ? never
    : S extends CategoriesOnFictionsArgs | CategoriesOnFictionsFindManyArgs
    ?'include' extends U
    ? CategoriesOnFictions  & {
    [P in TrueKeys<S['include']>]:
        P extends 'fiction' ? FictionGetPayload<S['include'][P]> :
        P extends 'category' ? CategoryGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'fiction' ? FictionGetPayload<S['select'][P]> :
        P extends 'category' ? CategoryGetPayload<S['select'][P]> :  P extends keyof CategoriesOnFictions ? CategoriesOnFictions[P] : never
  } 
    : CategoriesOnFictions
  : CategoriesOnFictions


  type CategoriesOnFictionsCountArgs = Merge<
    Omit<CategoriesOnFictionsFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesOnFictionsCountAggregateInputType | true
    }
  >

  export interface CategoriesOnFictionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one CategoriesOnFictions that matches the filter.
     * @param {CategoriesOnFictionsFindUniqueArgs} args - Arguments to find a CategoriesOnFictions
     * @example
     * // Get one CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriesOnFictionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoriesOnFictionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CategoriesOnFictions'> extends True ? CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions | null >, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T> | null >>

    /**
     * Find the first CategoriesOnFictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsFindFirstArgs} args - Arguments to find a CategoriesOnFictions
     * @example
     * // Get one CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriesOnFictionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoriesOnFictionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CategoriesOnFictions'> extends True ? CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>> : CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions | null >, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T> | null >>

    /**
     * Find zero or more CategoriesOnFictions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findMany()
     * 
     * // Get first 10 CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.findMany({ take: 10 })
     * 
     * // Only select the `fictionId`
     * const categoriesOnFictionsWithFictionIdOnly = await prisma.categoriesOnFictions.findMany({ select: { fictionId: true } })
     * 
    **/
    findMany<T extends CategoriesOnFictionsFindManyArgs>(
      args?: SelectSubset<T, CategoriesOnFictionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CategoriesOnFictions>>, PrismaPromise<Array<CategoriesOnFictionsGetPayload<T>>>>

    /**
     * Create a CategoriesOnFictions.
     * @param {CategoriesOnFictionsCreateArgs} args - Arguments to create a CategoriesOnFictions.
     * @example
     * // Create one CategoriesOnFictions
     * const CategoriesOnFictions = await prisma.categoriesOnFictions.create({
     *   data: {
     *     // ... data to create a CategoriesOnFictions
     *   }
     * })
     * 
    **/
    create<T extends CategoriesOnFictionsCreateArgs>(
      args: SelectSubset<T, CategoriesOnFictionsCreateArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Create many CategoriesOnFictions.
     *     @param {CategoriesOnFictionsCreateManyArgs} args - Arguments to create many CategoriesOnFictions.
     *     @example
     *     // Create many CategoriesOnFictions
     *     const categoriesOnFictions = await prisma.categoriesOnFictions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriesOnFictionsCreateManyArgs>(
      args?: SelectSubset<T, CategoriesOnFictionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CategoriesOnFictions.
     * @param {CategoriesOnFictionsDeleteArgs} args - Arguments to delete one CategoriesOnFictions.
     * @example
     * // Delete one CategoriesOnFictions
     * const CategoriesOnFictions = await prisma.categoriesOnFictions.delete({
     *   where: {
     *     // ... filter to delete one CategoriesOnFictions
     *   }
     * })
     * 
    **/
    delete<T extends CategoriesOnFictionsDeleteArgs>(
      args: SelectSubset<T, CategoriesOnFictionsDeleteArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Update one CategoriesOnFictions.
     * @param {CategoriesOnFictionsUpdateArgs} args - Arguments to update one CategoriesOnFictions.
     * @example
     * // Update one CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriesOnFictionsUpdateArgs>(
      args: SelectSubset<T, CategoriesOnFictionsUpdateArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Delete zero or more CategoriesOnFictions.
     * @param {CategoriesOnFictionsDeleteManyArgs} args - Arguments to filter CategoriesOnFictions to delete.
     * @example
     * // Delete a few CategoriesOnFictions
     * const { count } = await prisma.categoriesOnFictions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriesOnFictionsDeleteManyArgs>(
      args?: SelectSubset<T, CategoriesOnFictionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriesOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriesOnFictionsUpdateManyArgs>(
      args: SelectSubset<T, CategoriesOnFictionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriesOnFictions.
     * @param {CategoriesOnFictionsUpsertArgs} args - Arguments to update or create a CategoriesOnFictions.
     * @example
     * // Update or create a CategoriesOnFictions
     * const categoriesOnFictions = await prisma.categoriesOnFictions.upsert({
     *   create: {
     *     // ... data to create a CategoriesOnFictions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriesOnFictions we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriesOnFictionsUpsertArgs>(
      args: SelectSubset<T, CategoriesOnFictionsUpsertArgs>
    ): CheckSelect<T, Prisma__CategoriesOnFictionsClient<CategoriesOnFictions>, Prisma__CategoriesOnFictionsClient<CategoriesOnFictionsGetPayload<T>>>

    /**
     * Count the number of CategoriesOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsCountArgs} args - Arguments to filter CategoriesOnFictions to count.
     * @example
     * // Count the number of CategoriesOnFictions
     * const count = await prisma.categoriesOnFictions.count({
     *   where: {
     *     // ... the filter for the CategoriesOnFictions we want to count
     *   }
     * })
    **/
    count<T extends CategoriesOnFictionsCountArgs>(
      args?: Subset<T, CategoriesOnFictionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesOnFictionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriesOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesOnFictionsAggregateArgs>(args: Subset<T, CategoriesOnFictionsAggregateArgs>): PrismaPromise<GetCategoriesOnFictionsAggregateType<T>>

    /**
     * Group by CategoriesOnFictions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnFictionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesOnFictionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesOnFictionsGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesOnFictionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesOnFictionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesOnFictionsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoriesOnFictions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoriesOnFictionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    fiction<T extends FictionArgs = {}>(args?: Subset<T, FictionArgs>): CheckSelect<T, Prisma__FictionClient<Fiction | null >, Prisma__FictionClient<FictionGetPayload<T> | null >>;

    category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * CategoriesOnFictions findUnique
   */
  export type CategoriesOnFictionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * Throw an Error if a CategoriesOnFictions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CategoriesOnFictions to fetch.
     * 
    **/
    where: CategoriesOnFictionsWhereUniqueInput
  }


  /**
   * CategoriesOnFictions findFirst
   */
  export type CategoriesOnFictionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * Throw an Error if a CategoriesOnFictions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which CategoriesOnFictions to fetch.
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriesOnFictions.
     * 
    **/
    cursor?: CategoriesOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnFictions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriesOnFictions.
     * 
    **/
    distinct?: Enumerable<CategoriesOnFictionsScalarFieldEnum>
  }


  /**
   * CategoriesOnFictions findMany
   */
  export type CategoriesOnFictionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * Filter, which CategoriesOnFictions to fetch.
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnFictions to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOnFictionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoriesOnFictions.
     * 
    **/
    cursor?: CategoriesOnFictionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnFictions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnFictions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoriesOnFictionsScalarFieldEnum>
  }


  /**
   * CategoriesOnFictions create
   */
  export type CategoriesOnFictionsCreateArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * The data needed to create a CategoriesOnFictions.
     * 
    **/
    data: XOR<CategoriesOnFictionsCreateInput, CategoriesOnFictionsUncheckedCreateInput>
  }


  /**
   * CategoriesOnFictions createMany
   */
  export type CategoriesOnFictionsCreateManyArgs = {
    /**
     * The data used to create many CategoriesOnFictions.
     * 
    **/
    data: Enumerable<CategoriesOnFictionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CategoriesOnFictions update
   */
  export type CategoriesOnFictionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * The data needed to update a CategoriesOnFictions.
     * 
    **/
    data: XOR<CategoriesOnFictionsUpdateInput, CategoriesOnFictionsUncheckedUpdateInput>
    /**
     * Choose, which CategoriesOnFictions to update.
     * 
    **/
    where: CategoriesOnFictionsWhereUniqueInput
  }


  /**
   * CategoriesOnFictions updateMany
   */
  export type CategoriesOnFictionsUpdateManyArgs = {
    /**
     * The data used to update CategoriesOnFictions.
     * 
    **/
    data: XOR<CategoriesOnFictionsUpdateManyMutationInput, CategoriesOnFictionsUncheckedUpdateManyInput>
    /**
     * Filter which CategoriesOnFictions to update
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
  }


  /**
   * CategoriesOnFictions upsert
   */
  export type CategoriesOnFictionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * The filter to search for the CategoriesOnFictions to update in case it exists.
     * 
    **/
    where: CategoriesOnFictionsWhereUniqueInput
    /**
     * In case the CategoriesOnFictions found by the `where` argument doesn't exist, create a new CategoriesOnFictions with this data.
     * 
    **/
    create: XOR<CategoriesOnFictionsCreateInput, CategoriesOnFictionsUncheckedCreateInput>
    /**
     * In case the CategoriesOnFictions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoriesOnFictionsUpdateInput, CategoriesOnFictionsUncheckedUpdateInput>
  }


  /**
   * CategoriesOnFictions delete
   */
  export type CategoriesOnFictionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
    /**
     * Filter which CategoriesOnFictions to delete.
     * 
    **/
    where: CategoriesOnFictionsWhereUniqueInput
  }


  /**
   * CategoriesOnFictions deleteMany
   */
  export type CategoriesOnFictionsDeleteManyArgs = {
    /**
     * Filter which CategoriesOnFictions to delete
     * 
    **/
    where?: CategoriesOnFictionsWhereInput
  }


  /**
   * CategoriesOnFictions without action
   */
  export type CategoriesOnFictionsArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnFictions
     * 
    **/
    select?: CategoriesOnFictionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnFictionsInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    phone: string | null
    email: string | null
    name: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    phone: string | null
    email: string | null
    name: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    phone: number
    email: number
    name: number
    avatar: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    phone?: true
    email?: true
    name?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    phone?: true
    email?: true
    name?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    phone?: true
    email?: true
    name?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    phone: string | null
    email: string | null
    name: string
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    phone?: boolean
    email?: boolean
    name?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tokens?: boolean | TokenFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    tokens?: boolean | TokenFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tokens' ? Array < TokenGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tokens' ? Array < TokenGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tokens<T extends TokenFindManyArgs = {}>(args?: Subset<T, TokenFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Token>>, PrismaPromise<Array<TokenGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Token
   */


  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenMinAggregateOutputType = {
    id: number | null
    payload: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TokenMaxAggregateOutputType = {
    id: number | null
    payload: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    payload: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TokenAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenMinAggregateInputType = {
    id?: true
    payload?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    payload?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    payload?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TokenAggregateArgs = {
    /**
     * Filter which Token to aggregate.
     * 
    **/
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs = {
    where?: TokenWhereInput
    orderBy?: Enumerable<TokenOrderByWithAggregationInput>
    by: Array<TokenScalarFieldEnum>
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _avg?: TokenAvgAggregateInputType
    _sum?: TokenSumAggregateInputType
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }


  export type TokenGroupByOutputType = {
    id: number
    payload: string
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect = {
    id?: boolean
    payload?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TokenInclude = {
    user?: boolean | UserArgs
  }

  export type TokenGetPayload<
    S extends boolean | null | undefined | TokenArgs,
    U = keyof S
      > = S extends true
        ? Token
    : S extends undefined
    ? never
    : S extends TokenArgs | TokenFindManyArgs
    ?'include' extends U
    ? Token  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Token ? Token[P] : never
  } 
    : Token
  : Token


  type TokenCountArgs = Merge<
    Omit<TokenFindManyArgs, 'select' | 'include'> & {
      select?: TokenCountAggregateInputType | true
    }
  >

  export interface TokenDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Token'> extends True ? CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>> : CheckSelect<T, Prisma__TokenClient<Token | null >, Prisma__TokenClient<TokenGetPayload<T> | null >>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Token'> extends True ? CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>> : CheckSelect<T, Prisma__TokenClient<Token | null >, Prisma__TokenClient<TokenGetPayload<T> | null >>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TokenFindManyArgs>(
      args?: SelectSubset<T, TokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Token>>, PrismaPromise<Array<TokenGetPayload<T>>>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
    **/
    create<T extends TokenCreateArgs>(
      args: SelectSubset<T, TokenCreateArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Create many Tokens.
     *     @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     *     @example
     *     // Create many Tokens
     *     const token = await prisma.token.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TokenCreateManyArgs>(
      args?: SelectSubset<T, TokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
    **/
    delete<T extends TokenDeleteArgs>(
      args: SelectSubset<T, TokenDeleteArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TokenUpdateArgs>(
      args: SelectSubset<T, TokenUpdateArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TokenDeleteManyArgs>(
      args?: SelectSubset<T, TokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TokenUpdateManyArgs>(
      args: SelectSubset<T, TokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
    **/
    upsert<T extends TokenUpsertArgs>(
      args: SelectSubset<T, TokenUpsertArgs>
    ): CheckSelect<T, Prisma__TokenClient<Token>, Prisma__TokenClient<TokenGetPayload<T>>>

    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TokenClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Throw an Error if a Token can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Token to fetch.
     * 
    **/
    where: TokenWhereUniqueInput
  }


  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Throw an Error if a Token can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Token to fetch.
     * 
    **/
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     * 
    **/
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     * 
    **/
    distinct?: Enumerable<TokenScalarFieldEnum>
  }


  /**
   * Token findMany
   */
  export type TokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Filter, which Tokens to fetch.
     * 
    **/
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     * 
    **/
    orderBy?: Enumerable<TokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     * 
    **/
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TokenScalarFieldEnum>
  }


  /**
   * Token create
   */
  export type TokenCreateArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * The data needed to create a Token.
     * 
    **/
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }


  /**
   * Token createMany
   */
  export type TokenCreateManyArgs = {
    /**
     * The data used to create many Tokens.
     * 
    **/
    data: Enumerable<TokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Token update
   */
  export type TokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * The data needed to update a Token.
     * 
    **/
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     * 
    **/
    where: TokenWhereUniqueInput
  }


  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs = {
    /**
     * The data used to update Tokens.
     * 
    **/
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     * 
    **/
    where?: TokenWhereInput
  }


  /**
   * Token upsert
   */
  export type TokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * The filter to search for the Token to update in case it exists.
     * 
    **/
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     * 
    **/
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }


  /**
   * Token delete
   */
  export type TokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
    /**
     * Filter which Token to delete.
     * 
    **/
    where: TokenWhereUniqueInput
  }


  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs = {
    /**
     * Filter which Tokens to delete
     * 
    **/
    where?: TokenWhereInput
  }


  /**
   * Token without action
   */
  export type TokenArgs = {
    /**
     * Select specific fields to fetch from the Token
     * 
    **/
    select?: TokenSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TokenInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const FictionScalarFieldEnum: {
    id: 'id',
    title: 'title'
  };

  export type FictionScalarFieldEnum = (typeof FictionScalarFieldEnum)[keyof typeof FictionScalarFieldEnum]


  export const FictionDetailScalarFieldEnum: {
    id: 'id',
    fictionId: 'fictionId'
  };

  export type FictionDetailScalarFieldEnum = (typeof FictionDetailScalarFieldEnum)[keyof typeof FictionDetailScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const KeywordScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type KeywordScalarFieldEnum = (typeof KeywordScalarFieldEnum)[keyof typeof KeywordScalarFieldEnum]


  export const KeywordsOnFictionsScalarFieldEnum: {
    fictionId: 'fictionId',
    keywordId: 'keywordId'
  };

  export type KeywordsOnFictionsScalarFieldEnum = (typeof KeywordsOnFictionsScalarFieldEnum)[keyof typeof KeywordsOnFictionsScalarFieldEnum]


  export const CategoriesOnFictionsScalarFieldEnum: {
    fictionId: 'fictionId',
    categoryId: 'categoryId',
    assignedAt: 'assignedAt',
    assignedBy: 'assignedBy'
  };

  export type CategoriesOnFictionsScalarFieldEnum = (typeof CategoriesOnFictionsScalarFieldEnum)[keyof typeof CategoriesOnFictionsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    email: 'email',
    name: 'name',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    payload: 'payload',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type FictionWhereInput = {
    AND?: Enumerable<FictionWhereInput>
    OR?: Enumerable<FictionWhereInput>
    NOT?: Enumerable<FictionWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    fictiondetail?: XOR<FictionDetailRelationFilter, FictionDetailWhereInput> | null
    categories?: CategoriesOnFictionsListRelationFilter
    keywords?: KeywordsOnFictionsListRelationFilter
  }

  export type FictionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    fictiondetail?: FictionDetailOrderByWithRelationInput
    categories?: CategoriesOnFictionsOrderByRelationAggregateInput
    keywords?: KeywordsOnFictionsOrderByRelationAggregateInput
  }

  export type FictionWhereUniqueInput = {
    id?: number
  }

  export type FictionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    _count?: FictionCountOrderByAggregateInput
    _avg?: FictionAvgOrderByAggregateInput
    _max?: FictionMaxOrderByAggregateInput
    _min?: FictionMinOrderByAggregateInput
    _sum?: FictionSumOrderByAggregateInput
  }

  export type FictionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FictionScalarWhereWithAggregatesInput>
    OR?: Enumerable<FictionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FictionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
  }

  export type FictionDetailWhereInput = {
    AND?: Enumerable<FictionDetailWhereInput>
    OR?: Enumerable<FictionDetailWhereInput>
    NOT?: Enumerable<FictionDetailWhereInput>
    id?: IntFilter | number
    fiction?: XOR<FictionRelationFilter, FictionWhereInput>
    fictionId?: IntFilter | number
  }

  export type FictionDetailOrderByWithRelationInput = {
    id?: SortOrder
    fiction?: FictionOrderByWithRelationInput
    fictionId?: SortOrder
  }

  export type FictionDetailWhereUniqueInput = {
    id?: number
    fictionId?: number
  }

  export type FictionDetailOrderByWithAggregationInput = {
    id?: SortOrder
    fictionId?: SortOrder
    _count?: FictionDetailCountOrderByAggregateInput
    _avg?: FictionDetailAvgOrderByAggregateInput
    _max?: FictionDetailMaxOrderByAggregateInput
    _min?: FictionDetailMinOrderByAggregateInput
    _sum?: FictionDetailSumOrderByAggregateInput
  }

  export type FictionDetailScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FictionDetailScalarWhereWithAggregatesInput>
    OR?: Enumerable<FictionDetailScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FictionDetailScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fictionId?: IntWithAggregatesFilter | number
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    fictions?: CategoriesOnFictionsListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fictions?: CategoriesOnFictionsOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: number
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type KeywordWhereInput = {
    AND?: Enumerable<KeywordWhereInput>
    OR?: Enumerable<KeywordWhereInput>
    NOT?: Enumerable<KeywordWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    fictions?: KeywordsOnFictionsListRelationFilter
  }

  export type KeywordOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fictions?: KeywordsOnFictionsOrderByRelationAggregateInput
  }

  export type KeywordWhereUniqueInput = {
    id?: number
  }

  export type KeywordOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: KeywordCountOrderByAggregateInput
    _avg?: KeywordAvgOrderByAggregateInput
    _max?: KeywordMaxOrderByAggregateInput
    _min?: KeywordMinOrderByAggregateInput
    _sum?: KeywordSumOrderByAggregateInput
  }

  export type KeywordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KeywordScalarWhereWithAggregatesInput>
    OR?: Enumerable<KeywordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KeywordScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type KeywordsOnFictionsWhereInput = {
    AND?: Enumerable<KeywordsOnFictionsWhereInput>
    OR?: Enumerable<KeywordsOnFictionsWhereInput>
    NOT?: Enumerable<KeywordsOnFictionsWhereInput>
    fiction?: XOR<FictionRelationFilter, FictionWhereInput>
    fictionId?: IntFilter | number
    keyword?: XOR<KeywordRelationFilter, KeywordWhereInput>
    keywordId?: IntFilter | number
  }

  export type KeywordsOnFictionsOrderByWithRelationInput = {
    fiction?: FictionOrderByWithRelationInput
    fictionId?: SortOrder
    keyword?: KeywordOrderByWithRelationInput
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsWhereUniqueInput = {
    fictionId_keywordId?: KeywordsOnFictionsFictionIdKeywordIdCompoundUniqueInput
  }

  export type KeywordsOnFictionsOrderByWithAggregationInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
    _count?: KeywordsOnFictionsCountOrderByAggregateInput
    _avg?: KeywordsOnFictionsAvgOrderByAggregateInput
    _max?: KeywordsOnFictionsMaxOrderByAggregateInput
    _min?: KeywordsOnFictionsMinOrderByAggregateInput
    _sum?: KeywordsOnFictionsSumOrderByAggregateInput
  }

  export type KeywordsOnFictionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KeywordsOnFictionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<KeywordsOnFictionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KeywordsOnFictionsScalarWhereWithAggregatesInput>
    fictionId?: IntWithAggregatesFilter | number
    keywordId?: IntWithAggregatesFilter | number
  }

  export type CategoriesOnFictionsWhereInput = {
    AND?: Enumerable<CategoriesOnFictionsWhereInput>
    OR?: Enumerable<CategoriesOnFictionsWhereInput>
    NOT?: Enumerable<CategoriesOnFictionsWhereInput>
    fiction?: XOR<FictionRelationFilter, FictionWhereInput>
    fictionId?: IntFilter | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    categoryId?: IntFilter | number
    assignedAt?: DateTimeFilter | Date | string
    assignedBy?: StringFilter | string
  }

  export type CategoriesOnFictionsOrderByWithRelationInput = {
    fiction?: FictionOrderByWithRelationInput
    fictionId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    categoryId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type CategoriesOnFictionsWhereUniqueInput = {
    fictionId_categoryId?: CategoriesOnFictionsFictionIdCategoryIdCompoundUniqueInput
  }

  export type CategoriesOnFictionsOrderByWithAggregationInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    _count?: CategoriesOnFictionsCountOrderByAggregateInput
    _avg?: CategoriesOnFictionsAvgOrderByAggregateInput
    _max?: CategoriesOnFictionsMaxOrderByAggregateInput
    _min?: CategoriesOnFictionsMinOrderByAggregateInput
    _sum?: CategoriesOnFictionsSumOrderByAggregateInput
  }

  export type CategoriesOnFictionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoriesOnFictionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoriesOnFictionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoriesOnFictionsScalarWhereWithAggregatesInput>
    fictionId?: IntWithAggregatesFilter | number
    categoryId?: IntWithAggregatesFilter | number
    assignedAt?: DateTimeWithAggregatesFilter | Date | string
    assignedBy?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    phone?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    name?: StringFilter | string
    avatar?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    tokens?: TokenListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tokens?: TokenOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    phone?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    phone?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    name?: StringWithAggregatesFilter | string
    avatar?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TokenWhereInput = {
    AND?: Enumerable<TokenWhereInput>
    OR?: Enumerable<TokenWhereInput>
    NOT?: Enumerable<TokenWhereInput>
    id?: IntFilter | number
    payload?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    payload?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TokenWhereUniqueInput = {
    id?: number
    payload?: string
  }

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    payload?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _avg?: TokenAvgOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
    _sum?: TokenSumOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<TokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TokenScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    payload?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FictionCreateInput = {
    title: string
    fictiondetail?: FictionDetailCreateNestedOneWithoutFictionInput
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateInput = {
    id?: number
    title: string
    fictiondetail?: FictionDetailUncheckedCreateNestedOneWithoutFictionInput
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    fictiondetail?: FictionDetailUpdateOneWithoutFictionInput
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionInput
  }

  export type FictionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    fictiondetail?: FictionDetailUncheckedUpdateOneWithoutFictionInput
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionInput
  }

  export type FictionCreateManyInput = {
    id?: number
    title: string
  }

  export type FictionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type FictionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type FictionDetailCreateInput = {
    fiction: FictionCreateNestedOneWithoutFictiondetailInput
  }

  export type FictionDetailUncheckedCreateInput = {
    id?: number
    fictionId: number
  }

  export type FictionDetailUpdateInput = {
    fiction?: FictionUpdateOneRequiredWithoutFictiondetailInput
  }

  export type FictionDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type FictionDetailCreateManyInput = {
    id?: number
    fictionId: number
  }

  export type FictionDetailUpdateManyMutationInput = {

  }

  export type FictionDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    name: string
    fictions?: CategoriesOnFictionsCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    fictions?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    fictions?: CategoriesOnFictionsUpdateManyWithoutCategoryInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fictions?: CategoriesOnFictionsUncheckedUpdateManyWithoutCategoryInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KeywordCreateInput = {
    name: string
    fictions?: KeywordsOnFictionsCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUncheckedCreateInput = {
    id?: number
    name: string
    fictions?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    fictions?: KeywordsOnFictionsUpdateManyWithoutKeywordInput
  }

  export type KeywordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fictions?: KeywordsOnFictionsUncheckedUpdateManyWithoutKeywordInput
  }

  export type KeywordCreateManyInput = {
    id?: number
    name: string
  }

  export type KeywordUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KeywordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KeywordsOnFictionsCreateInput = {
    fiction: FictionCreateNestedOneWithoutKeywordsInput
    keyword: KeywordCreateNestedOneWithoutFictionsInput
  }

  export type KeywordsOnFictionsUncheckedCreateInput = {
    fictionId: number
    keywordId: number
  }

  export type KeywordsOnFictionsUpdateInput = {
    fiction?: FictionUpdateOneRequiredWithoutKeywordsInput
    keyword?: KeywordUpdateOneRequiredWithoutFictionsInput
  }

  export type KeywordsOnFictionsUncheckedUpdateInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordsOnFictionsCreateManyInput = {
    fictionId: number
    keywordId: number
  }

  export type KeywordsOnFictionsUpdateManyMutationInput = {

  }

  export type KeywordsOnFictionsUncheckedUpdateManyInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnFictionsCreateInput = {
    fiction: FictionCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutFictionsInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type CategoriesOnFictionsUncheckedCreateInput = {
    fictionId: number
    categoryId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type CategoriesOnFictionsUpdateInput = {
    fiction?: FictionUpdateOneRequiredWithoutCategoriesInput
    category?: CategoryUpdateOneRequiredWithoutFictionsInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnFictionsUncheckedUpdateInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnFictionsCreateManyInput = {
    fictionId: number
    categoryId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type CategoriesOnFictionsUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnFictionsUncheckedUpdateManyInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokenUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateInput = {
    payload: string
    user: UserCreateNestedOneWithoutTokensInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenUncheckedCreateInput = {
    id?: number
    payload: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenUpdateInput = {
    payload?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTokensInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    payload?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateManyInput = {
    id?: number
    payload: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenUpdateManyMutationInput = {
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    payload?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type FictionDetailRelationFilter = {
    is?: FictionDetailWhereInput | null
    isNot?: FictionDetailWhereInput | null
  }

  export type CategoriesOnFictionsListRelationFilter = {
    every?: CategoriesOnFictionsWhereInput
    some?: CategoriesOnFictionsWhereInput
    none?: CategoriesOnFictionsWhereInput
  }

  export type KeywordsOnFictionsListRelationFilter = {
    every?: KeywordsOnFictionsWhereInput
    some?: KeywordsOnFictionsWhereInput
    none?: KeywordsOnFictionsWhereInput
  }

  export type CategoriesOnFictionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KeywordsOnFictionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FictionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type FictionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FictionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type FictionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type FictionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type FictionRelationFilter = {
    is?: FictionWhereInput
    isNot?: FictionWhereInput
  }

  export type FictionDetailCountOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
  }

  export type FictionDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
  }

  export type FictionDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
  }

  export type FictionDetailMinOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
  }

  export type FictionDetailSumOrderByAggregateInput = {
    id?: SortOrder
    fictionId?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KeywordCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type KeywordAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KeywordMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type KeywordMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type KeywordSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KeywordRelationFilter = {
    is?: KeywordWhereInput
    isNot?: KeywordWhereInput
  }

  export type KeywordsOnFictionsFictionIdKeywordIdCompoundUniqueInput = {
    fictionId: number
    keywordId: number
  }

  export type KeywordsOnFictionsCountOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsAvgOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsMaxOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsMinOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type KeywordsOnFictionsSumOrderByAggregateInput = {
    fictionId?: SortOrder
    keywordId?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CategoriesOnFictionsFictionIdCategoryIdCompoundUniqueInput = {
    fictionId: number
    categoryId: number
  }

  export type CategoriesOnFictionsCountOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type CategoriesOnFictionsAvgOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoriesOnFictionsMaxOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type CategoriesOnFictionsMinOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
    assignedAt?: SortOrder
    assignedBy?: SortOrder
  }

  export type CategoriesOnFictionsSumOrderByAggregateInput = {
    fictionId?: SortOrder
    categoryId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type TokenListRelationFilter = {
    every?: TokenWhereInput
    some?: TokenWhereInput
    none?: TokenWhereInput
  }

  export type TokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    payload?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TokenAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    payload?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    payload?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TokenSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type FictionDetailCreateNestedOneWithoutFictionInput = {
    create?: XOR<FictionDetailCreateWithoutFictionInput, FictionDetailUncheckedCreateWithoutFictionInput>
    connectOrCreate?: FictionDetailCreateOrConnectWithoutFictionInput
    connect?: FictionDetailWhereUniqueInput
  }

  export type CategoriesOnFictionsCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutFictionInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutFictionInput>
    createMany?: CategoriesOnFictionsCreateManyFictionInputEnvelope
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
  }

  export type KeywordsOnFictionsCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutFictionInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutFictionInput>
    createMany?: KeywordsOnFictionsCreateManyFictionInputEnvelope
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
  }

  export type FictionDetailUncheckedCreateNestedOneWithoutFictionInput = {
    create?: XOR<FictionDetailCreateWithoutFictionInput, FictionDetailUncheckedCreateWithoutFictionInput>
    connectOrCreate?: FictionDetailCreateOrConnectWithoutFictionInput
    connect?: FictionDetailWhereUniqueInput
  }

  export type CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutFictionInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutFictionInput>
    createMany?: CategoriesOnFictionsCreateManyFictionInputEnvelope
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
  }

  export type KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutFictionInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutFictionInput>
    createMany?: KeywordsOnFictionsCreateManyFictionInputEnvelope
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FictionDetailUpdateOneWithoutFictionInput = {
    create?: XOR<FictionDetailCreateWithoutFictionInput, FictionDetailUncheckedCreateWithoutFictionInput>
    connectOrCreate?: FictionDetailCreateOrConnectWithoutFictionInput
    upsert?: FictionDetailUpsertWithoutFictionInput
    disconnect?: boolean
    delete?: boolean
    connect?: FictionDetailWhereUniqueInput
    update?: XOR<FictionDetailUpdateWithoutFictionInput, FictionDetailUncheckedUpdateWithoutFictionInput>
  }

  export type CategoriesOnFictionsUpdateManyWithoutFictionInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutFictionInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<CategoriesOnFictionsUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: CategoriesOnFictionsCreateManyFictionInputEnvelope
    set?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    update?: Enumerable<CategoriesOnFictionsUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<CategoriesOnFictionsUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<CategoriesOnFictionsScalarWhereInput>
  }

  export type KeywordsOnFictionsUpdateManyWithoutFictionInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutFictionInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<KeywordsOnFictionsUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: KeywordsOnFictionsCreateManyFictionInputEnvelope
    set?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    delete?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    update?: Enumerable<KeywordsOnFictionsUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<KeywordsOnFictionsUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<KeywordsOnFictionsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FictionDetailUncheckedUpdateOneWithoutFictionInput = {
    create?: XOR<FictionDetailCreateWithoutFictionInput, FictionDetailUncheckedCreateWithoutFictionInput>
    connectOrCreate?: FictionDetailCreateOrConnectWithoutFictionInput
    upsert?: FictionDetailUpsertWithoutFictionInput
    disconnect?: boolean
    delete?: boolean
    connect?: FictionDetailWhereUniqueInput
    update?: XOR<FictionDetailUpdateWithoutFictionInput, FictionDetailUncheckedUpdateWithoutFictionInput>
  }

  export type CategoriesOnFictionsUncheckedUpdateManyWithoutFictionInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutFictionInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<CategoriesOnFictionsUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: CategoriesOnFictionsCreateManyFictionInputEnvelope
    set?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    update?: Enumerable<CategoriesOnFictionsUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<CategoriesOnFictionsUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<CategoriesOnFictionsScalarWhereInput>
  }

  export type KeywordsOnFictionsUncheckedUpdateManyWithoutFictionInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutFictionInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutFictionInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutFictionInput>
    upsert?: Enumerable<KeywordsOnFictionsUpsertWithWhereUniqueWithoutFictionInput>
    createMany?: KeywordsOnFictionsCreateManyFictionInputEnvelope
    set?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    delete?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    update?: Enumerable<KeywordsOnFictionsUpdateWithWhereUniqueWithoutFictionInput>
    updateMany?: Enumerable<KeywordsOnFictionsUpdateManyWithWhereWithoutFictionInput>
    deleteMany?: Enumerable<KeywordsOnFictionsScalarWhereInput>
  }

  export type FictionCreateNestedOneWithoutFictiondetailInput = {
    create?: XOR<FictionCreateWithoutFictiondetailInput, FictionUncheckedCreateWithoutFictiondetailInput>
    connectOrCreate?: FictionCreateOrConnectWithoutFictiondetailInput
    connect?: FictionWhereUniqueInput
  }

  export type FictionUpdateOneRequiredWithoutFictiondetailInput = {
    create?: XOR<FictionCreateWithoutFictiondetailInput, FictionUncheckedCreateWithoutFictiondetailInput>
    connectOrCreate?: FictionCreateOrConnectWithoutFictiondetailInput
    upsert?: FictionUpsertWithoutFictiondetailInput
    connect?: FictionWhereUniqueInput
    update?: XOR<FictionUpdateWithoutFictiondetailInput, FictionUncheckedUpdateWithoutFictiondetailInput>
  }

  export type CategoriesOnFictionsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutCategoryInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutCategoryInput>
    createMany?: CategoriesOnFictionsCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
  }

  export type CategoriesOnFictionsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutCategoryInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutCategoryInput>
    createMany?: CategoriesOnFictionsCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
  }

  export type CategoriesOnFictionsUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutCategoryInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoriesOnFictionsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: CategoriesOnFictionsCreateManyCategoryInputEnvelope
    set?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    update?: Enumerable<CategoriesOnFictionsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoriesOnFictionsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoriesOnFictionsScalarWhereInput>
  }

  export type CategoriesOnFictionsUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnFictionsCreateWithoutCategoryInput>, Enumerable<CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnFictionsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoriesOnFictionsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: CategoriesOnFictionsCreateManyCategoryInputEnvelope
    set?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    delete?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    connect?: Enumerable<CategoriesOnFictionsWhereUniqueInput>
    update?: Enumerable<CategoriesOnFictionsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoriesOnFictionsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoriesOnFictionsScalarWhereInput>
  }

  export type KeywordsOnFictionsCreateNestedManyWithoutKeywordInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutKeywordInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutKeywordInput>
    createMany?: KeywordsOnFictionsCreateManyKeywordInputEnvelope
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
  }

  export type KeywordsOnFictionsUncheckedCreateNestedManyWithoutKeywordInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutKeywordInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutKeywordInput>
    createMany?: KeywordsOnFictionsCreateManyKeywordInputEnvelope
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
  }

  export type KeywordsOnFictionsUpdateManyWithoutKeywordInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutKeywordInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutKeywordInput>
    upsert?: Enumerable<KeywordsOnFictionsUpsertWithWhereUniqueWithoutKeywordInput>
    createMany?: KeywordsOnFictionsCreateManyKeywordInputEnvelope
    set?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    delete?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    update?: Enumerable<KeywordsOnFictionsUpdateWithWhereUniqueWithoutKeywordInput>
    updateMany?: Enumerable<KeywordsOnFictionsUpdateManyWithWhereWithoutKeywordInput>
    deleteMany?: Enumerable<KeywordsOnFictionsScalarWhereInput>
  }

  export type KeywordsOnFictionsUncheckedUpdateManyWithoutKeywordInput = {
    create?: XOR<Enumerable<KeywordsOnFictionsCreateWithoutKeywordInput>, Enumerable<KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>>
    connectOrCreate?: Enumerable<KeywordsOnFictionsCreateOrConnectWithoutKeywordInput>
    upsert?: Enumerable<KeywordsOnFictionsUpsertWithWhereUniqueWithoutKeywordInput>
    createMany?: KeywordsOnFictionsCreateManyKeywordInputEnvelope
    set?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    disconnect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    delete?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    connect?: Enumerable<KeywordsOnFictionsWhereUniqueInput>
    update?: Enumerable<KeywordsOnFictionsUpdateWithWhereUniqueWithoutKeywordInput>
    updateMany?: Enumerable<KeywordsOnFictionsUpdateManyWithWhereWithoutKeywordInput>
    deleteMany?: Enumerable<KeywordsOnFictionsScalarWhereInput>
  }

  export type FictionCreateNestedOneWithoutKeywordsInput = {
    create?: XOR<FictionCreateWithoutKeywordsInput, FictionUncheckedCreateWithoutKeywordsInput>
    connectOrCreate?: FictionCreateOrConnectWithoutKeywordsInput
    connect?: FictionWhereUniqueInput
  }

  export type KeywordCreateNestedOneWithoutFictionsInput = {
    create?: XOR<KeywordCreateWithoutFictionsInput, KeywordUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutFictionsInput
    connect?: KeywordWhereUniqueInput
  }

  export type FictionUpdateOneRequiredWithoutKeywordsInput = {
    create?: XOR<FictionCreateWithoutKeywordsInput, FictionUncheckedCreateWithoutKeywordsInput>
    connectOrCreate?: FictionCreateOrConnectWithoutKeywordsInput
    upsert?: FictionUpsertWithoutKeywordsInput
    connect?: FictionWhereUniqueInput
    update?: XOR<FictionUpdateWithoutKeywordsInput, FictionUncheckedUpdateWithoutKeywordsInput>
  }

  export type KeywordUpdateOneRequiredWithoutFictionsInput = {
    create?: XOR<KeywordCreateWithoutFictionsInput, KeywordUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutFictionsInput
    upsert?: KeywordUpsertWithoutFictionsInput
    connect?: KeywordWhereUniqueInput
    update?: XOR<KeywordUpdateWithoutFictionsInput, KeywordUncheckedUpdateWithoutFictionsInput>
  }

  export type FictionCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<FictionCreateWithoutCategoriesInput, FictionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: FictionCreateOrConnectWithoutCategoriesInput
    connect?: FictionWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutFictionsInput = {
    create?: XOR<CategoryCreateWithoutFictionsInput, CategoryUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFictionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type FictionUpdateOneRequiredWithoutCategoriesInput = {
    create?: XOR<FictionCreateWithoutCategoriesInput, FictionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: FictionCreateOrConnectWithoutCategoriesInput
    upsert?: FictionUpsertWithoutCategoriesInput
    connect?: FictionWhereUniqueInput
    update?: XOR<FictionUpdateWithoutCategoriesInput, FictionUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutFictionsInput = {
    create?: XOR<CategoryCreateWithoutFictionsInput, CategoryUncheckedCreateWithoutFictionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutFictionsInput
    upsert?: CategoryUpsertWithoutFictionsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutFictionsInput, CategoryUncheckedUpdateWithoutFictionsInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TokenCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: Enumerable<TokenWhereUniqueInput>
  }

  export type TokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: Enumerable<TokenWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TokenUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    set?: Enumerable<TokenWhereUniqueInput>
    disconnect?: Enumerable<TokenWhereUniqueInput>
    delete?: Enumerable<TokenWhereUniqueInput>
    connect?: Enumerable<TokenWhereUniqueInput>
    update?: Enumerable<TokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TokenScalarWhereInput>
  }

  export type TokenUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TokenCreateWithoutUserInput>, Enumerable<TokenUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokenCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TokenUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TokenCreateManyUserInputEnvelope
    set?: Enumerable<TokenWhereUniqueInput>
    disconnect?: Enumerable<TokenWhereUniqueInput>
    delete?: Enumerable<TokenWhereUniqueInput>
    connect?: Enumerable<TokenWhereUniqueInput>
    update?: Enumerable<TokenUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TokenUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TokenScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutTokensInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTokensInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    upsert?: UserUpsertWithoutTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type FictionDetailCreateWithoutFictionInput = {

  }

  export type FictionDetailUncheckedCreateWithoutFictionInput = {
    id?: number
  }

  export type FictionDetailCreateOrConnectWithoutFictionInput = {
    where: FictionDetailWhereUniqueInput
    create: XOR<FictionDetailCreateWithoutFictionInput, FictionDetailUncheckedCreateWithoutFictionInput>
  }

  export type CategoriesOnFictionsCreateWithoutFictionInput = {
    category: CategoryCreateNestedOneWithoutFictionsInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type CategoriesOnFictionsUncheckedCreateWithoutFictionInput = {
    categoryId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type CategoriesOnFictionsCreateOrConnectWithoutFictionInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    create: XOR<CategoriesOnFictionsCreateWithoutFictionInput, CategoriesOnFictionsUncheckedCreateWithoutFictionInput>
  }

  export type CategoriesOnFictionsCreateManyFictionInputEnvelope = {
    data: Enumerable<CategoriesOnFictionsCreateManyFictionInput>
    skipDuplicates?: boolean
  }

  export type KeywordsOnFictionsCreateWithoutFictionInput = {
    keyword: KeywordCreateNestedOneWithoutFictionsInput
  }

  export type KeywordsOnFictionsUncheckedCreateWithoutFictionInput = {
    keywordId: number
  }

  export type KeywordsOnFictionsCreateOrConnectWithoutFictionInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    create: XOR<KeywordsOnFictionsCreateWithoutFictionInput, KeywordsOnFictionsUncheckedCreateWithoutFictionInput>
  }

  export type KeywordsOnFictionsCreateManyFictionInputEnvelope = {
    data: Enumerable<KeywordsOnFictionsCreateManyFictionInput>
    skipDuplicates?: boolean
  }

  export type FictionDetailUpsertWithoutFictionInput = {
    update: XOR<FictionDetailUpdateWithoutFictionInput, FictionDetailUncheckedUpdateWithoutFictionInput>
    create: XOR<FictionDetailCreateWithoutFictionInput, FictionDetailUncheckedCreateWithoutFictionInput>
  }

  export type FictionDetailUpdateWithoutFictionInput = {

  }

  export type FictionDetailUncheckedUpdateWithoutFictionInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnFictionsUpsertWithWhereUniqueWithoutFictionInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    update: XOR<CategoriesOnFictionsUpdateWithoutFictionInput, CategoriesOnFictionsUncheckedUpdateWithoutFictionInput>
    create: XOR<CategoriesOnFictionsCreateWithoutFictionInput, CategoriesOnFictionsUncheckedCreateWithoutFictionInput>
  }

  export type CategoriesOnFictionsUpdateWithWhereUniqueWithoutFictionInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    data: XOR<CategoriesOnFictionsUpdateWithoutFictionInput, CategoriesOnFictionsUncheckedUpdateWithoutFictionInput>
  }

  export type CategoriesOnFictionsUpdateManyWithWhereWithoutFictionInput = {
    where: CategoriesOnFictionsScalarWhereInput
    data: XOR<CategoriesOnFictionsUpdateManyMutationInput, CategoriesOnFictionsUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type CategoriesOnFictionsScalarWhereInput = {
    AND?: Enumerable<CategoriesOnFictionsScalarWhereInput>
    OR?: Enumerable<CategoriesOnFictionsScalarWhereInput>
    NOT?: Enumerable<CategoriesOnFictionsScalarWhereInput>
    fictionId?: IntFilter | number
    categoryId?: IntFilter | number
    assignedAt?: DateTimeFilter | Date | string
    assignedBy?: StringFilter | string
  }

  export type KeywordsOnFictionsUpsertWithWhereUniqueWithoutFictionInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    update: XOR<KeywordsOnFictionsUpdateWithoutFictionInput, KeywordsOnFictionsUncheckedUpdateWithoutFictionInput>
    create: XOR<KeywordsOnFictionsCreateWithoutFictionInput, KeywordsOnFictionsUncheckedCreateWithoutFictionInput>
  }

  export type KeywordsOnFictionsUpdateWithWhereUniqueWithoutFictionInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    data: XOR<KeywordsOnFictionsUpdateWithoutFictionInput, KeywordsOnFictionsUncheckedUpdateWithoutFictionInput>
  }

  export type KeywordsOnFictionsUpdateManyWithWhereWithoutFictionInput = {
    where: KeywordsOnFictionsScalarWhereInput
    data: XOR<KeywordsOnFictionsUpdateManyMutationInput, KeywordsOnFictionsUncheckedUpdateManyWithoutKeywordsInput>
  }

  export type KeywordsOnFictionsScalarWhereInput = {
    AND?: Enumerable<KeywordsOnFictionsScalarWhereInput>
    OR?: Enumerable<KeywordsOnFictionsScalarWhereInput>
    NOT?: Enumerable<KeywordsOnFictionsScalarWhereInput>
    fictionId?: IntFilter | number
    keywordId?: IntFilter | number
  }

  export type FictionCreateWithoutFictiondetailInput = {
    title: string
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateWithoutFictiondetailInput = {
    id?: number
    title: string
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionCreateOrConnectWithoutFictiondetailInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutFictiondetailInput, FictionUncheckedCreateWithoutFictiondetailInput>
  }

  export type FictionUpsertWithoutFictiondetailInput = {
    update: XOR<FictionUpdateWithoutFictiondetailInput, FictionUncheckedUpdateWithoutFictiondetailInput>
    create: XOR<FictionCreateWithoutFictiondetailInput, FictionUncheckedCreateWithoutFictiondetailInput>
  }

  export type FictionUpdateWithoutFictiondetailInput = {
    title?: StringFieldUpdateOperationsInput | string
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionInput
  }

  export type FictionUncheckedUpdateWithoutFictiondetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionInput
  }

  export type CategoriesOnFictionsCreateWithoutCategoryInput = {
    fiction: FictionCreateNestedOneWithoutCategoriesInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type CategoriesOnFictionsUncheckedCreateWithoutCategoryInput = {
    fictionId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type CategoriesOnFictionsCreateOrConnectWithoutCategoryInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    create: XOR<CategoriesOnFictionsCreateWithoutCategoryInput, CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>
  }

  export type CategoriesOnFictionsCreateManyCategoryInputEnvelope = {
    data: Enumerable<CategoriesOnFictionsCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type CategoriesOnFictionsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    update: XOR<CategoriesOnFictionsUpdateWithoutCategoryInput, CategoriesOnFictionsUncheckedUpdateWithoutCategoryInput>
    create: XOR<CategoriesOnFictionsCreateWithoutCategoryInput, CategoriesOnFictionsUncheckedCreateWithoutCategoryInput>
  }

  export type CategoriesOnFictionsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CategoriesOnFictionsWhereUniqueInput
    data: XOR<CategoriesOnFictionsUpdateWithoutCategoryInput, CategoriesOnFictionsUncheckedUpdateWithoutCategoryInput>
  }

  export type CategoriesOnFictionsUpdateManyWithWhereWithoutCategoryInput = {
    where: CategoriesOnFictionsScalarWhereInput
    data: XOR<CategoriesOnFictionsUpdateManyMutationInput, CategoriesOnFictionsUncheckedUpdateManyWithoutFictionsInput>
  }

  export type KeywordsOnFictionsCreateWithoutKeywordInput = {
    fiction: FictionCreateNestedOneWithoutKeywordsInput
  }

  export type KeywordsOnFictionsUncheckedCreateWithoutKeywordInput = {
    fictionId: number
  }

  export type KeywordsOnFictionsCreateOrConnectWithoutKeywordInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    create: XOR<KeywordsOnFictionsCreateWithoutKeywordInput, KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>
  }

  export type KeywordsOnFictionsCreateManyKeywordInputEnvelope = {
    data: Enumerable<KeywordsOnFictionsCreateManyKeywordInput>
    skipDuplicates?: boolean
  }

  export type KeywordsOnFictionsUpsertWithWhereUniqueWithoutKeywordInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    update: XOR<KeywordsOnFictionsUpdateWithoutKeywordInput, KeywordsOnFictionsUncheckedUpdateWithoutKeywordInput>
    create: XOR<KeywordsOnFictionsCreateWithoutKeywordInput, KeywordsOnFictionsUncheckedCreateWithoutKeywordInput>
  }

  export type KeywordsOnFictionsUpdateWithWhereUniqueWithoutKeywordInput = {
    where: KeywordsOnFictionsWhereUniqueInput
    data: XOR<KeywordsOnFictionsUpdateWithoutKeywordInput, KeywordsOnFictionsUncheckedUpdateWithoutKeywordInput>
  }

  export type KeywordsOnFictionsUpdateManyWithWhereWithoutKeywordInput = {
    where: KeywordsOnFictionsScalarWhereInput
    data: XOR<KeywordsOnFictionsUpdateManyMutationInput, KeywordsOnFictionsUncheckedUpdateManyWithoutFictionsInput>
  }

  export type FictionCreateWithoutKeywordsInput = {
    title: string
    fictiondetail?: FictionDetailCreateNestedOneWithoutFictionInput
    categories?: CategoriesOnFictionsCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateWithoutKeywordsInput = {
    id?: number
    title: string
    fictiondetail?: FictionDetailUncheckedCreateNestedOneWithoutFictionInput
    categories?: CategoriesOnFictionsUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionCreateOrConnectWithoutKeywordsInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutKeywordsInput, FictionUncheckedCreateWithoutKeywordsInput>
  }

  export type KeywordCreateWithoutFictionsInput = {
    name: string
  }

  export type KeywordUncheckedCreateWithoutFictionsInput = {
    id?: number
    name: string
  }

  export type KeywordCreateOrConnectWithoutFictionsInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutFictionsInput, KeywordUncheckedCreateWithoutFictionsInput>
  }

  export type FictionUpsertWithoutKeywordsInput = {
    update: XOR<FictionUpdateWithoutKeywordsInput, FictionUncheckedUpdateWithoutKeywordsInput>
    create: XOR<FictionCreateWithoutKeywordsInput, FictionUncheckedCreateWithoutKeywordsInput>
  }

  export type FictionUpdateWithoutKeywordsInput = {
    title?: StringFieldUpdateOperationsInput | string
    fictiondetail?: FictionDetailUpdateOneWithoutFictionInput
    categories?: CategoriesOnFictionsUpdateManyWithoutFictionInput
  }

  export type FictionUncheckedUpdateWithoutKeywordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    fictiondetail?: FictionDetailUncheckedUpdateOneWithoutFictionInput
    categories?: CategoriesOnFictionsUncheckedUpdateManyWithoutFictionInput
  }

  export type KeywordUpsertWithoutFictionsInput = {
    update: XOR<KeywordUpdateWithoutFictionsInput, KeywordUncheckedUpdateWithoutFictionsInput>
    create: XOR<KeywordCreateWithoutFictionsInput, KeywordUncheckedCreateWithoutFictionsInput>
  }

  export type KeywordUpdateWithoutFictionsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KeywordUncheckedUpdateWithoutFictionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FictionCreateWithoutCategoriesInput = {
    title: string
    fictiondetail?: FictionDetailCreateNestedOneWithoutFictionInput
    keywords?: KeywordsOnFictionsCreateNestedManyWithoutFictionInput
  }

  export type FictionUncheckedCreateWithoutCategoriesInput = {
    id?: number
    title: string
    fictiondetail?: FictionDetailUncheckedCreateNestedOneWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedCreateNestedManyWithoutFictionInput
  }

  export type FictionCreateOrConnectWithoutCategoriesInput = {
    where: FictionWhereUniqueInput
    create: XOR<FictionCreateWithoutCategoriesInput, FictionUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutFictionsInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutFictionsInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutFictionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutFictionsInput, CategoryUncheckedCreateWithoutFictionsInput>
  }

  export type FictionUpsertWithoutCategoriesInput = {
    update: XOR<FictionUpdateWithoutCategoriesInput, FictionUncheckedUpdateWithoutCategoriesInput>
    create: XOR<FictionCreateWithoutCategoriesInput, FictionUncheckedCreateWithoutCategoriesInput>
  }

  export type FictionUpdateWithoutCategoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    fictiondetail?: FictionDetailUpdateOneWithoutFictionInput
    keywords?: KeywordsOnFictionsUpdateManyWithoutFictionInput
  }

  export type FictionUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    fictiondetail?: FictionDetailUncheckedUpdateOneWithoutFictionInput
    keywords?: KeywordsOnFictionsUncheckedUpdateManyWithoutFictionInput
  }

  export type CategoryUpsertWithoutFictionsInput = {
    update: XOR<CategoryUpdateWithoutFictionsInput, CategoryUncheckedUpdateWithoutFictionsInput>
    create: XOR<CategoryCreateWithoutFictionsInput, CategoryUncheckedCreateWithoutFictionsInput>
  }

  export type CategoryUpdateWithoutFictionsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutFictionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TokenCreateWithoutUserInput = {
    payload: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenUncheckedCreateWithoutUserInput = {
    id?: number
    payload: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenCreateManyUserInputEnvelope = {
    data: Enumerable<TokenCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TokenUpsertWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    update: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenUpdateWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    data: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
  }

  export type TokenUpdateManyWithWhereWithoutUserInput = {
    where: TokenScalarWhereInput
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyWithoutTokensInput>
  }

  export type TokenScalarWhereInput = {
    AND?: Enumerable<TokenScalarWhereInput>
    OR?: Enumerable<TokenScalarWhereInput>
    NOT?: Enumerable<TokenScalarWhereInput>
    id?: IntFilter | number
    payload?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutTokensInput = {
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutTokensInput = {
    id?: number
    phone?: string | null
    email?: string | null
    name: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpsertWithoutTokensInput = {
    update: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpdateWithoutTokensInput = {
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoriesOnFictionsCreateManyFictionInput = {
    categoryId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type KeywordsOnFictionsCreateManyFictionInput = {
    keywordId: number
  }

  export type CategoriesOnFictionsUpdateWithoutFictionInput = {
    category?: CategoryUpdateOneRequiredWithoutFictionsInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnFictionsUncheckedUpdateWithoutFictionInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnFictionsUncheckedUpdateManyWithoutCategoriesInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type KeywordsOnFictionsUpdateWithoutFictionInput = {
    keyword?: KeywordUpdateOneRequiredWithoutFictionsInput
  }

  export type KeywordsOnFictionsUncheckedUpdateWithoutFictionInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordsOnFictionsUncheckedUpdateManyWithoutKeywordsInput = {
    keywordId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriesOnFictionsCreateManyCategoryInput = {
    fictionId: number
    assignedAt?: Date | string
    assignedBy: string
  }

  export type CategoriesOnFictionsUpdateWithoutCategoryInput = {
    fiction?: FictionUpdateOneRequiredWithoutCategoriesInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnFictionsUncheckedUpdateWithoutCategoryInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnFictionsUncheckedUpdateManyWithoutFictionsInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type KeywordsOnFictionsCreateManyKeywordInput = {
    fictionId: number
  }

  export type KeywordsOnFictionsUpdateWithoutKeywordInput = {
    fiction?: FictionUpdateOneRequiredWithoutKeywordsInput
  }

  export type KeywordsOnFictionsUncheckedUpdateWithoutKeywordInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type KeywordsOnFictionsUncheckedUpdateManyWithoutFictionsInput = {
    fictionId?: IntFieldUpdateOperationsInput | number
  }

  export type TokenCreateManyUserInput = {
    id?: number
    payload: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TokenUpdateWithoutUserInput = {
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}