
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.12.0
 * Query Engine version: 22b822189f46ef0dc5c5b503368d1bee01213980
 */
Prisma.prismaVersion = {
  client: "3.12.0",
  engine: "22b822189f46ef0dc5c5b503368d1bee01213980"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.FictionScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  author: 'author',
  nationality: 'nationality',
  genre: 'genre',
  startDate: 'startDate',
  endDate: 'endDate',
  original: 'original',
  platforms: 'platforms',
  image: 'image',
  synopsis: 'synopsis',
  characters: 'characters',
  userId: 'userId'
});

exports.Prisma.FictionStatScalarFieldEnum = makeEnum({
  id: 'id',
  fictionId: 'fictionId',
  originality: 'originality',
  verisimilitude: 'verisimilitude',
  synopsisComposition: 'synopsisComposition',
  character: 'character',
  writing: 'writing',
  value: 'value'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.KeywordScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.KeywordsOnFictionsScalarFieldEnum = makeEnum({
  fictionId: 'fictionId',
  keywordId: 'keywordId'
});

exports.Prisma.CategoriesOnFictionsScalarFieldEnum = makeEnum({
  fictionId: 'fictionId',
  categoryId: 'categoryId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  phone: 'phone',
  email: 'email',
  name: 'name',
  avatar: 'avatar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TokenScalarFieldEnum = makeEnum({
  id: 'id',
  payload: 'payload',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Fiction: 'Fiction',
  FictionStat: 'FictionStat',
  Category: 'Category',
  Keyword: 'Keyword',
  KeywordsOnFictions: 'KeywordsOnFictions',
  CategoriesOnFictions: 'CategoriesOnFictions',
  User: 'User',
  Token: 'Token'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
