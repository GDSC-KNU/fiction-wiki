
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.2.1
 * Query Engine version: 2920a97877e12e055c1333079b8d19cee7f33826
 */
Prisma.prismaVersion = {
  client: "4.2.1",
  engine: "2920a97877e12e055c1333079b8d19cee7f33826"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
});

exports.Prisma.AuthorScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  relatedName: 'relatedName',
  description: 'description',
  nationality: 'nationality',
  sns: 'sns'
});

exports.Prisma.CategoriesOnFictionsScalarFieldEnum = makeEnum({
  fictionId: 'fictionId',
  categoryId: 'categoryId'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.CommentScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  comment: 'comment',
  createdById: 'createdById',
  fictionId: 'fictionId'
});

exports.Prisma.FavScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  fictionId: 'fictionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.FictionScalarFieldEnum = makeEnum({
  id: 'id',
  mediaMix: 'mediaMix',
  type: 'type',
  volume: 'volume',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  relatedTitle: 'relatedTitle',
  relatedAuthor: 'relatedAuthor',
  nationality: 'nationality',
  genre: 'genre',
  startDate: 'startDate',
  endDate: 'endDate',
  currentState: 'currentState',
  original: 'original',
  platforms: 'platforms',
  image: 'image',
  synopsis: 'synopsis',
  characters: 'characters',
  userId: 'userId',
  isAdult: 'isAdult',
  authorId: 'authorId'
});

exports.Prisma.FictionStatScalarFieldEnum = makeEnum({
  id: 'id',
  fictionId: 'fictionId',
  originality: 'originality',
  verisimilitude: 'verisimilitude',
  synopsisComposition: 'synopsisComposition',
  character: 'character',
  writing: 'writing',
  value: 'value'
});

exports.Prisma.KeywordScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  isOfMC: 'isOfMC',
  isOfHeroine: 'isOfHeroine'
});

exports.Prisma.KeywordsOnFictionsScalarFieldEnum = makeEnum({
  fictionId: 'fictionId',
  keywordId: 'keywordId'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TokenScalarFieldEnum = makeEnum({
  id: 'id',
  payload: 'payload',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserFictionStatScalarFieldEnum = makeEnum({
  id: 'id',
  fictionId: 'fictionId',
  originality: 'originality',
  verisimilitude: 'verisimilitude',
  synopsisComposition: 'synopsisComposition',
  character: 'character',
  writing: 'writing',
  value: 'value',
  total: 'total'
});

exports.Prisma.UserRationOnFictionScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  userFictionStatId: 'userFictionStatId',
  originality: 'originality',
  verisimilitude: 'verisimilitude',
  synopsisComposition: 'synopsisComposition',
  character: 'character',
  writing: 'writing',
  value: 'value',
  comment: 'comment'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  phone: 'phone',
  email: 'email',
  name: 'name',
  avatar: 'avatar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  emailVerified: 'emailVerified',
  image: 'image'
});

exports.Prisma.VerificationTokenScalarFieldEnum = makeEnum({
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
});


exports.Prisma.ModelName = makeEnum({
  Fiction: 'Fiction',
  Author: 'Author',
  FictionStat: 'FictionStat',
  UserFictionStat: 'UserFictionStat',
  Keyword: 'Keyword',
  KeywordsOnFictions: 'KeywordsOnFictions',
  Category: 'Category',
  CategoriesOnFictions: 'CategoriesOnFictions',
  User: 'User',
  UserRationOnFiction: 'UserRationOnFiction',
  Token: 'Token',
  Fav: 'Fav',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Comment: 'Comment'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
