generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Fiction {
  id            Int                 @id @default(autoincrement())
  categories    CategoriesOnFictions[]
  keywords      KeywordsOnFictions[]
  fictionStat   FictionStat?
  userFictionStat UserFictionStat? 
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  title         String
  author        String
  nationality   String
  genre         String
  startDate     DateTime
  endDate       DateTime
  currentState  String      
  original      String
  platforms     String
  image         String              @db.MediumText
  synopsis      String              @db.MediumText
  characters    String              @db.MediumText
  user          User                @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId        String
  favs          Fav[]
  isAdult       Boolean?            @default(false)
}

model FictionStat {
  id                    Int       @id @default(autoincrement())
  fiction               Fiction   @relation(fields: [fictionId], references: [id], onDelete:Cascade)
  fictionId             Int     @unique
  originality           Int
  verisimilitude        Int
  synopsisComposition   Int
  character             Int
  writing               Int
  value                 Int
}

model UserFictionStat {
    id                    Int       @id @default(autoincrement())
    fiction               Fiction   @relation(fields: [fictionId], references: [id], onDelete:Cascade)
    fictionId             Int @unique
    users                 User[]
    userRationOnFictions  UserRationOnFiction[]
    originality           Int
    verisimilitude        Int
    synopsisComposition   Int
    character             Int
    writing               Int
    value                 Int
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  fictions CategoriesOnFictions[]
}

model Keyword {
  id            Int                    @id @default(autoincrement())
  name          String
  isOfMC        Boolean     @default(false)
  isOfHeroine   Boolean     @default(false)
  fictions      KeywordsOnFictions[]
}

model KeywordsOnFictions {
  fiction       Fiction     @relation(fields: [fictionId], references: [id])
  fictionId     Int
  keyword       Keyword     @relation(fields: [keywordId], references: [id])
  keywordId     Int
  @@id([fictionId, keywordId])
}

model CategoriesOnFictions {
  fiction       Fiction     @relation(fields: [fictionId], references: [id])
  fictionId     Int
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int 
  @@id([fictionId, categoryId])
}

model User {
  id        String      @id @default(cuid())
  phone     String?     @unique
  email     String?     @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]
  fictions  Fiction[]
  fav       Fav[]
  // ratedFictionStat FictionStatFromUser @relation(fields: [ratedFictionStatId], references: [id], onUpdate: NoAction)
  // ratedFictionStatId Int
  ratedFictions UserFictionStat[]
  userRationOnFictions  UserRationOnFiction[]
  // NExt Auth0
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model UserRationOnFiction {
  id                    Int       @id @default(autoincrement())
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String    
  userFictionStat       UserFictionStat @relation(fields: [userFictionStatId], references: [id], onDelete:Cascade)
  userFictionStatId     Int
  originality           Int
  verisimilitude        Int
  synopsisComposition   Int
  character             Int
  writing               Int
  value                 Int
  comment               String
}

model Token {
  id            Int         @id @default(autoincrement())
  payload       String      @unique
  user          User        @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Fav {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId        String
  fiction       Fiction     @relation(fields: [fictionId], references: [id], onDelete:Cascade)
  fictionId     Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}