/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/fictions/create"],{

/***/ "./node_modules/next/dist/shared/lib/dynamic.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/dynamic.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _instanceof = (__webpack_require__(/*! @swc/helpers/lib/_instanceof.js */ \"./node_modules/@swc/helpers/lib/_instanceof.js\")[\"default\"]);\n\n\"client\";\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = dynamic;\nexports.noSSR = noSSR;\n\nvar _extends = (__webpack_require__(/*! @swc/helpers/lib/_extends.js */ \"./node_modules/@swc/helpers/lib/_extends.js\")[\"default\"]);\n\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\n\nvar _react = _interop_require_default(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _loadable = _interop_require_default(__webpack_require__(/*! ./loadable */ \"./node_modules/next/dist/shared/lib/loadable.js\"));\n\nfunction dynamic(dynamicOptions, options) {\n  var loadableFn = _loadable.default;\n  var loadableOptions = (options == null ? void 0 : options.suspense) ? {} : {\n    // A loading component is not required, so we default it\n    loading: function (param) {\n      var error = param.error,\n          isLoading = param.isLoading,\n          pastDelay = param.pastDelay;\n      if (!pastDelay) return null;\n\n      if (true) {\n        if (isLoading) {\n          return null;\n        }\n\n        if (error) {\n          return /*#__PURE__*/_react.default.createElement(\"p\", null, error.message, /*#__PURE__*/_react.default.createElement(\"br\", null), error.stack);\n        }\n      }\n\n      return null;\n    }\n  }; // Support for direct import(), eg: dynamic(import('../hello-world'))\n  // Note that this is only kept for the edge case where someone is passing in a promise as first argument\n  // The react-loadable babel plugin will turn dynamic(import('../hello-world')) into dynamic(() => import('../hello-world'))\n  // To make sure we don't execute the import without rendering first\n\n  if (_instanceof(dynamicOptions, Promise)) {\n    loadableOptions.loader = function () {\n      return dynamicOptions;\n    }; // Support for having import as a function, eg: dynamic(() => import('../hello-world'))\n\n  } else if (typeof dynamicOptions === \"function\") {\n    loadableOptions.loader = dynamicOptions; // Support for having first argument being options, eg: dynamic({loader: import('../hello-world')})\n  } else if (typeof dynamicOptions === \"object\") {\n    loadableOptions = _extends({}, loadableOptions, dynamicOptions);\n  } // Support for passing options, eg: dynamic(import('../hello-world'), {loading: () => <p>Loading something</p>})\n\n\n  loadableOptions = _extends({}, loadableOptions, options); // Error if Fizz rendering is not enabled and `suspense` option is set to true\n\n  if (false) {}\n\n  if (loadableOptions.suspense) {\n    if (true) {\n      /**\n      * TODO: Currently, next/dynamic will opt-in to React.lazy if { suspense: true } is used\n      * React 18 will always resolve the Suspense boundary on the server-side, effectively ignoring the ssr option\n      *\n      * In the future, when React Suspense with third-party libraries is stable, we can implement a custom version of\n      * React.lazy that can suspense on the server-side while only loading the component on the client-side\n      */\n      if (loadableOptions.ssr === false) {\n        console.warn('\"ssr: false\" is ignored by next/dynamic because you can not enable \"suspense\" while disabling \"ssr\" at the same time. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense');\n      }\n\n      if (loadableOptions.loading != null) {\n        console.warn('\"loading\" is ignored by next/dynamic because you have enabled \"suspense\". Place your loading element in your suspense boundary\\'s \"fallback\" prop instead. Read more: https://nextjs.org/docs/messages/invalid-dynamic-suspense');\n      }\n    }\n\n    delete loadableOptions.ssr;\n    delete loadableOptions.loading;\n  } // coming from build/babel/plugins/react-loadable-plugin.js\n\n\n  if (loadableOptions.loadableGenerated) {\n    loadableOptions = _extends({}, loadableOptions, loadableOptions.loadableGenerated);\n    delete loadableOptions.loadableGenerated;\n  } // support for disabling server side rendering, eg: dynamic(import('../hello-world'), {ssr: false}).\n  // skip `ssr` for suspense mode and opt-in React.lazy directly\n\n\n  if (typeof loadableOptions.ssr === \"boolean\" && !loadableOptions.suspense) {\n    if (!loadableOptions.ssr) {\n      delete loadableOptions.ssr;\n      return noSSR(loadableFn, loadableOptions);\n    }\n\n    delete loadableOptions.ssr;\n  }\n\n  return loadableFn(loadableOptions);\n}\n\n\"client\";\nvar isServerSide = \"object\" === \"undefined\";\n\nfunction noSSR(LoadableInitializer, loadableOptions) {\n  // Removing webpack and modules means react-loadable won't try preloading\n  delete loadableOptions.webpack;\n  delete loadableOptions.modules; // This check is necessary to prevent react-loadable from initializing on the server\n\n  if (!isServerSide) {\n    return LoadableInitializer(loadableOptions);\n  }\n\n  var Loading = loadableOptions.loading; // This will only be rendered on the server side\n\n  return function () {\n    return /*#__PURE__*/_react.default.createElement(Loading, {\n      error: null,\n      isLoading: true,\n      pastDelay: false,\n      timedOut: false\n    });\n  };\n}\n\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n  Object.defineProperty(exports.default, \"__esModule\", {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n} //# sourceMappingURL=dynamic.js.map\n\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = module.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      module.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      module.hot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          module.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        module.hot.invalidate();\n      }\n    }\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/dynamic.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/loadable-context.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/loadable-context.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.LoadableContext = void 0;\n\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\n\nvar _react = _interop_require_default(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar LoadableContext = _react.default.createContext(null);\n\nexports.LoadableContext = LoadableContext;\n\nif (true) {\n  LoadableContext.displayName = \"LoadableContext\";\n} //# sourceMappingURL=loadable-context.js.map\n\n\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = module.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      module.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      module.hot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          module.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        module.hot.invalidate();\n      }\n    }\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvbG9hZGFibGUtY29udGV4dC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQ3pDRyxLQUFLLEVBQUU7QUFEa0MsQ0FBN0NILEVBQUFBO0FBR0FFLHVCQUFBQSxHQUEwQixLQUFLLENBQS9CQTs7QUFDQSxJQUFJRyx3QkFBd0IsR0FBR0MsbUpBQS9COztBQUNBLElBQUlFLE1BQU0sR0FBR0gsd0JBQXdCLENBQUNDLG1CQUFPLENBQUMsNENBQUQsQ0FBUixDQUFyQzs7QUFDQSxJQUFNRixlQUFlLEdBQUdJLE1BQU0sQ0FBQ0QsT0FBUEMsQ0FBZUMsYUFBZkQsQ0FBNkIsSUFBN0JBLENBQXhCOztBQUNBTix1QkFBQUEsR0FBMEJFLGVBQTFCRjs7QUFDQSxJQUFJUSxJQUFKLEVBQTJDO0VBQ3ZDTixlQUFlLENBQUNPLFdBQWhCUCxHQUE4QixpQkFBOUJBO0FBQ0gsQyxDQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9sb2FkYWJsZS1jb250ZXh0LmpzP2VjMjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkxvYWRhYmxlQ29udGV4dCA9IHZvaWQgMDtcbnZhciBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL2xpYi9faW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuanNcIikuZGVmYXVsdDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IExvYWRhYmxlQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnRzLkxvYWRhYmxlQ29udGV4dCA9IExvYWRhYmxlQ29udGV4dDtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgTG9hZGFibGVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0xvYWRhYmxlQ29udGV4dCc7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvYWRhYmxlLWNvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTG9hZGFibGVDb250ZXh0IiwiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0IiwicmVxdWlyZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJjcmVhdGVDb250ZXh0IiwicHJvY2VzcyIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/loadable-context.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/loadable.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/loadable.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _classCallCheck = (__webpack_require__(/*! @swc/helpers/lib/_class_call_check.js */ \"./node_modules/@swc/helpers/lib/_class_call_check.js\")[\"default\"]);\n\nvar _createClass = (__webpack_require__(/*! @swc/helpers/lib/_create_class.js */ \"./node_modules/@swc/helpers/lib/_create_class.js\")[\"default\"]);\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _extends = (__webpack_require__(/*! @swc/helpers/lib/_extends.js */ \"./node_modules/@swc/helpers/lib/_extends.js\")[\"default\"]);\n\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\n\nvar _react = _interop_require_default(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _loadableContext = __webpack_require__(/*! ./loadable-context */ \"./node_modules/next/dist/shared/lib/loadable-context.js\");\n\nvar useSyncExternalStore = ( true ? __webpack_require__(/*! react */ \"./node_modules/react/index.js\") : 0).useSyncExternalStore;\nvar ALL_INITIALIZERS = [];\nvar READY_INITIALIZERS = [];\nvar initialized = false;\n\nfunction load(loader) {\n  var promise = loader();\n  var state = {\n    loading: true,\n    loaded: null,\n    error: null\n  };\n  state.promise = promise.then(function (loaded) {\n    state.loading = false;\n    state.loaded = loaded;\n    return loaded;\n  }).catch(function (err) {\n    state.loading = false;\n    state.error = err;\n    throw err;\n  });\n  return state;\n}\n\nfunction resolve(obj) {\n  return obj && obj.__esModule ? obj.default : obj;\n}\n\nfunction createLoadableComponent(loadFn, options) {\n  var init = function init() {\n    if (!subscription) {\n      var sub = new LoadableSubscription(loadFn, opts);\n      subscription = {\n        getCurrentValue: sub.getCurrentValue.bind(sub),\n        subscribe: sub.subscribe.bind(sub),\n        retry: sub.retry.bind(sub),\n        promise: sub.promise.bind(sub)\n      };\n    }\n\n    return subscription.promise();\n  };\n\n  var useLoadableModule = function useLoadableModule() {\n    _s();\n\n    init();\n\n    var context = _react.default.useContext(_loadableContext.LoadableContext);\n\n    if (context && Array.isArray(opts.modules)) {\n      opts.modules.forEach(function (moduleName) {\n        context(moduleName);\n      });\n    }\n  };\n\n  var LoadableImpl = function LoadableImpl(props, ref) {\n    _s1();\n\n    useLoadableModule();\n    var state = useSyncExternalStore(subscription.subscribe, subscription.getCurrentValue, subscription.getCurrentValue);\n\n    _react.default.useImperativeHandle(ref, function () {\n      return {\n        retry: subscription.retry\n      };\n    }, []);\n\n    return _react.default.useMemo(function () {\n      if (state.loading || state.error) {\n        return _react.default.createElement(opts.loading, {\n          isLoading: state.loading,\n          pastDelay: state.pastDelay,\n          timedOut: state.timedOut,\n          error: state.error,\n          retry: subscription.retry\n        });\n      } else if (state.loaded) {\n        return _react.default.createElement(resolve(state.loaded), props);\n      } else {\n        return null;\n      }\n    }, [props, state]);\n  };\n\n  var LazyImpl = function LazyImpl(props, ref) {\n    _s2();\n\n    useLoadableModule();\n    return _react.default.createElement(opts.lazy, _extends({}, props, {\n      ref: ref\n    }));\n  };\n\n  var _s = $RefreshSig$(),\n      _s1 = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  var opts = Object.assign({\n    loader: null,\n    loading: null,\n    delay: 200,\n    timeout: null,\n    webpack: null,\n    modules: null,\n    suspense: false\n  }, options);\n\n  if (opts.suspense) {\n    opts.lazy = _react.default.lazy(opts.loader);\n  }\n  /** @type LoadableSubscription */\n\n\n  var subscription = null; // Server only\n\n  if (false) {} // Client only\n\n\n  if (!initialized && \"object\" !== \"undefined\") {\n    // require.resolveWeak check is needed for environments that don't have it available like Jest\n    var moduleIds = opts.webpack && \"function\" === \"function\" ? opts.webpack() : opts.modules;\n\n    if (moduleIds) {\n      READY_INITIALIZERS.push(function (ids) {\n        var _iteratorNormalCompletion = true,\n            _didIteratorError = false,\n            _iteratorError = undefined;\n\n        try {\n          for (var _iterator = moduleIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var moduleId = _step.value;\n\n            if (ids.indexOf(moduleId) !== -1) {\n              return init();\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      });\n    }\n  }\n\n  _s(useLoadableModule, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n  _s1(LoadableImpl, \"FetqI339RA+IfltT8VNzX8RMZ2Q=\", false, function () {\n    return [useLoadableModule, useSyncExternalStore];\n  });\n\n  _s2(LazyImpl, \"XqzK/zLs5iif4pSUu9JgPZdGT3E=\", false, function () {\n    return [useLoadableModule];\n  });\n\n  var LoadableComponent = opts.suspense ? LazyImpl : LoadableImpl;\n\n  LoadableComponent.preload = function () {\n    return init();\n  };\n\n  LoadableComponent.displayName = \"LoadableComponent\";\n  return _react.default.forwardRef(LoadableComponent);\n}\n\nvar LoadableSubscription = /*#__PURE__*/function () {\n  function LoadableSubscription(loadFn, opts) {\n    _classCallCheck(this, LoadableSubscription);\n\n    this._loadFn = loadFn;\n    this._opts = opts;\n    this._callbacks = new Set();\n    this._delay = null;\n    this._timeout = null;\n    this.retry();\n  }\n\n  _createClass(LoadableSubscription, [{\n    key: \"promise\",\n    value: function promise() {\n      return this._res.promise;\n    }\n  }, {\n    key: \"retry\",\n    value: function retry() {\n      var _this = this;\n\n      this._clearTimeouts();\n\n      this._res = this._loadFn(this._opts.loader);\n      this._state = {\n        pastDelay: false,\n        timedOut: false\n      };\n      var ref = this,\n          res = ref._res,\n          opts = ref._opts;\n\n      if (res.loading) {\n        if (typeof opts.delay === \"number\") {\n          if (opts.delay === 0) {\n            this._state.pastDelay = true;\n          } else {\n            this._delay = setTimeout(function () {\n              _this._update({\n                pastDelay: true\n              });\n            }, opts.delay);\n          }\n        }\n\n        if (typeof opts.timeout === \"number\") {\n          this._timeout = setTimeout(function () {\n            _this._update({\n              timedOut: true\n            });\n          }, opts.timeout);\n        }\n      }\n\n      this._res.promise.then(function () {\n        _this._update({});\n\n        _this._clearTimeouts();\n      }).catch(function (_err) {\n        _this._update({});\n\n        _this._clearTimeouts();\n      });\n\n      this._update({});\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(partial) {\n      this._state = _extends({}, this._state, {\n        error: this._res.error,\n        loaded: this._res.loaded,\n        loading: this._res.loading\n      }, partial);\n\n      this._callbacks.forEach(function (callback) {\n        return callback();\n      });\n    }\n  }, {\n    key: \"_clearTimeouts\",\n    value: function _clearTimeouts() {\n      clearTimeout(this._delay);\n      clearTimeout(this._timeout);\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this._state;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      var _this = this;\n\n      this._callbacks.add(callback);\n\n      return function () {\n        _this._callbacks.delete(callback);\n      };\n    }\n  }]);\n\n  return LoadableSubscription;\n}();\n\nfunction Loadable(opts) {\n  return createLoadableComponent(load, opts);\n}\n\n_c = Loadable;\n\nfunction flushInitializers(initializers, ids) {\n  var promises = [];\n\n  while (initializers.length) {\n    var init = initializers.pop();\n    promises.push(init(ids));\n  }\n\n  return Promise.all(promises).then(function () {\n    if (initializers.length) {\n      return flushInitializers(initializers, ids);\n    }\n  });\n}\n\nLoadable.preloadAll = function () {\n  return new Promise(function (resolveInitializers, reject) {\n    flushInitializers(ALL_INITIALIZERS).then(resolveInitializers, reject);\n  });\n};\n\nLoadable.preloadReady = function () {\n  var ids = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n  return new Promise(function (resolvePreload) {\n    var res = function () {\n      initialized = true;\n      return resolvePreload();\n    }; // We always will resolve, errors should be handled within loading UIs.\n\n\n    flushInitializers(READY_INITIALIZERS, ids).then(res, res);\n  });\n};\n\nif (true) {\n  window.__NEXT_PRELOADREADY = Loadable.preloadReady;\n}\n\nvar _default = Loadable;\nexports[\"default\"] = _default; //# sourceMappingURL=loadable.js.map\n\nvar _c;\n\n$RefreshReg$(_c, \"Loadable\");\n; // Wrapped in an IIFE to avoid polluting the global scope\n\n;\n\n(function () {\n  var _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n  // to extract CSS. For backwards compatibility, we need to check we're in a\n  // browser context before continuing.\n\n\n  if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n  '$RefreshHelpers$' in self) {\n    // @ts-ignore __webpack_module__ is global\n    var currentExports = module.exports; // @ts-ignore __webpack_module__ is global\n\n    var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n    // templating and execution.\n\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n    // it is a Refresh Boundary.\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      // Save the previous exports on update so we can compare the boundary\n      // signatures.\n      module.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      }); // Unconditionally accept an update to this module, we'll check if it's\n      // still a Refresh Boundary later.\n      // @ts-ignore importMeta is replaced in the loader\n\n\n      module.hot.accept(); // This field is set when the previous version of this module was a\n      // Refresh Boundary, letting us know we need to check for invalidation or\n      // enqueue an update.\n\n      if (prevExports !== null) {\n        // A boundary can become ineligible if its exports are incompatible\n        // with the previous exports.\n        //\n        // For example, if you add/remove/change exports, we'll want to\n        // re-execute the importing modules, and force those components to\n        // re-render. Similarly, if you convert a class component to a\n        // function, we want to invalidate the boundary.\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          module.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      // Since we just executed the code for the module, it's possible that the\n      // new exports made it ineligible for being a boundary.\n      // We only care about the case when we were _previously_ a boundary,\n      // because we already accepted this update (accidental side effect).\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        module.hot.invalidate();\n      }\n    }\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/loadable.js\n"));

/***/ }),

/***/ "./node_modules/next/dynamic.js":
/*!**************************************!*\
  !*** ./node_modules/next/dynamic.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/shared/lib/dynamic */ \"./node_modules/next/dist/shared/lib/dynamic.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9keW5hbWljLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBQSx1SEFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9keW5hbWljLmpzPzczZDQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3Qvc2hhcmVkL2xpYi9keW5hbWljJylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dynamic.js\n"));

/***/ }),

/***/ "./node_modules/react-chartjs-2/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/react-chartjs-2/dist/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Bar\": function() { return /* binding */ Bar; },\n/* harmony export */   \"Bubble\": function() { return /* binding */ Bubble; },\n/* harmony export */   \"Chart\": function() { return /* binding */ Chart; },\n/* harmony export */   \"Doughnut\": function() { return /* binding */ Doughnut; },\n/* harmony export */   \"Line\": function() { return /* binding */ Line; },\n/* harmony export */   \"Pie\": function() { return /* binding */ Pie; },\n/* harmony export */   \"PolarArea\": function() { return /* binding */ PolarArea; },\n/* harmony export */   \"Radar\": function() { return /* binding */ Radar; },\n/* harmony export */   \"Scatter\": function() { return /* binding */ Scatter; },\n/* harmony export */   \"getDatasetAtEvent\": function() { return /* binding */ getDatasetAtEvent; },\n/* harmony export */   \"getElementAtEvent\": function() { return /* binding */ getElementAtEvent; },\n/* harmony export */   \"getElementsAtEvent\": function() { return /* binding */ getElementsAtEvent; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chart.js */ \"./node_modules/chart.js/dist/chart.mjs\");\n\n\nconst defaultDatasetIdKey = 'label';\n\nfunction reforwardRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nfunction setOptions(chart, nextOptions) {\n  Object.assign(chart.options, nextOptions);\n}\n\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\n\nfunction setDatasets(currentData, nextDatasets) {\n  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  const addedDatasets = [];\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]); // There is no original to update, so simply add new one\n\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return { ...nextDataset\n      };\n    }\n\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\n\nfunction cloneData(data) {\n  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  const nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n    intersect: true\n  }, false);\n}\n\nfunction ChartComponent(param, ref) {\n  let {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...props\n  } = param;\n  const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const chartRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n    chartRef.current = new chart_js__WEBPACK_IMPORTED_MODULE_1__.Chart(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options\n      },\n      plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!chartRef.current) return;\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    renderChart();\n    return () => destroyChart();\n  }, []);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"canvas\", Object.assign({\n    ref: canvasRef,\n    role: \"img\",\n    height: height,\n    width: width\n  }, props), fallbackContent);\n}\n\nconst Chart = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n  chart_js__WEBPACK_IMPORTED_MODULE_1__.Chart.register(registerables);\n  return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Chart, Object.assign({}, props, {\n    ref: ref,\n    type: type\n  })));\n}\n\nconst Line = /* #__PURE__ */createTypedChart('line', chart_js__WEBPACK_IMPORTED_MODULE_1__.LineController);\nconst Bar = /* #__PURE__ */createTypedChart('bar', chart_js__WEBPACK_IMPORTED_MODULE_1__.BarController);\nconst Radar = /* #__PURE__ */createTypedChart('radar', chart_js__WEBPACK_IMPORTED_MODULE_1__.RadarController);\nconst Doughnut = /* #__PURE__ */createTypedChart('doughnut', chart_js__WEBPACK_IMPORTED_MODULE_1__.DoughnutController);\nconst PolarArea = /* #__PURE__ */createTypedChart('polarArea', chart_js__WEBPACK_IMPORTED_MODULE_1__.PolarAreaController);\nconst Bubble = /* #__PURE__ */createTypedChart('bubble', chart_js__WEBPACK_IMPORTED_MODULE_1__.BubbleController);\nconst Pie = /* #__PURE__ */createTypedChart('pie', chart_js__WEBPACK_IMPORTED_MODULE_1__.PieController);\nconst Scatter = /* #__PURE__ */createTypedChart('scatter', chart_js__WEBPACK_IMPORTED_MODULE_1__.ScatterController);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-chartjs-2/dist/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"@media (prefers-color-scheme: dark) {\\n  .wmde-markdown,\\n  .wmde-markdown-var {\\n    color-scheme: dark;\\n    --color-prettylights-syntax-comment: #8b949e;\\n    --color-prettylights-syntax-constant: #79c0ff;\\n    --color-prettylights-syntax-entity: #d2a8ff;\\n    --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\\n    --color-prettylights-syntax-entity-tag: #7ee787;\\n    --color-prettylights-syntax-keyword: #ff7b72;\\n    --color-prettylights-syntax-string: #a5d6ff;\\n    --color-prettylights-syntax-variable: #ffa657;\\n    --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\\n    --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\\n    --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\\n    --color-prettylights-syntax-carriage-return-text: #f0f6fc;\\n    --color-prettylights-syntax-carriage-return-bg: #b62324;\\n    --color-prettylights-syntax-string-regexp: #7ee787;\\n    --color-prettylights-syntax-markup-list: #f2cc60;\\n    --color-prettylights-syntax-markup-heading: #1f6feb;\\n    --color-prettylights-syntax-markup-italic: #c9d1d9;\\n    --color-prettylights-syntax-markup-bold: #c9d1d9;\\n    --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\\n    --color-prettylights-syntax-markup-deleted-bg: #67060c;\\n    --color-prettylights-syntax-markup-inserted-text: #aff5b4;\\n    --color-prettylights-syntax-markup-inserted-bg: #033a16;\\n    --color-prettylights-syntax-markup-changed-text: #ffdfb6;\\n    --color-prettylights-syntax-markup-changed-bg: #5a1e02;\\n    --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\\n    --color-prettylights-syntax-markup-ignored-bg: #1158c7;\\n    --color-prettylights-syntax-meta-diff-range: #d2a8ff;\\n    --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\\n    --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\\n    --color-fg-default: #c9d1d9;\\n    --color-fg-muted: #8b949e;\\n    --color-fg-subtle: #484f58;\\n    --color-canvas-default: #0d1117;\\n    --color-canvas-subtle: #161b22;\\n    --color-border-default: #30363d;\\n    --color-border-muted: #21262d;\\n    --color-neutral-muted: rgba(110, 118, 129, 0.4);\\n    --color-accent-fg: #58a6ff;\\n    --color-accent-emphasis: #1f6feb;\\n    --color-attention-subtle: rgba(187, 128, 9, 0.15);\\n    --color-danger-fg: #f85149;\\n  }\\n}\\n@media (prefers-color-scheme: light) {\\n  .wmde-markdown,\\n  .wmde-markdown-var {\\n    color-scheme: light;\\n    --color-prettylights-syntax-comment: #6e7781;\\n    --color-prettylights-syntax-constant: #0550ae;\\n    --color-prettylights-syntax-entity: #8250df;\\n    --color-prettylights-syntax-storage-modifier-import: #24292f;\\n    --color-prettylights-syntax-entity-tag: #116329;\\n    --color-prettylights-syntax-keyword: #cf222e;\\n    --color-prettylights-syntax-string: #0a3069;\\n    --color-prettylights-syntax-variable: #953800;\\n    --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\\n    --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\\n    --color-prettylights-syntax-invalid-illegal-bg: #82071e;\\n    --color-prettylights-syntax-carriage-return-text: #f6f8fa;\\n    --color-prettylights-syntax-carriage-return-bg: #cf222e;\\n    --color-prettylights-syntax-string-regexp: #116329;\\n    --color-prettylights-syntax-markup-list: #3b2300;\\n    --color-prettylights-syntax-markup-heading: #0550ae;\\n    --color-prettylights-syntax-markup-italic: #24292f;\\n    --color-prettylights-syntax-markup-bold: #24292f;\\n    --color-prettylights-syntax-markup-deleted-text: #82071e;\\n    --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\\n    --color-prettylights-syntax-markup-inserted-text: #116329;\\n    --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\\n    --color-prettylights-syntax-markup-changed-text: #953800;\\n    --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\\n    --color-prettylights-syntax-markup-ignored-text: #eaeef2;\\n    --color-prettylights-syntax-markup-ignored-bg: #0550ae;\\n    --color-prettylights-syntax-meta-diff-range: #8250df;\\n    --color-prettylights-syntax-brackethighlighter-angle: #57606a;\\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\\n    --color-prettylights-syntax-constant-other-reference-link: #0a3069;\\n    --color-fg-default: #24292f;\\n    --color-fg-muted: #57606a;\\n    --color-fg-subtle: #6e7781;\\n    --color-canvas-default: #ffffff;\\n    --color-canvas-subtle: #f6f8fa;\\n    --color-border-default: #d0d7de;\\n    --color-border-muted: hsl(210, 18%, 87%);\\n    --color-neutral-muted: rgba(175, 184, 193, 0.2);\\n    --color-accent-fg: #0969da;\\n    --color-accent-emphasis: #0969da;\\n    --color-attention-subtle: #fff8c5;\\n    --color-danger-fg: #cf222e;\\n  }\\n}\\n[data-color-mode*='dark'] .wmde-markdown,\\n[data-color-mode*='dark'] .wmde-markdown-var,\\n.wmde-markdown[data-color-mode*='dark'],\\nbody[data-color-mode*='dark'] {\\n  color-scheme: dark;\\n  --color-prettylights-syntax-comment: #8b949e;\\n  --color-prettylights-syntax-constant: #79c0ff;\\n  --color-prettylights-syntax-entity: #d2a8ff;\\n  --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\\n  --color-prettylights-syntax-entity-tag: #7ee787;\\n  --color-prettylights-syntax-keyword: #ff7b72;\\n  --color-prettylights-syntax-string: #a5d6ff;\\n  --color-prettylights-syntax-variable: #ffa657;\\n  --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\\n  --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\\n  --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\\n  --color-prettylights-syntax-carriage-return-text: #f0f6fc;\\n  --color-prettylights-syntax-carriage-return-bg: #b62324;\\n  --color-prettylights-syntax-string-regexp: #7ee787;\\n  --color-prettylights-syntax-markup-list: #f2cc60;\\n  --color-prettylights-syntax-markup-heading: #1f6feb;\\n  --color-prettylights-syntax-markup-italic: #c9d1d9;\\n  --color-prettylights-syntax-markup-bold: #c9d1d9;\\n  --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\\n  --color-prettylights-syntax-markup-deleted-bg: #67060c;\\n  --color-prettylights-syntax-markup-inserted-text: #aff5b4;\\n  --color-prettylights-syntax-markup-inserted-bg: #033a16;\\n  --color-prettylights-syntax-markup-changed-text: #ffdfb6;\\n  --color-prettylights-syntax-markup-changed-bg: #5a1e02;\\n  --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\\n  --color-prettylights-syntax-markup-ignored-bg: #1158c7;\\n  --color-prettylights-syntax-meta-diff-range: #d2a8ff;\\n  --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\\n  --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\\n  --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\\n  --color-fg-default: #c9d1d9;\\n  --color-fg-muted: #8b949e;\\n  --color-fg-subtle: #484f58;\\n  --color-canvas-default: #0d1117;\\n  --color-canvas-subtle: #161b22;\\n  --color-border-default: #30363d;\\n  --color-border-muted: #21262d;\\n  --color-neutral-muted: rgba(110, 118, 129, 0.4);\\n  --color-accent-fg: #58a6ff;\\n  --color-accent-emphasis: #1f6feb;\\n  --color-attention-subtle: rgba(187, 128, 9, 0.15);\\n  --color-danger-fg: #f85149;\\n}\\n[data-color-mode*='light'] .wmde-markdown,\\n[data-color-mode*='light'] .wmde-markdown-var,\\n.wmde-markdown[data-color-mode*='light'],\\nbody[data-color-mode*='light'] {\\n  color-scheme: light;\\n  --color-prettylights-syntax-comment: #6e7781;\\n  --color-prettylights-syntax-constant: #0550ae;\\n  --color-prettylights-syntax-entity: #8250df;\\n  --color-prettylights-syntax-storage-modifier-import: #24292f;\\n  --color-prettylights-syntax-entity-tag: #116329;\\n  --color-prettylights-syntax-keyword: #cf222e;\\n  --color-prettylights-syntax-string: #0a3069;\\n  --color-prettylights-syntax-variable: #953800;\\n  --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\\n  --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\\n  --color-prettylights-syntax-invalid-illegal-bg: #82071e;\\n  --color-prettylights-syntax-carriage-return-text: #f6f8fa;\\n  --color-prettylights-syntax-carriage-return-bg: #cf222e;\\n  --color-prettylights-syntax-string-regexp: #116329;\\n  --color-prettylights-syntax-markup-list: #3b2300;\\n  --color-prettylights-syntax-markup-heading: #0550ae;\\n  --color-prettylights-syntax-markup-italic: #24292f;\\n  --color-prettylights-syntax-markup-bold: #24292f;\\n  --color-prettylights-syntax-markup-deleted-text: #82071e;\\n  --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\\n  --color-prettylights-syntax-markup-inserted-text: #116329;\\n  --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\\n  --color-prettylights-syntax-markup-changed-text: #953800;\\n  --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\\n  --color-prettylights-syntax-markup-ignored-text: #eaeef2;\\n  --color-prettylights-syntax-markup-ignored-bg: #0550ae;\\n  --color-prettylights-syntax-meta-diff-range: #8250df;\\n  --color-prettylights-syntax-brackethighlighter-angle: #57606a;\\n  --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\\n  --color-prettylights-syntax-constant-other-reference-link: #0a3069;\\n  --color-fg-default: #24292f;\\n  --color-fg-muted: #57606a;\\n  --color-fg-subtle: #6e7781;\\n  --color-canvas-default: #ffffff;\\n  --color-canvas-subtle: #f6f8fa;\\n  --color-border-default: #d0d7de;\\n  --color-border-muted: hsl(210, 18%, 87%);\\n  --color-neutral-muted: rgba(175, 184, 193, 0.2);\\n  --color-accent-fg: #0969da;\\n  --color-accent-emphasis: #0969da;\\n  --color-attention-subtle: #fff8c5;\\n  --color-danger-fg: #cf222e;\\n}\\n.wmde-markdown {\\n  -webkit-text-size-adjust: 100%;\\n  font-family: -apple-system, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\\n  font-size: 16px;\\n  line-height: 1.5;\\n  word-wrap: break-word;\\n  color: var(--color-fg-default);\\n  background-color: var(--color-canvas-default);\\n}\\n.wmde-markdown details,\\n.wmde-markdown figcaption,\\n.wmde-markdown figure {\\n  display: block;\\n}\\n.wmde-markdown summary {\\n  display: list-item;\\n}\\n.wmde-markdown [hidden] {\\n  display: none !important;\\n}\\n.wmde-markdown a {\\n  background-color: transparent;\\n  color: var(--color-accent-fg);\\n  text-decoration: none;\\n}\\n.wmde-markdown a:active,\\n.wmde-markdown a:hover {\\n  outline-width: 0;\\n}\\n.wmde-markdown abbr[title] {\\n  border-bottom: none;\\n  -webkit-text-decoration: underline dotted;\\n          text-decoration: underline dotted;\\n}\\n.wmde-markdown b,\\n.wmde-markdown strong {\\n  font-weight: 600;\\n}\\n.wmde-markdown dfn {\\n  font-style: italic;\\n}\\n.wmde-markdown h1 {\\n  margin: 0.67em 0;\\n  font-weight: 600;\\n  padding-bottom: 0.3em;\\n  font-size: 2em;\\n  border-bottom: 1px solid var(--color-border-muted);\\n}\\n.wmde-markdown mark {\\n  background-color: var(--color-attention-subtle);\\n  color: var(--color-text-primary);\\n}\\n.wmde-markdown small {\\n  font-size: 90%;\\n}\\n.wmde-markdown sub,\\n.wmde-markdown sup {\\n  font-size: 75%;\\n  line-height: 0;\\n  position: relative;\\n  vertical-align: baseline;\\n}\\n.wmde-markdown sub {\\n  bottom: -0.25em;\\n}\\n.wmde-markdown sup {\\n  top: -0.5em;\\n}\\n.wmde-markdown img {\\n  border-style: none;\\n  max-width: 100%;\\n  box-sizing: content-box;\\n  background-color: var(--color-canvas-default);\\n}\\n.wmde-markdown code,\\n.wmde-markdown kbd,\\n.wmde-markdown pre,\\n.wmde-markdown samp {\\n  font-family: monospace, monospace;\\n  font-size: 1em;\\n}\\n.wmde-markdown figure {\\n  margin: 1em 40px;\\n}\\n.wmde-markdown hr {\\n  box-sizing: content-box;\\n  overflow: hidden;\\n  background: transparent;\\n  border: 0;\\n  border-bottom: 1px solid var(--color-border-muted);\\n  height: 0.25em;\\n  padding: 0;\\n  margin: 24px 0;\\n  background-color: var(--color-border-default);\\n}\\n.wmde-markdown input {\\n  font: inherit;\\n  margin: 0;\\n  overflow: visible;\\n  font-family: inherit;\\n  font-size: inherit;\\n  line-height: inherit;\\n}\\n.wmde-markdown [type='button'],\\n.wmde-markdown [type='reset'],\\n.wmde-markdown [type='submit'] {\\n  -webkit-appearance: button;\\n}\\n.wmde-markdown [type='button']::-moz-focus-inner,\\n.wmde-markdown [type='reset']::-moz-focus-inner,\\n.wmde-markdown [type='submit']::-moz-focus-inner {\\n  border-style: none;\\n  padding: 0;\\n}\\n.wmde-markdown [type='button']:-moz-focusring,\\n.wmde-markdown [type='reset']:-moz-focusring,\\n.wmde-markdown [type='submit']:-moz-focusring {\\n  outline: 1px dotted ButtonText;\\n}\\n.wmde-markdown [type='checkbox'],\\n.wmde-markdown [type='radio'] {\\n  box-sizing: border-box;\\n  padding: 0;\\n}\\n.wmde-markdown [type='number']::-webkit-inner-spin-button,\\n.wmde-markdown [type='number']::-webkit-outer-spin-button {\\n  height: auto;\\n}\\n.wmde-markdown [type='search'] {\\n  -webkit-appearance: textfield;\\n  outline-offset: -2px;\\n}\\n.wmde-markdown [type='search']::-webkit-search-cancel-button,\\n.wmde-markdown [type='search']::-webkit-search-decoration {\\n  -webkit-appearance: none;\\n}\\n.wmde-markdown ::-webkit-input-placeholder {\\n  color: inherit;\\n  opacity: 0.54;\\n}\\n.wmde-markdown ::-webkit-file-upload-button {\\n  -webkit-appearance: button;\\n  font: inherit;\\n}\\n.wmde-markdown a:hover {\\n  text-decoration: underline;\\n}\\n.wmde-markdown hr::before {\\n  display: table;\\n  content: '';\\n}\\n.wmde-markdown hr::after {\\n  display: table;\\n  clear: both;\\n  content: '';\\n}\\n.wmde-markdown table {\\n  border-spacing: 0;\\n  border-collapse: collapse;\\n  display: block;\\n  width: max-content;\\n  max-width: 100%;\\n}\\n.wmde-markdown td,\\n.wmde-markdown th {\\n  padding: 0;\\n}\\n.wmde-markdown details summary {\\n  cursor: pointer;\\n}\\n.wmde-markdown details:not([open]) > *:not(summary) {\\n  display: none !important;\\n}\\n.wmde-markdown kbd {\\n  display: inline-block;\\n  padding: 3px 5px;\\n  font: 11px ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\\n  line-height: 10px;\\n  color: var(--color-fg-default);\\n  vertical-align: middle;\\n  background-color: var(--color-canvas-subtle);\\n  border: solid 1px var(--color-neutral-muted);\\n  border-bottom-color: var(--color-neutral-muted);\\n  border-radius: 6px;\\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\\n}\\n.wmde-markdown h1,\\n.wmde-markdown h2,\\n.wmde-markdown h3,\\n.wmde-markdown h4,\\n.wmde-markdown h5,\\n.wmde-markdown h6 {\\n  margin-top: 24px;\\n  margin-bottom: 16px;\\n  font-weight: 600;\\n  line-height: 1.25;\\n}\\n.wmde-markdown td,\\n.wmde-markdown th {\\n  padding: 0;\\n}\\n.wmde-markdown details summary {\\n  cursor: pointer;\\n}\\n.wmde-markdown details:not([open]) > *:not(summary) {\\n  display: none !important;\\n}\\n.wmde-markdown kbd {\\n  display: inline-block;\\n  padding: 3px 5px;\\n  font: 11px ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\\n  line-height: 10px;\\n  color: var(--color-fg-default);\\n  vertical-align: middle;\\n  background-color: var(--color-canvas-subtle);\\n  border: solid 1px var(--color-neutral-muted);\\n  border-bottom-color: var(--color-neutral-muted);\\n  border-radius: 6px;\\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\\n}\\n.wmde-markdown h1,\\n.wmde-markdown h2,\\n.wmde-markdown h3,\\n.wmde-markdown h4,\\n.wmde-markdown h5,\\n.wmde-markdown h6 {\\n  margin-top: 24px;\\n  margin-bottom: 16px;\\n  font-weight: 600;\\n  line-height: 1.25;\\n}\\n.wmde-markdown h2 {\\n  font-weight: 600;\\n  padding-bottom: 0.3em;\\n  font-size: 1.5em;\\n  border-bottom: 1px solid var(--color-border-muted);\\n}\\n.wmde-markdown h3 {\\n  font-weight: 600;\\n  font-size: 1.25em;\\n}\\n.wmde-markdown h4 {\\n  font-weight: 600;\\n  font-size: 1em;\\n}\\n.wmde-markdown h5 {\\n  font-weight: 600;\\n  font-size: 0.875em;\\n}\\n.wmde-markdown h6 {\\n  font-weight: 600;\\n  font-size: 0.85em;\\n  color: var(--color-fg-muted);\\n}\\n.wmde-markdown p {\\n  margin-top: 0;\\n  margin-bottom: 10px;\\n}\\n.wmde-markdown blockquote {\\n  margin: 0;\\n  padding: 0 1em;\\n  color: var(--color-fg-muted);\\n  border-left: 0.25em solid var(--color-border-default);\\n}\\n.wmde-markdown ul,\\n.wmde-markdown ol {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  padding-left: 2em;\\n}\\n.wmde-markdown ol ol,\\n.wmde-markdown ul ol {\\n  list-style-type: lower-roman;\\n}\\n.wmde-markdown ul ul ol,\\n.wmde-markdown ul ol ol,\\n.wmde-markdown ol ul ol,\\n.wmde-markdown ol ol ol {\\n  list-style-type: lower-alpha;\\n}\\n.wmde-markdown dd {\\n  margin-left: 0;\\n}\\n.wmde-markdown tt,\\n.wmde-markdown code {\\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\\n  font-size: 12px;\\n}\\n.wmde-markdown pre {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\\n  font-size: 12px;\\n  word-wrap: normal;\\n}\\n.wmde-markdown .octicon {\\n  display: inline-block;\\n  overflow: visible !important;\\n  vertical-align: text-bottom;\\n  fill: currentColor;\\n}\\n.wmde-markdown ::placeholder {\\n  color: var(--color-fg-subtle);\\n  opacity: 1;\\n}\\n.wmde-markdown input::-webkit-outer-spin-button,\\n.wmde-markdown input::-webkit-inner-spin-button {\\n  margin: 0;\\n  appearance: none;\\n}\\n.wmde-markdown [data-catalyst] {\\n  display: block;\\n}\\n.wmde-markdown::before {\\n  display: table;\\n  content: '';\\n}\\n.wmde-markdown::after {\\n  display: table;\\n  clear: both;\\n  content: '';\\n}\\n.wmde-markdown > *:first-child {\\n  margin-top: 0 !important;\\n}\\n.wmde-markdown > *:last-child {\\n  margin-bottom: 0 !important;\\n}\\n.wmde-markdown a:not([href]) {\\n  color: inherit;\\n  text-decoration: none;\\n}\\n.wmde-markdown .absent {\\n  color: var(--color-danger-fg);\\n}\\n.wmde-markdown a.anchor {\\n  float: left;\\n  padding-right: 4px;\\n  margin-left: -20px;\\n  line-height: 1;\\n}\\n.wmde-markdown .anchor:focus {\\n  outline: none;\\n}\\n.wmde-markdown p,\\n.wmde-markdown blockquote,\\n.wmde-markdown ul,\\n.wmde-markdown ol,\\n.wmde-markdown dl,\\n.wmde-markdown table,\\n.wmde-markdown pre,\\n.wmde-markdown details {\\n  margin-top: 0;\\n  margin-bottom: 16px;\\n}\\n.wmde-markdown blockquote > :first-child {\\n  margin-top: 0;\\n}\\n.wmde-markdown blockquote > :last-child {\\n  margin-bottom: 0;\\n}\\n.wmde-markdown sup > a::before {\\n  content: '[';\\n}\\n.wmde-markdown sup > a::after {\\n  content: ']';\\n}\\n.wmde-markdown h1 .octicon-link,\\n.wmde-markdown h2 .octicon-link,\\n.wmde-markdown h3 .octicon-link,\\n.wmde-markdown h4 .octicon-link,\\n.wmde-markdown h5 .octicon-link,\\n.wmde-markdown h6 .octicon-link {\\n  color: var(--color-fg-default);\\n  vertical-align: middle;\\n  visibility: hidden;\\n}\\n.wmde-markdown h1:hover .anchor,\\n.wmde-markdown h2:hover .anchor,\\n.wmde-markdown h3:hover .anchor,\\n.wmde-markdown h4:hover .anchor,\\n.wmde-markdown h5:hover .anchor,\\n.wmde-markdown h6:hover .anchor {\\n  text-decoration: none;\\n}\\n.wmde-markdown h1:hover .anchor .octicon-link,\\n.wmde-markdown h2:hover .anchor .octicon-link,\\n.wmde-markdown h3:hover .anchor .octicon-link,\\n.wmde-markdown h4:hover .anchor .octicon-link,\\n.wmde-markdown h5:hover .anchor .octicon-link,\\n.wmde-markdown h6:hover .anchor .octicon-link {\\n  visibility: visible;\\n}\\n.wmde-markdown h1 tt,\\n.wmde-markdown h1 code,\\n.wmde-markdown h2 tt,\\n.wmde-markdown h2 code,\\n.wmde-markdown h3 tt,\\n.wmde-markdown h3 code,\\n.wmde-markdown h4 tt,\\n.wmde-markdown h4 code,\\n.wmde-markdown h5 tt,\\n.wmde-markdown h5 code,\\n.wmde-markdown h6 tt,\\n.wmde-markdown h6 code {\\n  padding: 0 0.2em;\\n  font-size: inherit;\\n}\\n.wmde-markdown ul.no-list,\\n.wmde-markdown ol.no-list {\\n  padding: 0;\\n  list-style-type: none;\\n}\\n.wmde-markdown ol[type='1'] {\\n  list-style-type: decimal;\\n}\\n.wmde-markdown ol[type='a'] {\\n  list-style-type: lower-alpha;\\n}\\n.wmde-markdown ol[type='i'] {\\n  list-style-type: lower-roman;\\n}\\n.wmde-markdown div > ol:not([type]) {\\n  list-style-type: decimal;\\n}\\n.wmde-markdown ul ul,\\n.wmde-markdown ul ol,\\n.wmde-markdown ol ol,\\n.wmde-markdown ol ul {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n}\\n.wmde-markdown li > p {\\n  margin-top: 16px;\\n}\\n.wmde-markdown li + li {\\n  margin-top: 0.25em;\\n}\\n.wmde-markdown dl {\\n  padding: 0;\\n}\\n.wmde-markdown dl dt {\\n  padding: 0;\\n  margin-top: 16px;\\n  font-size: 1em;\\n  font-style: italic;\\n  font-weight: 600;\\n}\\n.wmde-markdown dl dd {\\n  padding: 0 16px;\\n  margin-bottom: 16px;\\n}\\n.wmde-markdown table th {\\n  font-weight: 600;\\n}\\n.wmde-markdown table th,\\n.wmde-markdown table td {\\n  padding: 6px 13px;\\n  border: 1px solid var(--color-border-default);\\n}\\n.wmde-markdown table tr {\\n  background-color: var(--color-canvas-default);\\n  border-top: 1px solid var(--color-border-muted);\\n}\\n.wmde-markdown table tr:nth-child(2n) {\\n  background-color: var(--color-canvas-subtle);\\n}\\n.wmde-markdown table img {\\n  background-color: transparent;\\n}\\n.wmde-markdown img[align='right'] {\\n  padding-left: 20px;\\n}\\n.wmde-markdown img[align='left'] {\\n  padding-right: 20px;\\n}\\n.wmde-markdown .emoji {\\n  max-width: none;\\n  vertical-align: text-top;\\n  background-color: transparent;\\n}\\n.wmde-markdown span.frame {\\n  display: block;\\n  overflow: hidden;\\n}\\n.wmde-markdown span.frame > span {\\n  display: block;\\n  float: left;\\n  width: auto;\\n  padding: 7px;\\n  margin: 13px 0 0;\\n  overflow: hidden;\\n  border: 1px solid var(--color-border-default);\\n}\\n.wmde-markdown span.frame span img {\\n  display: block;\\n  float: left;\\n}\\n.wmde-markdown span.frame span span {\\n  display: block;\\n  padding: 5px 0 0;\\n  clear: both;\\n  color: var(--color-fg-default);\\n}\\n.wmde-markdown span.align-center {\\n  display: block;\\n  overflow: hidden;\\n  clear: both;\\n}\\n.wmde-markdown span.align-center > span {\\n  display: block;\\n  margin: 13px auto 0;\\n  overflow: hidden;\\n  text-align: center;\\n}\\n.wmde-markdown span.align-center span img {\\n  margin: 0 auto;\\n  text-align: center;\\n}\\n.wmde-markdown span.align-right {\\n  display: block;\\n  overflow: hidden;\\n  clear: both;\\n}\\n.wmde-markdown span.align-right > span {\\n  display: block;\\n  margin: 13px 0 0;\\n  overflow: hidden;\\n  text-align: right;\\n}\\n.wmde-markdown span.align-right span img {\\n  margin: 0;\\n  text-align: right;\\n}\\n.wmde-markdown span.float-left {\\n  display: block;\\n  float: left;\\n  margin-right: 13px;\\n  overflow: hidden;\\n}\\n.wmde-markdown span.float-left span {\\n  margin: 13px 0 0;\\n}\\n.wmde-markdown span.float-right {\\n  display: block;\\n  float: right;\\n  margin-left: 13px;\\n  overflow: hidden;\\n}\\n.wmde-markdown span.float-right > span {\\n  display: block;\\n  margin: 13px auto 0;\\n  overflow: hidden;\\n  text-align: right;\\n}\\n.wmde-markdown code,\\n.wmde-markdown tt {\\n  padding: 0.2em 0.4em;\\n  margin: 0;\\n  font-size: 85%;\\n  background-color: var(--color-neutral-muted);\\n  border-radius: 6px;\\n}\\n.wmde-markdown code br,\\n.wmde-markdown tt br {\\n  display: none;\\n}\\n.wmde-markdown del code {\\n  text-decoration: inherit;\\n}\\n.wmde-markdown pre code {\\n  font-size: 100%;\\n}\\n.wmde-markdown pre > code {\\n  padding: 0;\\n  margin: 0;\\n  word-break: normal;\\n  white-space: pre;\\n  background: transparent;\\n  border: 0;\\n}\\n.wmde-markdown pre {\\n  font-size: 85%;\\n  line-height: 1.45;\\n  background-color: var(--color-canvas-subtle);\\n  border-radius: 6px;\\n}\\n.wmde-markdown pre code,\\n.wmde-markdown pre tt {\\n  display: inline;\\n  max-width: auto;\\n  padding: 0;\\n  margin: 0;\\n  overflow: visible;\\n  line-height: inherit;\\n  word-wrap: normal;\\n  background-color: transparent;\\n  border: 0;\\n}\\n.wmde-markdown pre > code {\\n  padding: 16px;\\n  overflow: auto;\\n  display: block;\\n}\\n.wmde-markdown .csv-data td,\\n.wmde-markdown .csv-data th {\\n  padding: 5px;\\n  overflow: hidden;\\n  font-size: 12px;\\n  line-height: 1;\\n  text-align: left;\\n  white-space: nowrap;\\n}\\n.wmde-markdown .csv-data .blob-num {\\n  padding: 10px 8px 9px;\\n  text-align: right;\\n  background: var(--color-canvas-default);\\n  border: 0;\\n}\\n.wmde-markdown .csv-data tr {\\n  border-top: 0;\\n}\\n.wmde-markdown .csv-data th {\\n  font-weight: 600;\\n  background: var(--color-canvas-subtle);\\n  border-top: 0;\\n}\\n.wmde-markdown .footnotes {\\n  font-size: 12px;\\n  color: var(--color-fg-muted);\\n  border-top: 1px solid var(--color-border-default);\\n}\\n.wmde-markdown .footnotes ol {\\n  padding-left: 16px;\\n}\\n.wmde-markdown .footnotes li {\\n  position: relative;\\n}\\n.wmde-markdown .footnotes li:target::before {\\n  position: absolute;\\n  top: -8px;\\n  right: -8px;\\n  bottom: -8px;\\n  left: -24px;\\n  pointer-events: none;\\n  content: '';\\n  border: 2px solid var(--color-accent-emphasis);\\n  border-radius: 6px;\\n}\\n.wmde-markdown .footnotes li:target {\\n  color: var(--color-fg-default);\\n}\\n.wmde-markdown .footnotes .data-footnote-backref g-emoji {\\n  font-family: monospace;\\n}\\n.wmde-markdown .task-list-item {\\n  list-style-type: none;\\n}\\n.wmde-markdown .task-list-item label {\\n  font-weight: 400;\\n}\\n.wmde-markdown .task-list-item.enabled label {\\n  cursor: pointer;\\n}\\n.wmde-markdown .task-list-item + .wmde-markdown .task-list-item {\\n  margin-top: 3px;\\n}\\n.wmde-markdown .task-list-item .handle {\\n  display: none;\\n}\\n.wmde-markdown .task-list-item-checkbox,\\n.wmde-markdown .contains-task-list input[type='checkbox'] {\\n  margin: 0 0.2em 0.25em -1.6em;\\n  vertical-align: middle;\\n}\\n.wmde-markdown .contains-task-list:dir(rtl) .task-list-item-checkbox,\\n.wmde-markdown .contains-task-list:dir(rtl) input[type='checkbox'] {\\n  margin: 0 -1.6em 0.25em 0.2em;\\n}\\n.wmde-markdown ::-webkit-calendar-picker-indicator {\\n  filter: invert(50%);\\n}\\n.wmde-markdown pre[class*='language-'] {\\n  position: relative;\\n}\\n.wmde-markdown pre .copied {\\n  visibility: hidden;\\n  display: flex;\\n  position: absolute;\\n  cursor: pointer;\\n  color: var(--color-fg-defaul);\\n  top: 6px;\\n  right: 6px;\\n  border-radius: 5px;\\n  background: var(--color-border-default);\\n  padding: 6px;\\n  font-size: 12px;\\n  transition: all 0.3s;\\n}\\n.wmde-markdown pre .copied .octicon-copy {\\n  display: block;\\n}\\n.wmde-markdown pre .copied .octicon-check {\\n  display: none;\\n}\\n.wmde-markdown pre:hover .copied {\\n  visibility: visible;\\n}\\n.wmde-markdown pre:hover .copied:hover {\\n  background: var(--color-prettylights-syntax-entity-tag);\\n  color: var(--color-canvas-default);\\n}\\n.wmde-markdown pre:hover .copied:active,\\n.wmde-markdown pre .copied.active {\\n  background: #2e9b33;\\n  color: var(--color-canvas-default);\\n}\\n.wmde-markdown pre .active .octicon-copy {\\n  display: none;\\n}\\n.wmde-markdown pre .active .octicon-check {\\n  display: block;\\n}\\n.token.comment,\\n.token.prolog,\\n.token.doctype,\\n.token.cdata {\\n  color: var(--color-prettylights-syntax-comment);\\n}\\n.token.namespace {\\n  opacity: 0.7;\\n}\\n.token.property,\\n.token.tag,\\n.token.selector,\\n.token.constant,\\n.token.symbol,\\n.token.deleted {\\n  color: var(--color-prettylights-syntax-entity-tag);\\n}\\n.token.maybe-class-name {\\n  color: var(--color-prettylights-syntax-variable);\\n}\\n.token.property-access,\\n.token.operator,\\n.token.boolean,\\n.token.number,\\n.token.selector .token.class,\\n.token.attr-name,\\n.token.string,\\n.token.char,\\n.token.builtin {\\n  color: var(--color-prettylights-syntax-constant);\\n}\\n.token.deleted {\\n  color: var(--color-prettylights-syntax-markup-deleted-text);\\n}\\n.code-line .token.deleted {\\n  background-color: var(--color-prettylights-syntax-markup-deleted-bg);\\n}\\n.token.inserted {\\n  color: var(--color-prettylights-syntax-markup-inserted-text);\\n}\\n.code-line .token.inserted {\\n  background-color: var(--color-prettylights-syntax-markup-inserted-bg);\\n}\\n.token.variable {\\n  color: var(--color-prettylights-syntax-constant);\\n}\\n.token.entity,\\n.token.url,\\n.language-css .token.string,\\n.style .token.string {\\n  color: var(--color-prettylights-syntax-string);\\n}\\n.token.color,\\n.token.atrule,\\n.token.attr-value,\\n.token.function,\\n.token.class-name {\\n  color: var(--color-prettylights-syntax-string);\\n}\\n.token.rule,\\n.token.regex,\\n.token.important,\\n.token.keyword {\\n  color: var(--color-prettylights-syntax-keyword);\\n}\\n.token.coord {\\n  color: var(--color-prettylights-syntax-meta-diff-range);\\n}\\n.token.important,\\n.token.bold {\\n  font-weight: bold;\\n}\\n.token.italic {\\n  font-style: italic;\\n}\\n.token.entity {\\n  cursor: help;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://node_modules/@uiw/react-markdown-preview/markdown.css\"],\"names\":[],\"mappings\":\"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Z;AACA;;EAEE,SAAS;EAET,gBAAgB;AAClB;AACA;EACE,cAAc;AAChB;AACA;EACE,cAAc;EACd,WAAW;AACb;AACA;EACE,cAAc;EACd,WAAW;EACX,WAAW;AACb;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,2BAA2B;AAC7B;AACA;EACE,cAAc;EACd,qBAAqB;AACvB;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,cAAc;AAChB;AACA;EACE,aAAa;AACf;AACA;;;;;;;;EAQE,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,aAAa;AACf;AACA;EACE,gBAAgB;AAClB;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;;;;;;EAME,8BAA8B;EAC9B,sBAAsB;EACtB,kBAAkB;AACpB;AACA;;;;;;EAME,qBAAqB;AACvB;AACA;;;;;;EAME,mBAAmB;AACrB;AACA;;;;;;;;;;;;EAYE,gBAAgB;EAChB,kBAAkB;AACpB;AACA;;EAEE,UAAU;EACV,qBAAqB;AACvB;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,4BAA4B;AAC9B;AACA;EACE,wBAAwB;AAC1B;AACA;;;;EAIE,aAAa;EACb,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,UAAU;AACZ;AACA;EACE,UAAU;EACV,gBAAgB;EAChB,cAAc;EACd,kBAAkB;EAClB,gBAAgB;AAClB;AACA;EACE,eAAe;EACf,mBAAmB;AACrB;AACA;EACE,gBAAgB;AAClB;AACA;;EAEE,iBAAiB;EACjB,6CAA6C;AAC/C;AACA;EACE,6CAA6C;EAC7C,+CAA+C;AACjD;AACA;EACE,4CAA4C;AAC9C;AACA;EACE,6BAA6B;AAC/B;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,eAAe;EACf,wBAAwB;EACxB,6BAA6B;AAC/B;AACA;EACE,cAAc;EACd,gBAAgB;AAClB;AACA;EACE,cAAc;EACd,WAAW;EACX,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,gBAAgB;EAChB,6CAA6C;AAC/C;AACA;EACE,cAAc;EACd,WAAW;AACb;AACA;EACE,cAAc;EACd,gBAAgB;EAChB,WAAW;EACX,8BAA8B;AAChC;AACA;EACE,cAAc;EACd,gBAAgB;EAChB,WAAW;AACb;AACA;EACE,cAAc;EACd,mBAAmB;EACnB,gBAAgB;EAChB,kBAAkB;AACpB;AACA;EACE,cAAc;EACd,kBAAkB;AACpB;AACA;EACE,cAAc;EACd,gBAAgB;EAChB,WAAW;AACb;AACA;EACE,cAAc;EACd,gBAAgB;EAChB,gBAAgB;EAChB,iBAAiB;AACnB;AACA;EACE,SAAS;EACT,iBAAiB;AACnB;AACA;EACE,cAAc;EACd,WAAW;EACX,kBAAkB;EAClB,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,cAAc;EACd,YAAY;EACZ,iBAAiB;EACjB,gBAAgB;AAClB;AACA;EACE,cAAc;EACd,mBAAmB;EACnB,gBAAgB;EAChB,iBAAiB;AACnB;AACA;;EAEE,oBAAoB;EACpB,SAAS;EACT,cAAc;EACd,4CAA4C;EAC5C,kBAAkB;AACpB;AACA;;EAEE,aAAa;AACf;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,eAAe;AACjB;AACA;EACE,UAAU;EACV,SAAS;EACT,kBAAkB;EAClB,gBAAgB;EAChB,uBAAuB;EACvB,SAAS;AACX;AACA;EACE,cAAc;EACd,iBAAiB;EACjB,4CAA4C;EAC5C,kBAAkB;AACpB;AACA;;EAEE,eAAe;EACf,eAAe;EACf,UAAU;EACV,SAAS;EACT,iBAAiB;EACjB,oBAAoB;EACpB,iBAAiB;EACjB,6BAA6B;EAC7B,SAAS;AACX;AACA;EACE,aAAa;EACb,cAAc;EACd,cAAc;AAChB;AACA;;EAEE,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,cAAc;EACd,gBAAgB;EAChB,mBAAmB;AACrB;AACA;EACE,qBAAqB;EACrB,iBAAiB;EACjB,uCAAuC;EACvC,SAAS;AACX;AACA;EACE,aAAa;AACf;AACA;EACE,gBAAgB;EAChB,sCAAsC;EACtC,aAAa;AACf;AACA;EACE,eAAe;EACf,4BAA4B;EAC5B,iDAAiD;AACnD;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,YAAY;EACZ,WAAW;EACX,oBAAoB;EACpB,WAAW;EACX,8CAA8C;EAC9C,kBAAkB;AACpB;AACA;EACE,8BAA8B;AAChC;AACA;EACE,sBAAsB;AACxB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,eAAe;AACjB;AACA;EACE,eAAe;AACjB;AACA;EACE,aAAa;AACf;AACA;;EAEE,6BAA6B;EAC7B,sBAAsB;AACxB;AACA;;EAEE,6BAA6B;AAC/B;AACA;EAEU,mBAAmB;AAC7B;AACA;EACE,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,aAAa;EACb,kBAAkB;EAClB,eAAe;EACf,6BAA6B;EAC7B,QAAQ;EACR,UAAU;EACV,kBAAkB;EAClB,uCAAuC;EACvC,YAAY;EACZ,eAAe;EACf,oBAAoB;AACtB;AACA;EACE,cAAc;AAChB;AACA;EACE,aAAa;AACf;AACA;EACE,mBAAmB;AACrB;AACA;EACE,uDAAuD;EACvD,kCAAkC;AACpC;AACA;;EAEE,mBAAmB;EACnB,kCAAkC;AACpC;AACA;EACE,aAAa;AACf;AACA;EACE,cAAc;AAChB;AACA;;;;EAIE,+CAA+C;AACjD;AACA;EACE,YAAY;AACd;AACA;;;;;;EAME,kDAAkD;AACpD;AACA;EACE,gDAAgD;AAClD;AACA;;;;;;;;;EASE,gDAAgD;AAClD;AACA;EACE,2DAA2D;AAC7D;AACA;EACE,oEAAoE;AACtE;AACA;EACE,4DAA4D;AAC9D;AACA;EACE,qEAAqE;AACvE;AACA;EACE,gDAAgD;AAClD;AACA;;;;EAIE,8CAA8C;AAChD;AACA;;;;;EAKE,8CAA8C;AAChD;AACA;;;;EAIE,+CAA+C;AACjD;AACA;EACE,uDAAuD;AACzD;AACA;;EAEE,iBAAiB;AACnB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,YAAY;AACd\",\"sourcesContent\":[\"@media (prefers-color-scheme: dark) {\\n  .wmde-markdown,\\n  .wmde-markdown-var {\\n    color-scheme: dark;\\n    --color-prettylights-syntax-comment: #8b949e;\\n    --color-prettylights-syntax-constant: #79c0ff;\\n    --color-prettylights-syntax-entity: #d2a8ff;\\n    --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\\n    --color-prettylights-syntax-entity-tag: #7ee787;\\n    --color-prettylights-syntax-keyword: #ff7b72;\\n    --color-prettylights-syntax-string: #a5d6ff;\\n    --color-prettylights-syntax-variable: #ffa657;\\n    --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\\n    --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\\n    --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\\n    --color-prettylights-syntax-carriage-return-text: #f0f6fc;\\n    --color-prettylights-syntax-carriage-return-bg: #b62324;\\n    --color-prettylights-syntax-string-regexp: #7ee787;\\n    --color-prettylights-syntax-markup-list: #f2cc60;\\n    --color-prettylights-syntax-markup-heading: #1f6feb;\\n    --color-prettylights-syntax-markup-italic: #c9d1d9;\\n    --color-prettylights-syntax-markup-bold: #c9d1d9;\\n    --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\\n    --color-prettylights-syntax-markup-deleted-bg: #67060c;\\n    --color-prettylights-syntax-markup-inserted-text: #aff5b4;\\n    --color-prettylights-syntax-markup-inserted-bg: #033a16;\\n    --color-prettylights-syntax-markup-changed-text: #ffdfb6;\\n    --color-prettylights-syntax-markup-changed-bg: #5a1e02;\\n    --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\\n    --color-prettylights-syntax-markup-ignored-bg: #1158c7;\\n    --color-prettylights-syntax-meta-diff-range: #d2a8ff;\\n    --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\\n    --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\\n    --color-fg-default: #c9d1d9;\\n    --color-fg-muted: #8b949e;\\n    --color-fg-subtle: #484f58;\\n    --color-canvas-default: #0d1117;\\n    --color-canvas-subtle: #161b22;\\n    --color-border-default: #30363d;\\n    --color-border-muted: #21262d;\\n    --color-neutral-muted: rgba(110, 118, 129, 0.4);\\n    --color-accent-fg: #58a6ff;\\n    --color-accent-emphasis: #1f6feb;\\n    --color-attention-subtle: rgba(187, 128, 9, 0.15);\\n    --color-danger-fg: #f85149;\\n  }\\n}\\n@media (prefers-color-scheme: light) {\\n  .wmde-markdown,\\n  .wmde-markdown-var {\\n    color-scheme: light;\\n    --color-prettylights-syntax-comment: #6e7781;\\n    --color-prettylights-syntax-constant: #0550ae;\\n    --color-prettylights-syntax-entity: #8250df;\\n    --color-prettylights-syntax-storage-modifier-import: #24292f;\\n    --color-prettylights-syntax-entity-tag: #116329;\\n    --color-prettylights-syntax-keyword: #cf222e;\\n    --color-prettylights-syntax-string: #0a3069;\\n    --color-prettylights-syntax-variable: #953800;\\n    --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\\n    --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\\n    --color-prettylights-syntax-invalid-illegal-bg: #82071e;\\n    --color-prettylights-syntax-carriage-return-text: #f6f8fa;\\n    --color-prettylights-syntax-carriage-return-bg: #cf222e;\\n    --color-prettylights-syntax-string-regexp: #116329;\\n    --color-prettylights-syntax-markup-list: #3b2300;\\n    --color-prettylights-syntax-markup-heading: #0550ae;\\n    --color-prettylights-syntax-markup-italic: #24292f;\\n    --color-prettylights-syntax-markup-bold: #24292f;\\n    --color-prettylights-syntax-markup-deleted-text: #82071e;\\n    --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\\n    --color-prettylights-syntax-markup-inserted-text: #116329;\\n    --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\\n    --color-prettylights-syntax-markup-changed-text: #953800;\\n    --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\\n    --color-prettylights-syntax-markup-ignored-text: #eaeef2;\\n    --color-prettylights-syntax-markup-ignored-bg: #0550ae;\\n    --color-prettylights-syntax-meta-diff-range: #8250df;\\n    --color-prettylights-syntax-brackethighlighter-angle: #57606a;\\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\\n    --color-prettylights-syntax-constant-other-reference-link: #0a3069;\\n    --color-fg-default: #24292f;\\n    --color-fg-muted: #57606a;\\n    --color-fg-subtle: #6e7781;\\n    --color-canvas-default: #ffffff;\\n    --color-canvas-subtle: #f6f8fa;\\n    --color-border-default: #d0d7de;\\n    --color-border-muted: hsl(210, 18%, 87%);\\n    --color-neutral-muted: rgba(175, 184, 193, 0.2);\\n    --color-accent-fg: #0969da;\\n    --color-accent-emphasis: #0969da;\\n    --color-attention-subtle: #fff8c5;\\n    --color-danger-fg: #cf222e;\\n  }\\n}\\n[data-color-mode*='dark'] .wmde-markdown,\\n[data-color-mode*='dark'] .wmde-markdown-var,\\n.wmde-markdown[data-color-mode*='dark'],\\nbody[data-color-mode*='dark'] {\\n  color-scheme: dark;\\n  --color-prettylights-syntax-comment: #8b949e;\\n  --color-prettylights-syntax-constant: #79c0ff;\\n  --color-prettylights-syntax-entity: #d2a8ff;\\n  --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\\n  --color-prettylights-syntax-entity-tag: #7ee787;\\n  --color-prettylights-syntax-keyword: #ff7b72;\\n  --color-prettylights-syntax-string: #a5d6ff;\\n  --color-prettylights-syntax-variable: #ffa657;\\n  --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\\n  --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\\n  --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\\n  --color-prettylights-syntax-carriage-return-text: #f0f6fc;\\n  --color-prettylights-syntax-carriage-return-bg: #b62324;\\n  --color-prettylights-syntax-string-regexp: #7ee787;\\n  --color-prettylights-syntax-markup-list: #f2cc60;\\n  --color-prettylights-syntax-markup-heading: #1f6feb;\\n  --color-prettylights-syntax-markup-italic: #c9d1d9;\\n  --color-prettylights-syntax-markup-bold: #c9d1d9;\\n  --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\\n  --color-prettylights-syntax-markup-deleted-bg: #67060c;\\n  --color-prettylights-syntax-markup-inserted-text: #aff5b4;\\n  --color-prettylights-syntax-markup-inserted-bg: #033a16;\\n  --color-prettylights-syntax-markup-changed-text: #ffdfb6;\\n  --color-prettylights-syntax-markup-changed-bg: #5a1e02;\\n  --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\\n  --color-prettylights-syntax-markup-ignored-bg: #1158c7;\\n  --color-prettylights-syntax-meta-diff-range: #d2a8ff;\\n  --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\\n  --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\\n  --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\\n  --color-fg-default: #c9d1d9;\\n  --color-fg-muted: #8b949e;\\n  --color-fg-subtle: #484f58;\\n  --color-canvas-default: #0d1117;\\n  --color-canvas-subtle: #161b22;\\n  --color-border-default: #30363d;\\n  --color-border-muted: #21262d;\\n  --color-neutral-muted: rgba(110, 118, 129, 0.4);\\n  --color-accent-fg: #58a6ff;\\n  --color-accent-emphasis: #1f6feb;\\n  --color-attention-subtle: rgba(187, 128, 9, 0.15);\\n  --color-danger-fg: #f85149;\\n}\\n[data-color-mode*='light'] .wmde-markdown,\\n[data-color-mode*='light'] .wmde-markdown-var,\\n.wmde-markdown[data-color-mode*='light'],\\nbody[data-color-mode*='light'] {\\n  color-scheme: light;\\n  --color-prettylights-syntax-comment: #6e7781;\\n  --color-prettylights-syntax-constant: #0550ae;\\n  --color-prettylights-syntax-entity: #8250df;\\n  --color-prettylights-syntax-storage-modifier-import: #24292f;\\n  --color-prettylights-syntax-entity-tag: #116329;\\n  --color-prettylights-syntax-keyword: #cf222e;\\n  --color-prettylights-syntax-string: #0a3069;\\n  --color-prettylights-syntax-variable: #953800;\\n  --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\\n  --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\\n  --color-prettylights-syntax-invalid-illegal-bg: #82071e;\\n  --color-prettylights-syntax-carriage-return-text: #f6f8fa;\\n  --color-prettylights-syntax-carriage-return-bg: #cf222e;\\n  --color-prettylights-syntax-string-regexp: #116329;\\n  --color-prettylights-syntax-markup-list: #3b2300;\\n  --color-prettylights-syntax-markup-heading: #0550ae;\\n  --color-prettylights-syntax-markup-italic: #24292f;\\n  --color-prettylights-syntax-markup-bold: #24292f;\\n  --color-prettylights-syntax-markup-deleted-text: #82071e;\\n  --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\\n  --color-prettylights-syntax-markup-inserted-text: #116329;\\n  --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\\n  --color-prettylights-syntax-markup-changed-text: #953800;\\n  --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\\n  --color-prettylights-syntax-markup-ignored-text: #eaeef2;\\n  --color-prettylights-syntax-markup-ignored-bg: #0550ae;\\n  --color-prettylights-syntax-meta-diff-range: #8250df;\\n  --color-prettylights-syntax-brackethighlighter-angle: #57606a;\\n  --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\\n  --color-prettylights-syntax-constant-other-reference-link: #0a3069;\\n  --color-fg-default: #24292f;\\n  --color-fg-muted: #57606a;\\n  --color-fg-subtle: #6e7781;\\n  --color-canvas-default: #ffffff;\\n  --color-canvas-subtle: #f6f8fa;\\n  --color-border-default: #d0d7de;\\n  --color-border-muted: hsl(210, 18%, 87%);\\n  --color-neutral-muted: rgba(175, 184, 193, 0.2);\\n  --color-accent-fg: #0969da;\\n  --color-accent-emphasis: #0969da;\\n  --color-attention-subtle: #fff8c5;\\n  --color-danger-fg: #cf222e;\\n}\\n.wmde-markdown {\\n  -webkit-text-size-adjust: 100%;\\n  font-family: -apple-system, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\\n  font-size: 16px;\\n  line-height: 1.5;\\n  word-wrap: break-word;\\n  color: var(--color-fg-default);\\n  background-color: var(--color-canvas-default);\\n}\\n.wmde-markdown details,\\n.wmde-markdown figcaption,\\n.wmde-markdown figure {\\n  display: block;\\n}\\n.wmde-markdown summary {\\n  display: list-item;\\n}\\n.wmde-markdown [hidden] {\\n  display: none !important;\\n}\\n.wmde-markdown a {\\n  background-color: transparent;\\n  color: var(--color-accent-fg);\\n  text-decoration: none;\\n}\\n.wmde-markdown a:active,\\n.wmde-markdown a:hover {\\n  outline-width: 0;\\n}\\n.wmde-markdown abbr[title] {\\n  border-bottom: none;\\n  -webkit-text-decoration: underline dotted;\\n          text-decoration: underline dotted;\\n}\\n.wmde-markdown b,\\n.wmde-markdown strong {\\n  font-weight: 600;\\n}\\n.wmde-markdown dfn {\\n  font-style: italic;\\n}\\n.wmde-markdown h1 {\\n  margin: 0.67em 0;\\n  font-weight: 600;\\n  padding-bottom: 0.3em;\\n  font-size: 2em;\\n  border-bottom: 1px solid var(--color-border-muted);\\n}\\n.wmde-markdown mark {\\n  background-color: var(--color-attention-subtle);\\n  color: var(--color-text-primary);\\n}\\n.wmde-markdown small {\\n  font-size: 90%;\\n}\\n.wmde-markdown sub,\\n.wmde-markdown sup {\\n  font-size: 75%;\\n  line-height: 0;\\n  position: relative;\\n  vertical-align: baseline;\\n}\\n.wmde-markdown sub {\\n  bottom: -0.25em;\\n}\\n.wmde-markdown sup {\\n  top: -0.5em;\\n}\\n.wmde-markdown img {\\n  border-style: none;\\n  max-width: 100%;\\n  box-sizing: content-box;\\n  background-color: var(--color-canvas-default);\\n}\\n.wmde-markdown code,\\n.wmde-markdown kbd,\\n.wmde-markdown pre,\\n.wmde-markdown samp {\\n  font-family: monospace, monospace;\\n  font-size: 1em;\\n}\\n.wmde-markdown figure {\\n  margin: 1em 40px;\\n}\\n.wmde-markdown hr {\\n  box-sizing: content-box;\\n  overflow: hidden;\\n  background: transparent;\\n  border: 0;\\n  border-bottom: 1px solid var(--color-border-muted);\\n  height: 0.25em;\\n  padding: 0;\\n  margin: 24px 0;\\n  background-color: var(--color-border-default);\\n}\\n.wmde-markdown input {\\n  font: inherit;\\n  margin: 0;\\n  overflow: visible;\\n  font-family: inherit;\\n  font-size: inherit;\\n  line-height: inherit;\\n}\\n.wmde-markdown [type='button'],\\n.wmde-markdown [type='reset'],\\n.wmde-markdown [type='submit'] {\\n  -webkit-appearance: button;\\n}\\n.wmde-markdown [type='button']::-moz-focus-inner,\\n.wmde-markdown [type='reset']::-moz-focus-inner,\\n.wmde-markdown [type='submit']::-moz-focus-inner {\\n  border-style: none;\\n  padding: 0;\\n}\\n.wmde-markdown [type='button']:-moz-focusring,\\n.wmde-markdown [type='reset']:-moz-focusring,\\n.wmde-markdown [type='submit']:-moz-focusring {\\n  outline: 1px dotted ButtonText;\\n}\\n.wmde-markdown [type='checkbox'],\\n.wmde-markdown [type='radio'] {\\n  box-sizing: border-box;\\n  padding: 0;\\n}\\n.wmde-markdown [type='number']::-webkit-inner-spin-button,\\n.wmde-markdown [type='number']::-webkit-outer-spin-button {\\n  height: auto;\\n}\\n.wmde-markdown [type='search'] {\\n  -webkit-appearance: textfield;\\n  outline-offset: -2px;\\n}\\n.wmde-markdown [type='search']::-webkit-search-cancel-button,\\n.wmde-markdown [type='search']::-webkit-search-decoration {\\n  -webkit-appearance: none;\\n}\\n.wmde-markdown ::-webkit-input-placeholder {\\n  color: inherit;\\n  opacity: 0.54;\\n}\\n.wmde-markdown ::-webkit-file-upload-button {\\n  -webkit-appearance: button;\\n  font: inherit;\\n}\\n.wmde-markdown a:hover {\\n  text-decoration: underline;\\n}\\n.wmde-markdown hr::before {\\n  display: table;\\n  content: '';\\n}\\n.wmde-markdown hr::after {\\n  display: table;\\n  clear: both;\\n  content: '';\\n}\\n.wmde-markdown table {\\n  border-spacing: 0;\\n  border-collapse: collapse;\\n  display: block;\\n  width: -webkit-max-content;\\n  width: max-content;\\n  max-width: 100%;\\n}\\n.wmde-markdown td,\\n.wmde-markdown th {\\n  padding: 0;\\n}\\n.wmde-markdown details summary {\\n  cursor: pointer;\\n}\\n.wmde-markdown details:not([open]) > *:not(summary) {\\n  display: none !important;\\n}\\n.wmde-markdown kbd {\\n  display: inline-block;\\n  padding: 3px 5px;\\n  font: 11px ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\\n  line-height: 10px;\\n  color: var(--color-fg-default);\\n  vertical-align: middle;\\n  background-color: var(--color-canvas-subtle);\\n  border: solid 1px var(--color-neutral-muted);\\n  border-bottom-color: var(--color-neutral-muted);\\n  border-radius: 6px;\\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\\n}\\n.wmde-markdown h1,\\n.wmde-markdown h2,\\n.wmde-markdown h3,\\n.wmde-markdown h4,\\n.wmde-markdown h5,\\n.wmde-markdown h6 {\\n  margin-top: 24px;\\n  margin-bottom: 16px;\\n  font-weight: 600;\\n  line-height: 1.25;\\n}\\n.wmde-markdown td,\\n.wmde-markdown th {\\n  padding: 0;\\n}\\n.wmde-markdown details summary {\\n  cursor: pointer;\\n}\\n.wmde-markdown details:not([open]) > *:not(summary) {\\n  display: none !important;\\n}\\n.wmde-markdown kbd {\\n  display: inline-block;\\n  padding: 3px 5px;\\n  font: 11px ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\\n  line-height: 10px;\\n  color: var(--color-fg-default);\\n  vertical-align: middle;\\n  background-color: var(--color-canvas-subtle);\\n  border: solid 1px var(--color-neutral-muted);\\n  border-bottom-color: var(--color-neutral-muted);\\n  border-radius: 6px;\\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\\n}\\n.wmde-markdown h1,\\n.wmde-markdown h2,\\n.wmde-markdown h3,\\n.wmde-markdown h4,\\n.wmde-markdown h5,\\n.wmde-markdown h6 {\\n  margin-top: 24px;\\n  margin-bottom: 16px;\\n  font-weight: 600;\\n  line-height: 1.25;\\n}\\n.wmde-markdown h2 {\\n  font-weight: 600;\\n  padding-bottom: 0.3em;\\n  font-size: 1.5em;\\n  border-bottom: 1px solid var(--color-border-muted);\\n}\\n.wmde-markdown h3 {\\n  font-weight: 600;\\n  font-size: 1.25em;\\n}\\n.wmde-markdown h4 {\\n  font-weight: 600;\\n  font-size: 1em;\\n}\\n.wmde-markdown h5 {\\n  font-weight: 600;\\n  font-size: 0.875em;\\n}\\n.wmde-markdown h6 {\\n  font-weight: 600;\\n  font-size: 0.85em;\\n  color: var(--color-fg-muted);\\n}\\n.wmde-markdown p {\\n  margin-top: 0;\\n  margin-bottom: 10px;\\n}\\n.wmde-markdown blockquote {\\n  margin: 0;\\n  padding: 0 1em;\\n  color: var(--color-fg-muted);\\n  border-left: 0.25em solid var(--color-border-default);\\n}\\n.wmde-markdown ul,\\n.wmde-markdown ol {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  padding-left: 2em;\\n}\\n.wmde-markdown ol ol,\\n.wmde-markdown ul ol {\\n  list-style-type: lower-roman;\\n}\\n.wmde-markdown ul ul ol,\\n.wmde-markdown ul ol ol,\\n.wmde-markdown ol ul ol,\\n.wmde-markdown ol ol ol {\\n  list-style-type: lower-alpha;\\n}\\n.wmde-markdown dd {\\n  margin-left: 0;\\n}\\n.wmde-markdown tt,\\n.wmde-markdown code {\\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\\n  font-size: 12px;\\n}\\n.wmde-markdown pre {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\\n  font-size: 12px;\\n  word-wrap: normal;\\n}\\n.wmde-markdown .octicon {\\n  display: inline-block;\\n  overflow: visible !important;\\n  vertical-align: text-bottom;\\n  fill: currentColor;\\n}\\n.wmde-markdown ::-webkit-input-placeholder {\\n  color: var(--color-fg-subtle);\\n  opacity: 1;\\n}\\n.wmde-markdown ::placeholder {\\n  color: var(--color-fg-subtle);\\n  opacity: 1;\\n}\\n.wmde-markdown input::-webkit-outer-spin-button,\\n.wmde-markdown input::-webkit-inner-spin-button {\\n  margin: 0;\\n  -webkit-appearance: none;\\n  appearance: none;\\n}\\n.wmde-markdown [data-catalyst] {\\n  display: block;\\n}\\n.wmde-markdown::before {\\n  display: table;\\n  content: '';\\n}\\n.wmde-markdown::after {\\n  display: table;\\n  clear: both;\\n  content: '';\\n}\\n.wmde-markdown > *:first-child {\\n  margin-top: 0 !important;\\n}\\n.wmde-markdown > *:last-child {\\n  margin-bottom: 0 !important;\\n}\\n.wmde-markdown a:not([href]) {\\n  color: inherit;\\n  text-decoration: none;\\n}\\n.wmde-markdown .absent {\\n  color: var(--color-danger-fg);\\n}\\n.wmde-markdown a.anchor {\\n  float: left;\\n  padding-right: 4px;\\n  margin-left: -20px;\\n  line-height: 1;\\n}\\n.wmde-markdown .anchor:focus {\\n  outline: none;\\n}\\n.wmde-markdown p,\\n.wmde-markdown blockquote,\\n.wmde-markdown ul,\\n.wmde-markdown ol,\\n.wmde-markdown dl,\\n.wmde-markdown table,\\n.wmde-markdown pre,\\n.wmde-markdown details {\\n  margin-top: 0;\\n  margin-bottom: 16px;\\n}\\n.wmde-markdown blockquote > :first-child {\\n  margin-top: 0;\\n}\\n.wmde-markdown blockquote > :last-child {\\n  margin-bottom: 0;\\n}\\n.wmde-markdown sup > a::before {\\n  content: '[';\\n}\\n.wmde-markdown sup > a::after {\\n  content: ']';\\n}\\n.wmde-markdown h1 .octicon-link,\\n.wmde-markdown h2 .octicon-link,\\n.wmde-markdown h3 .octicon-link,\\n.wmde-markdown h4 .octicon-link,\\n.wmde-markdown h5 .octicon-link,\\n.wmde-markdown h6 .octicon-link {\\n  color: var(--color-fg-default);\\n  vertical-align: middle;\\n  visibility: hidden;\\n}\\n.wmde-markdown h1:hover .anchor,\\n.wmde-markdown h2:hover .anchor,\\n.wmde-markdown h3:hover .anchor,\\n.wmde-markdown h4:hover .anchor,\\n.wmde-markdown h5:hover .anchor,\\n.wmde-markdown h6:hover .anchor {\\n  text-decoration: none;\\n}\\n.wmde-markdown h1:hover .anchor .octicon-link,\\n.wmde-markdown h2:hover .anchor .octicon-link,\\n.wmde-markdown h3:hover .anchor .octicon-link,\\n.wmde-markdown h4:hover .anchor .octicon-link,\\n.wmde-markdown h5:hover .anchor .octicon-link,\\n.wmde-markdown h6:hover .anchor .octicon-link {\\n  visibility: visible;\\n}\\n.wmde-markdown h1 tt,\\n.wmde-markdown h1 code,\\n.wmde-markdown h2 tt,\\n.wmde-markdown h2 code,\\n.wmde-markdown h3 tt,\\n.wmde-markdown h3 code,\\n.wmde-markdown h4 tt,\\n.wmde-markdown h4 code,\\n.wmde-markdown h5 tt,\\n.wmde-markdown h5 code,\\n.wmde-markdown h6 tt,\\n.wmde-markdown h6 code {\\n  padding: 0 0.2em;\\n  font-size: inherit;\\n}\\n.wmde-markdown ul.no-list,\\n.wmde-markdown ol.no-list {\\n  padding: 0;\\n  list-style-type: none;\\n}\\n.wmde-markdown ol[type='1'] {\\n  list-style-type: decimal;\\n}\\n.wmde-markdown ol[type='a'] {\\n  list-style-type: lower-alpha;\\n}\\n.wmde-markdown ol[type='i'] {\\n  list-style-type: lower-roman;\\n}\\n.wmde-markdown div > ol:not([type]) {\\n  list-style-type: decimal;\\n}\\n.wmde-markdown ul ul,\\n.wmde-markdown ul ol,\\n.wmde-markdown ol ol,\\n.wmde-markdown ol ul {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n}\\n.wmde-markdown li > p {\\n  margin-top: 16px;\\n}\\n.wmde-markdown li + li {\\n  margin-top: 0.25em;\\n}\\n.wmde-markdown dl {\\n  padding: 0;\\n}\\n.wmde-markdown dl dt {\\n  padding: 0;\\n  margin-top: 16px;\\n  font-size: 1em;\\n  font-style: italic;\\n  font-weight: 600;\\n}\\n.wmde-markdown dl dd {\\n  padding: 0 16px;\\n  margin-bottom: 16px;\\n}\\n.wmde-markdown table th {\\n  font-weight: 600;\\n}\\n.wmde-markdown table th,\\n.wmde-markdown table td {\\n  padding: 6px 13px;\\n  border: 1px solid var(--color-border-default);\\n}\\n.wmde-markdown table tr {\\n  background-color: var(--color-canvas-default);\\n  border-top: 1px solid var(--color-border-muted);\\n}\\n.wmde-markdown table tr:nth-child(2n) {\\n  background-color: var(--color-canvas-subtle);\\n}\\n.wmde-markdown table img {\\n  background-color: transparent;\\n}\\n.wmde-markdown img[align='right'] {\\n  padding-left: 20px;\\n}\\n.wmde-markdown img[align='left'] {\\n  padding-right: 20px;\\n}\\n.wmde-markdown .emoji {\\n  max-width: none;\\n  vertical-align: text-top;\\n  background-color: transparent;\\n}\\n.wmde-markdown span.frame {\\n  display: block;\\n  overflow: hidden;\\n}\\n.wmde-markdown span.frame > span {\\n  display: block;\\n  float: left;\\n  width: auto;\\n  padding: 7px;\\n  margin: 13px 0 0;\\n  overflow: hidden;\\n  border: 1px solid var(--color-border-default);\\n}\\n.wmde-markdown span.frame span img {\\n  display: block;\\n  float: left;\\n}\\n.wmde-markdown span.frame span span {\\n  display: block;\\n  padding: 5px 0 0;\\n  clear: both;\\n  color: var(--color-fg-default);\\n}\\n.wmde-markdown span.align-center {\\n  display: block;\\n  overflow: hidden;\\n  clear: both;\\n}\\n.wmde-markdown span.align-center > span {\\n  display: block;\\n  margin: 13px auto 0;\\n  overflow: hidden;\\n  text-align: center;\\n}\\n.wmde-markdown span.align-center span img {\\n  margin: 0 auto;\\n  text-align: center;\\n}\\n.wmde-markdown span.align-right {\\n  display: block;\\n  overflow: hidden;\\n  clear: both;\\n}\\n.wmde-markdown span.align-right > span {\\n  display: block;\\n  margin: 13px 0 0;\\n  overflow: hidden;\\n  text-align: right;\\n}\\n.wmde-markdown span.align-right span img {\\n  margin: 0;\\n  text-align: right;\\n}\\n.wmde-markdown span.float-left {\\n  display: block;\\n  float: left;\\n  margin-right: 13px;\\n  overflow: hidden;\\n}\\n.wmde-markdown span.float-left span {\\n  margin: 13px 0 0;\\n}\\n.wmde-markdown span.float-right {\\n  display: block;\\n  float: right;\\n  margin-left: 13px;\\n  overflow: hidden;\\n}\\n.wmde-markdown span.float-right > span {\\n  display: block;\\n  margin: 13px auto 0;\\n  overflow: hidden;\\n  text-align: right;\\n}\\n.wmde-markdown code,\\n.wmde-markdown tt {\\n  padding: 0.2em 0.4em;\\n  margin: 0;\\n  font-size: 85%;\\n  background-color: var(--color-neutral-muted);\\n  border-radius: 6px;\\n}\\n.wmde-markdown code br,\\n.wmde-markdown tt br {\\n  display: none;\\n}\\n.wmde-markdown del code {\\n  text-decoration: inherit;\\n}\\n.wmde-markdown pre code {\\n  font-size: 100%;\\n}\\n.wmde-markdown pre > code {\\n  padding: 0;\\n  margin: 0;\\n  word-break: normal;\\n  white-space: pre;\\n  background: transparent;\\n  border: 0;\\n}\\n.wmde-markdown pre {\\n  font-size: 85%;\\n  line-height: 1.45;\\n  background-color: var(--color-canvas-subtle);\\n  border-radius: 6px;\\n}\\n.wmde-markdown pre code,\\n.wmde-markdown pre tt {\\n  display: inline;\\n  max-width: auto;\\n  padding: 0;\\n  margin: 0;\\n  overflow: visible;\\n  line-height: inherit;\\n  word-wrap: normal;\\n  background-color: transparent;\\n  border: 0;\\n}\\n.wmde-markdown pre > code {\\n  padding: 16px;\\n  overflow: auto;\\n  display: block;\\n}\\n.wmde-markdown .csv-data td,\\n.wmde-markdown .csv-data th {\\n  padding: 5px;\\n  overflow: hidden;\\n  font-size: 12px;\\n  line-height: 1;\\n  text-align: left;\\n  white-space: nowrap;\\n}\\n.wmde-markdown .csv-data .blob-num {\\n  padding: 10px 8px 9px;\\n  text-align: right;\\n  background: var(--color-canvas-default);\\n  border: 0;\\n}\\n.wmde-markdown .csv-data tr {\\n  border-top: 0;\\n}\\n.wmde-markdown .csv-data th {\\n  font-weight: 600;\\n  background: var(--color-canvas-subtle);\\n  border-top: 0;\\n}\\n.wmde-markdown .footnotes {\\n  font-size: 12px;\\n  color: var(--color-fg-muted);\\n  border-top: 1px solid var(--color-border-default);\\n}\\n.wmde-markdown .footnotes ol {\\n  padding-left: 16px;\\n}\\n.wmde-markdown .footnotes li {\\n  position: relative;\\n}\\n.wmde-markdown .footnotes li:target::before {\\n  position: absolute;\\n  top: -8px;\\n  right: -8px;\\n  bottom: -8px;\\n  left: -24px;\\n  pointer-events: none;\\n  content: '';\\n  border: 2px solid var(--color-accent-emphasis);\\n  border-radius: 6px;\\n}\\n.wmde-markdown .footnotes li:target {\\n  color: var(--color-fg-default);\\n}\\n.wmde-markdown .footnotes .data-footnote-backref g-emoji {\\n  font-family: monospace;\\n}\\n.wmde-markdown .task-list-item {\\n  list-style-type: none;\\n}\\n.wmde-markdown .task-list-item label {\\n  font-weight: 400;\\n}\\n.wmde-markdown .task-list-item.enabled label {\\n  cursor: pointer;\\n}\\n.wmde-markdown .task-list-item + .wmde-markdown .task-list-item {\\n  margin-top: 3px;\\n}\\n.wmde-markdown .task-list-item .handle {\\n  display: none;\\n}\\n.wmde-markdown .task-list-item-checkbox,\\n.wmde-markdown .contains-task-list input[type='checkbox'] {\\n  margin: 0 0.2em 0.25em -1.6em;\\n  vertical-align: middle;\\n}\\n.wmde-markdown .contains-task-list:dir(rtl) .task-list-item-checkbox,\\n.wmde-markdown .contains-task-list:dir(rtl) input[type='checkbox'] {\\n  margin: 0 -1.6em 0.25em 0.2em;\\n}\\n.wmde-markdown ::-webkit-calendar-picker-indicator {\\n  -webkit-filter: invert(50%);\\n          filter: invert(50%);\\n}\\n.wmde-markdown pre[class*='language-'] {\\n  position: relative;\\n}\\n.wmde-markdown pre .copied {\\n  visibility: hidden;\\n  display: flex;\\n  position: absolute;\\n  cursor: pointer;\\n  color: var(--color-fg-defaul);\\n  top: 6px;\\n  right: 6px;\\n  border-radius: 5px;\\n  background: var(--color-border-default);\\n  padding: 6px;\\n  font-size: 12px;\\n  transition: all 0.3s;\\n}\\n.wmde-markdown pre .copied .octicon-copy {\\n  display: block;\\n}\\n.wmde-markdown pre .copied .octicon-check {\\n  display: none;\\n}\\n.wmde-markdown pre:hover .copied {\\n  visibility: visible;\\n}\\n.wmde-markdown pre:hover .copied:hover {\\n  background: var(--color-prettylights-syntax-entity-tag);\\n  color: var(--color-canvas-default);\\n}\\n.wmde-markdown pre:hover .copied:active,\\n.wmde-markdown pre .copied.active {\\n  background: #2e9b33;\\n  color: var(--color-canvas-default);\\n}\\n.wmde-markdown pre .active .octicon-copy {\\n  display: none;\\n}\\n.wmde-markdown pre .active .octicon-check {\\n  display: block;\\n}\\n.token.comment,\\n.token.prolog,\\n.token.doctype,\\n.token.cdata {\\n  color: var(--color-prettylights-syntax-comment);\\n}\\n.token.namespace {\\n  opacity: 0.7;\\n}\\n.token.property,\\n.token.tag,\\n.token.selector,\\n.token.constant,\\n.token.symbol,\\n.token.deleted {\\n  color: var(--color-prettylights-syntax-entity-tag);\\n}\\n.token.maybe-class-name {\\n  color: var(--color-prettylights-syntax-variable);\\n}\\n.token.property-access,\\n.token.operator,\\n.token.boolean,\\n.token.number,\\n.token.selector .token.class,\\n.token.attr-name,\\n.token.string,\\n.token.char,\\n.token.builtin {\\n  color: var(--color-prettylights-syntax-constant);\\n}\\n.token.deleted {\\n  color: var(--color-prettylights-syntax-markup-deleted-text);\\n}\\n.code-line .token.deleted {\\n  background-color: var(--color-prettylights-syntax-markup-deleted-bg);\\n}\\n.token.inserted {\\n  color: var(--color-prettylights-syntax-markup-inserted-text);\\n}\\n.code-line .token.inserted {\\n  background-color: var(--color-prettylights-syntax-markup-inserted-bg);\\n}\\n.token.variable {\\n  color: var(--color-prettylights-syntax-constant);\\n}\\n.token.entity,\\n.token.url,\\n.language-css .token.string,\\n.style .token.string {\\n  color: var(--color-prettylights-syntax-string);\\n}\\n.token.color,\\n.token.atrule,\\n.token.attr-value,\\n.token.function,\\n.token.class-name {\\n  color: var(--color-prettylights-syntax-string);\\n}\\n.token.rule,\\n.token.regex,\\n.token.important,\\n.token.keyword {\\n  color: var(--color-prettylights-syntax-keyword);\\n}\\n.token.coord {\\n  color: var(--color-prettylights-syntax-meta-diff-range);\\n}\\n.token.important,\\n.token.bold {\\n  font-weight: bold;\\n}\\n.token.italic {\\n  font-style: italic;\\n}\\n.token.entity {\\n  cursor: help;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\n/* harmony import */ var _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _next_dist_build_webpack_loaders_css_loader_src_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".w-md-editor-bar {\\n  position: absolute;\\n  cursor: s-resize;\\n  right: 0;\\n  bottom: 0;\\n  margin-top: -11px;\\n  margin-right: 0;\\n  width: 14px;\\n  z-index: 3;\\n  height: 10px;\\n  border-radius: 0 0 3px 0;\\n  -webkit-user-select: none;\\n          -moz-user-select: none;\\n       user-select: none;\\n}\\n.w-md-editor-bar svg {\\n  display: block;\\n  margin: 0 auto;\\n}\\n.w-md-editor-aree {\\n  overflow: auto;\\n  border-radius: 5px;\\n}\\n.w-md-editor-text {\\n  min-height: 100%;\\n  position: relative;\\n  text-align: left;\\n  white-space: pre-wrap;\\n  word-break: keep-all;\\n  overflow-wrap: break-word;\\n  box-sizing: border-box;\\n  padding: 10px;\\n  margin: 0;\\n  font-size: 14px;\\n  line-height: 18px;\\n  font-variant-ligatures: common-ligatures;\\n}\\n.w-md-editor-text-pre,\\n.w-md-editor-text-input,\\n.w-md-editor-text > .w-md-editor-text-pre {\\n  margin: 0;\\n  border: 0;\\n  background: none;\\n  box-sizing: inherit;\\n  display: inherit;\\n  font-family: inherit;\\n  font-size: inherit;\\n  font-style: inherit;\\n  font-variant-ligatures: inherit;\\n  font-weight: inherit;\\n  letter-spacing: inherit;\\n  line-height: inherit;\\n  -moz-tab-size: inherit;\\n    -o-tab-size: inherit;\\n       tab-size: inherit;\\n  text-indent: inherit;\\n  text-rendering: inherit;\\n  text-transform: inherit;\\n  white-space: inherit;\\n  overflow-wrap: inherit;\\n  word-break: inherit;\\n  word-break: normal;\\n  padding: 0;\\n}\\n.w-md-editor-text-pre > code,\\n.w-md-editor-text-input > code,\\n.w-md-editor-text > .w-md-editor-text-pre > code {\\n  font-family: inherit;\\n}\\n.w-md-editor-text-pre {\\n  position: relative;\\n  margin: 0px !important;\\n  pointer-events: none;\\n  background-color: transparent !important;\\n}\\n.w-md-editor-text-pre > code {\\n  padding: 0 !important;\\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif !important;\\n  font-size: 14px !important;\\n  line-height: 18px !important;\\n}\\n.w-md-editor-text-input {\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  height: 100%;\\n  width: 100%;\\n  resize: none;\\n  color: inherit;\\n  overflow: hidden;\\n  outline: 0;\\n  padding: inherit;\\n  -webkit-font-smoothing: antialiased;\\n  -webkit-text-fill-color: transparent;\\n}\\n.w-md-editor-text-input:empty {\\n  -webkit-text-fill-color: inherit !important;\\n}\\n.w-md-editor-text-pre,\\n.w-md-editor-text-input {\\n  word-wrap: pre;\\n  word-break: break-word;\\n  white-space: pre-wrap;\\n}\\n/**\\n * Hack to apply on some CSS on IE10 and IE11\\n */\\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\\n  /**\\n    * IE doesn't support '-webkit-text-fill-color'\\n    * So we use 'color: transparent' to make the text transparent on IE\\n    * Unlike other browsers, it doesn't affect caret color in IE\\n    */\\n  .w-md-editor-text-input {\\n    color: transparent !important;\\n  }\\n  .w-md-editor-text-input::-moz-selection {\\n    background-color: #accef7 !important;\\n    color: transparent !important;\\n  }\\n  .w-md-editor-text-input::selection {\\n    background-color: #accef7 !important;\\n    color: transparent !important;\\n  }\\n}\\n.w-md-editor-text-pre .punctuation {\\n  color: var(--color-prettylights-syntax-comment) !important;\\n}\\n.w-md-editor-text-pre .token.url,\\n.w-md-editor-text-pre .token.content {\\n  color: var(--color-prettylights-syntax-constant) !important;\\n}\\n.w-md-editor-text-pre .token.title.important {\\n  color: var(--color-prettylights-syntax-markup-bold);\\n}\\n.w-md-editor-text-pre .token.code-block .function {\\n  color: var(--color-prettylights-syntax-entity);\\n}\\n.w-md-editor-text-pre .token.bold {\\n  font-weight: unset !important;\\n}\\n.w-md-editor-text-pre .token.title {\\n  line-height: unset !important;\\n  font-size: unset !important;\\n  font-weight: unset !important;\\n}\\n.w-md-editor-text-pre .token.code.keyword {\\n  color: var(--color-prettylights-syntax-constant) !important;\\n}\\n.w-md-editor-text-pre .token.strike,\\n.w-md-editor-text-pre .token.strike .content {\\n  color: var(--color-prettylights-syntax-markup-deleted-text) !important;\\n}\\n.w-md-editor-toolbar-child {\\n  position: absolute;\\n  border-radius: 3px;\\n  box-shadow: 0 0 0 1px var(--color-border-default), 0 0 0 var(--color-border-default), 0 1px 1px var(--color-border-default);\\n  background-color: var(--color-canvas-default);\\n  z-index: 1;\\n  display: none;\\n}\\n.w-md-editor-toolbar-child.active {\\n  display: block;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar {\\n  border-bottom: 0;\\n  padding: 3px;\\n  border-radius: 3px;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li {\\n  display: block;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li button {\\n  width: -webkit-fill-available;\\n  height: initial;\\n  box-sizing: border-box;\\n  padding: 3px 4px 2px 4px;\\n  margin: 0;\\n}\\n.w-md-editor-toolbar {\\n  border-bottom: 1px solid var(--color-border-default);\\n  background-color: var(--color-canvas-default);\\n  padding: 5px 5px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  border-radius: 3px 3px 0 0;\\n  -webkit-user-select: none;\\n          -moz-user-select: none;\\n       user-select: none;\\n  flex-wrap: wrap;\\n}\\n.w-md-editor-toolbar.bottom {\\n  border-bottom: 0px;\\n  border-top: 1px solid var(--color-border-default);\\n  border-radius: 0 0 3px 3px;\\n}\\n.w-md-editor-toolbar ul,\\n.w-md-editor-toolbar li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n  line-height: initial;\\n}\\n.w-md-editor-toolbar li {\\n  display: inline-block;\\n  font-size: 14px;\\n}\\n.w-md-editor-toolbar li + li {\\n  margin: 0;\\n}\\n.w-md-editor-toolbar li > button {\\n  border: none;\\n  height: 20px;\\n  line-height: 14px;\\n  background: none;\\n  padding: 4px;\\n  margin: 0 1px;\\n  border-radius: 2px;\\n  text-transform: none;\\n  font-weight: normal;\\n  overflow: visible;\\n  outline: none;\\n  cursor: pointer;\\n  transition: all 0.3s;\\n  white-space: nowrap;\\n  color: var(--color-fg-default);\\n}\\n.w-md-editor-toolbar li > button:hover,\\n.w-md-editor-toolbar li > button:focus {\\n  background-color: var(--color-neutral-muted);\\n  color: var(--color-accent-fg);\\n}\\n.w-md-editor-toolbar li > button:active {\\n  background-color: var(--color-neutral-muted);\\n  color: var(--color-danger-fg);\\n}\\n.w-md-editor-toolbar li > button:disabled {\\n  color: var(--color-border-default);\\n  cursor: not-allowed;\\n}\\n.w-md-editor-toolbar li > button:disabled:hover {\\n  background-color: transparent;\\n  color: var(--color-border-default);\\n}\\n.w-md-editor-toolbar li.active > button {\\n  color: var(--color-accent-fg);\\n  background-color: var(--color-neutral-muted);\\n}\\n.w-md-editor-toolbar-divider {\\n  height: 14px;\\n  width: 1px;\\n  margin: -3px 3px 0 3px !important;\\n  vertical-align: middle;\\n  background-color: var(--color-border-default);\\n}\\n.w-md-editor {\\n  text-align: left;\\n  border-radius: 3px;\\n  padding-bottom: 1px;\\n  position: relative;\\n  color: var(--color-fg-default);\\n  box-shadow: 0 0 0 1px var(--color-border-default), 0 0 0 var(--color-border-default), 0 1px 1px var(--color-border-default);\\n  background-color: var(--color-canvas-default);\\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\\n  display: flex;\\n  flex-direction: column;\\n}\\n.w-md-editor-toolbar {\\n  height: -moz-fit-content;\\n  height: fit-content;\\n}\\n.w-md-editor-content {\\n  height: 100%;\\n  overflow: auto;\\n  position: relative;\\n  border-radius: 0 0 3px 0;\\n}\\n.w-md-editor .copied {\\n  display: none !important;\\n}\\n.w-md-editor-input {\\n  width: 50%;\\n  height: 100%;\\n}\\n.w-md-editor-text-pre > code {\\n  word-break: break-word !important;\\n  white-space: pre-wrap !important;\\n}\\n.w-md-editor-preview {\\n  width: 50%;\\n  box-sizing: border-box;\\n  box-shadow: inset 1px 0 0 0 var(--color-border-default);\\n  position: absolute;\\n  padding: 10px 20px;\\n  overflow: auto;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  border-radius: 0 0 5px 0;\\n  display: flex;\\n  flex-direction: column;\\n}\\n.w-md-editor-preview .anchor {\\n  display: none;\\n}\\n.w-md-editor-preview .contains-task-list {\\n  list-style: none;\\n}\\n.w-md-editor-show-preview .w-md-editor-input {\\n  width: 0%;\\n  overflow: hidden;\\n  background-color: var(--color-canvas-default);\\n}\\n.w-md-editor-show-preview .w-md-editor-preview {\\n  width: 100%;\\n  box-shadow: inset 0 0 0 0;\\n}\\n.w-md-editor-show-edit .w-md-editor-input {\\n  width: 100%;\\n}\\n.w-md-editor-show-edit .w-md-editor-preview {\\n  width: 0%;\\n  padding: 0;\\n}\\n.w-md-editor-fullscreen {\\n  overflow: hidden;\\n  position: fixed;\\n  z-index: 99999;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  height: 100% !important;\\n}\\n.w-md-editor-fullscreen .w-md-editor-content {\\n  height: 100%;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://node_modules/@uiw/react-md-editor/markdown-editor.css\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\".w-md-editor-bar {\\n  position: absolute;\\n  cursor: s-resize;\\n  right: 0;\\n  bottom: 0;\\n  margin-top: -11px;\\n  margin-right: 0;\\n  width: 14px;\\n  z-index: 3;\\n  height: 10px;\\n  border-radius: 0 0 3px 0;\\n  -webkit-user-select: none;\\n          user-select: none;\\n}\\n.w-md-editor-bar svg {\\n  display: block;\\n  margin: 0 auto;\\n}\\n.w-md-editor-aree {\\n  overflow: auto;\\n  border-radius: 5px;\\n}\\n.w-md-editor-text {\\n  min-height: 100%;\\n  position: relative;\\n  text-align: left;\\n  white-space: pre-wrap;\\n  word-break: keep-all;\\n  overflow-wrap: break-word;\\n  box-sizing: border-box;\\n  padding: 10px;\\n  margin: 0;\\n  font-size: 14px;\\n  line-height: 18px;\\n  -webkit-font-variant-ligatures: common-ligatures;\\n          font-variant-ligatures: common-ligatures;\\n}\\n.w-md-editor-text-pre,\\n.w-md-editor-text-input,\\n.w-md-editor-text > .w-md-editor-text-pre {\\n  margin: 0;\\n  border: 0;\\n  background: none;\\n  box-sizing: inherit;\\n  display: inherit;\\n  font-family: inherit;\\n  font-size: inherit;\\n  font-style: inherit;\\n  -webkit-font-variant-ligatures: inherit;\\n          font-variant-ligatures: inherit;\\n  font-weight: inherit;\\n  letter-spacing: inherit;\\n  line-height: inherit;\\n  tab-size: inherit;\\n  text-indent: inherit;\\n  text-rendering: inherit;\\n  text-transform: inherit;\\n  white-space: inherit;\\n  overflow-wrap: inherit;\\n  word-break: inherit;\\n  word-break: normal;\\n  padding: 0;\\n}\\n.w-md-editor-text-pre > code,\\n.w-md-editor-text-input > code,\\n.w-md-editor-text > .w-md-editor-text-pre > code {\\n  font-family: inherit;\\n}\\n.w-md-editor-text-pre {\\n  position: relative;\\n  margin: 0px !important;\\n  pointer-events: none;\\n  background-color: transparent !important;\\n}\\n.w-md-editor-text-pre > code {\\n  padding: 0 !important;\\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif !important;\\n  font-size: 14px !important;\\n  line-height: 18px !important;\\n}\\n.w-md-editor-text-input {\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n  height: 100%;\\n  width: 100%;\\n  resize: none;\\n  color: inherit;\\n  overflow: hidden;\\n  outline: 0;\\n  padding: inherit;\\n  -webkit-font-smoothing: antialiased;\\n  -webkit-text-fill-color: transparent;\\n}\\n.w-md-editor-text-input:empty {\\n  -webkit-text-fill-color: inherit !important;\\n}\\n.w-md-editor-text-pre,\\n.w-md-editor-text-input {\\n  word-wrap: pre;\\n  word-break: break-word;\\n  white-space: pre-wrap;\\n}\\n/**\\n * Hack to apply on some CSS on IE10 and IE11\\n */\\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\\n  /**\\n    * IE doesn't support '-webkit-text-fill-color'\\n    * So we use 'color: transparent' to make the text transparent on IE\\n    * Unlike other browsers, it doesn't affect caret color in IE\\n    */\\n  .w-md-editor-text-input {\\n    color: transparent !important;\\n  }\\n  .w-md-editor-text-input::selection {\\n    background-color: #accef7 !important;\\n    color: transparent !important;\\n  }\\n}\\n.w-md-editor-text-pre .punctuation {\\n  color: var(--color-prettylights-syntax-comment) !important;\\n}\\n.w-md-editor-text-pre .token.url,\\n.w-md-editor-text-pre .token.content {\\n  color: var(--color-prettylights-syntax-constant) !important;\\n}\\n.w-md-editor-text-pre .token.title.important {\\n  color: var(--color-prettylights-syntax-markup-bold);\\n}\\n.w-md-editor-text-pre .token.code-block .function {\\n  color: var(--color-prettylights-syntax-entity);\\n}\\n.w-md-editor-text-pre .token.bold {\\n  font-weight: unset !important;\\n}\\n.w-md-editor-text-pre .token.title {\\n  line-height: unset !important;\\n  font-size: unset !important;\\n  font-weight: unset !important;\\n}\\n.w-md-editor-text-pre .token.code.keyword {\\n  color: var(--color-prettylights-syntax-constant) !important;\\n}\\n.w-md-editor-text-pre .token.strike,\\n.w-md-editor-text-pre .token.strike .content {\\n  color: var(--color-prettylights-syntax-markup-deleted-text) !important;\\n}\\n.w-md-editor-toolbar-child {\\n  position: absolute;\\n  border-radius: 3px;\\n  box-shadow: 0 0 0 1px var(--color-border-default), 0 0 0 var(--color-border-default), 0 1px 1px var(--color-border-default);\\n  background-color: var(--color-canvas-default);\\n  z-index: 1;\\n  display: none;\\n}\\n.w-md-editor-toolbar-child.active {\\n  display: block;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar {\\n  border-bottom: 0;\\n  padding: 3px;\\n  border-radius: 3px;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li {\\n  display: block;\\n}\\n.w-md-editor-toolbar-child .w-md-editor-toolbar ul > li button {\\n  width: -webkit-fill-available;\\n  height: initial;\\n  box-sizing: border-box;\\n  padding: 3px 4px 2px 4px;\\n  margin: 0;\\n}\\n.w-md-editor-toolbar {\\n  border-bottom: 1px solid var(--color-border-default);\\n  background-color: var(--color-canvas-default);\\n  padding: 5px 5px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  border-radius: 3px 3px 0 0;\\n  -webkit-user-select: none;\\n          user-select: none;\\n  flex-wrap: wrap;\\n}\\n.w-md-editor-toolbar.bottom {\\n  border-bottom: 0px;\\n  border-top: 1px solid var(--color-border-default);\\n  border-radius: 0 0 3px 3px;\\n}\\n.w-md-editor-toolbar ul,\\n.w-md-editor-toolbar li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n  line-height: initial;\\n}\\n.w-md-editor-toolbar li {\\n  display: inline-block;\\n  font-size: 14px;\\n}\\n.w-md-editor-toolbar li + li {\\n  margin: 0;\\n}\\n.w-md-editor-toolbar li > button {\\n  border: none;\\n  height: 20px;\\n  line-height: 14px;\\n  background: none;\\n  padding: 4px;\\n  margin: 0 1px;\\n  border-radius: 2px;\\n  text-transform: none;\\n  font-weight: normal;\\n  overflow: visible;\\n  outline: none;\\n  cursor: pointer;\\n  transition: all 0.3s;\\n  white-space: nowrap;\\n  color: var(--color-fg-default);\\n}\\n.w-md-editor-toolbar li > button:hover,\\n.w-md-editor-toolbar li > button:focus {\\n  background-color: var(--color-neutral-muted);\\n  color: var(--color-accent-fg);\\n}\\n.w-md-editor-toolbar li > button:active {\\n  background-color: var(--color-neutral-muted);\\n  color: var(--color-danger-fg);\\n}\\n.w-md-editor-toolbar li > button:disabled {\\n  color: var(--color-border-default);\\n  cursor: not-allowed;\\n}\\n.w-md-editor-toolbar li > button:disabled:hover {\\n  background-color: transparent;\\n  color: var(--color-border-default);\\n}\\n.w-md-editor-toolbar li.active > button {\\n  color: var(--color-accent-fg);\\n  background-color: var(--color-neutral-muted);\\n}\\n.w-md-editor-toolbar-divider {\\n  height: 14px;\\n  width: 1px;\\n  margin: -3px 3px 0 3px !important;\\n  vertical-align: middle;\\n  background-color: var(--color-border-default);\\n}\\n.w-md-editor {\\n  text-align: left;\\n  border-radius: 3px;\\n  padding-bottom: 1px;\\n  position: relative;\\n  color: var(--color-fg-default);\\n  box-shadow: 0 0 0 1px var(--color-border-default), 0 0 0 var(--color-border-default), 0 1px 1px var(--color-border-default);\\n  background-color: var(--color-canvas-default);\\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\\n  display: flex;\\n  flex-direction: column;\\n}\\n.w-md-editor-toolbar {\\n  height: -webkit-fit-content;\\n  height: fit-content;\\n}\\n.w-md-editor-content {\\n  height: 100%;\\n  overflow: auto;\\n  position: relative;\\n  border-radius: 0 0 3px 0;\\n}\\n.w-md-editor .copied {\\n  display: none !important;\\n}\\n.w-md-editor-input {\\n  width: 50%;\\n  height: 100%;\\n}\\n.w-md-editor-text-pre > code {\\n  word-break: break-word !important;\\n  white-space: pre-wrap !important;\\n}\\n.w-md-editor-preview {\\n  width: 50%;\\n  box-sizing: border-box;\\n  box-shadow: inset 1px 0 0 0 var(--color-border-default);\\n  position: absolute;\\n  padding: 10px 20px;\\n  overflow: auto;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  border-radius: 0 0 5px 0;\\n  display: flex;\\n  flex-direction: column;\\n}\\n.w-md-editor-preview .anchor {\\n  display: none;\\n}\\n.w-md-editor-preview .contains-task-list {\\n  list-style: none;\\n}\\n.w-md-editor-show-preview .w-md-editor-input {\\n  width: 0%;\\n  overflow: hidden;\\n  background-color: var(--color-canvas-default);\\n}\\n.w-md-editor-show-preview .w-md-editor-preview {\\n  width: 100%;\\n  box-shadow: inset 0 0 0 0;\\n}\\n.w-md-editor-show-edit .w-md-editor-input {\\n  width: 100%;\\n}\\n.w-md-editor-show-edit .w-md-editor-preview {\\n  width: 0%;\\n  padding: 0;\\n}\\n.w-md-editor-fullscreen {\\n  overflow: hidden;\\n  position: fixed;\\n  z-index: 99999;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  height: 100% !important;\\n}\\n.w-md-editor-fullscreen .w-md-editor-content {\\n  height: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5Cmk448%5CDv_study%5Cfdbs_proto%5CfdbsVer1.0%5Cpages%5Cfictions%5Ccreate.tsx&page=%2Ffictions%2Fcreate!":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5Cmk448%5CDv_study%5Cfdbs_proto%5CfdbsVer1.0%5Cpages%5Cfictions%5Ccreate.tsx&page=%2Ffictions%2Fcreate! ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/fictions/create\",\n      function () {\n        return __webpack_require__(/*! ./pages/fictions/create.tsx */ \"./pages/fictions/create.tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/fictions/create\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1DJTNBJTVDVXNlcnMlNUNtazQ0OCU1Q0R2X3N0dWR5JTVDZmRic19wcm90byU1Q2ZkYnNWZXIxLjAlNUNwYWdlcyU1Q2ZpY3Rpb25zJTVDY3JlYXRlLnRzeCZwYWdlPSUyRmZpY3Rpb25zJTJGY3JlYXRlIS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLGdFQUE2QjtBQUNwRDtBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/MWVjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAod2luZG93Ll9fTkVYVF9QID0gd2luZG93Ll9fTkVYVF9QIHx8IFtdKS5wdXNoKFtcbiAgICAgIFwiL2ZpY3Rpb25zL2NyZWF0ZVwiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi4vcGFnZXMvZmljdGlvbnMvY3JlYXRlLnRzeFwiKTtcbiAgICAgIH1cbiAgICBdKTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3cuX19ORVhUX1AucHVzaChbXCIvZmljdGlvbnMvY3JlYXRlXCJdKVxuICAgICAgfSk7XG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5Cmk448%5CDv_study%5Cfdbs_proto%5CfdbsVer1.0%5Cpages%5Cfictions%5Ccreate.tsx&page=%2Ffictions%2Fcreate!\n"));

/***/ }),

/***/ "./node_modules/@uiw/react-markdown-preview/markdown.css":
/*!***************************************************************!*\
  !*** ./node_modules/@uiw/react-markdown-preview/markdown.css ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./markdown.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./markdown.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./markdown.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-markdown-preview/markdown.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHVpdy9yZWFjdC1tYXJrZG93bi1wcmV2aWV3L21hcmtkb3duLmNzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsME1BQThGO0FBQ2hILDBCQUEwQixtQkFBTyxDQUFDLHVmQUE0Tjs7QUFFOVA7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLElBQUksSUFBVTtBQUNkLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGlCQUFpQjtBQUNyQixNQUFNLHVmQUE0TjtBQUNsTztBQUNBLGtCQUFrQixtQkFBTyxDQUFDLHVmQUE0Tjs7QUFFdFA7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFVBQVU7O0FBRTFCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRSxVQUFVO0FBQ1o7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B1aXcvcmVhY3QtbWFya2Rvd24tcHJldmlldy9tYXJrZG93bi5jc3M/YjdmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtc3R5bGUtbG9hZGVyL3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzddLnVzZVsxXSEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls3XS51c2VbMl0hLi9tYXJrZG93bi5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHN0eWxlLWxvYWRlciBpbmplY3RzIENTUyBpbnRvIHRoZSBib3R0b21cbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgPGhlYWQ+LiBUaGlzIGNhdXNlcyBvcmRlcmluZyBwcm9ibGVtcyBiZXR3ZWVuIGRldlxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcHJvZC4gVG8gZml4IHRoaXMsIHdlIHJlbmRlciBhIDxub3NjcmlwdD4gdGFnIGFzXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGFuY2hvciBmb3IgdGhlIHN0eWxlcyB0byBiZSBwbGFjZWQgYmVmb3JlLiBUaGVzZVxuICAgICAgICAgICAgICAgICAgICAvLyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIF9iZWZvcmVfIDxzdHlsZSBqc3ggZ2xvYmFsPi5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZWxlbWVudHMgc2hvdWxkIGFsd2F5cyBleGlzdC4gSWYgdGhleSBkbyBub3QsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgY29kZSBzaG91bGQgZmFpbC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI19fbmV4dF9jc3NfX0RPX05PVF9VU0VfX1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBhbmNob3JFbGVtZW50LnBhcmVudE5vZGUvLyBOb3JtYWxseSA8aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAvLyBFYWNoIHN0eWxlIHRhZyBzaG91bGQgYmUgcGxhY2VkIHJpZ2h0IGJlZm9yZSBvdXJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5jaG9yLiBCeSBpbnNlcnRpbmcgYmVmb3JlIGFuZCBub3QgYWZ0ZXIsIHdlIGRvIG5vdFxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHRyYWNrIHRoZSBsYXN0IGluc2VydGVkIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGFuY2hvckVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH07XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cbmlmIChtb2R1bGUuaG90KSB7XG4gIGlmICghY29udGVudC5sb2NhbHMgfHwgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKSB7XG4gICAgdmFyIGlzRXF1YWxMb2NhbHMgPSBmdW5jdGlvbiBpc0VxdWFsTG9jYWxzKGEsIGIsIGlzTmFtZWRFeHBvcnQpIHtcbiAgICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHA7XG4gICAgZm9yKHAgaW4gYSl7XG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYVtwXSAhPT0gYltwXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcihwIGluIGIpe1xuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuICAgIHZhciBvbGRMb2NhbHMgPSBjb250ZW50LmxvY2FscztcblxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvY3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbN10udXNlWzFdIS4uLy4uL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzddLnVzZVsyXSEuL21hcmtkb3duLmNzc1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls3XS51c2VbMV0hLi4vLi4vbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10ub25lT2ZbN10udXNlWzJdIS4vbWFya2Rvd24uY3NzXCIpO1xuXG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMb2NhbHMob2xkTG9jYWxzLCBjb250ZW50LmxvY2FscykpIHtcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgICAgICAgICAgIHVwZGF0ZShjb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@uiw/react-markdown-preview/markdown.css\n"));

/***/ }),

/***/ "./node_modules/@uiw/react-md-editor/markdown-editor.css":
/*!***************************************************************!*\
  !*** ./node_modules/@uiw/react-md-editor/markdown-editor.css ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./markdown-editor.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./markdown-editor.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!../../next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./markdown-editor.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[3].oneOf[7].use[2]!./node_modules/@uiw/react-md-editor/markdown-editor.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHVpdy9yZWFjdC1tZC1lZGl0b3IvbWFya2Rvd24tZWRpdG9yLmNzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxVQUFVLG1CQUFPLENBQUMsME1BQThGO0FBQ2hILDBCQUEwQixtQkFBTyxDQUFDLDhmQUFtTzs7QUFFclE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLElBQUksSUFBVTtBQUNkLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGlCQUFpQjtBQUNyQixNQUFNLDhmQUFtTztBQUN6TztBQUNBLGtCQUFrQixtQkFBTyxDQUFDLDhmQUFtTzs7QUFFN1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFVBQVU7O0FBRTFCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRSxVQUFVO0FBQ1o7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B1aXcvcmVhY3QtbWQtZWRpdG9yL21hcmtkb3duLWVkaXRvci5jc3M/MDhiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtc3R5bGUtbG9hZGVyL3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzddLnVzZVsxXSEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls3XS51c2VbMl0hLi9tYXJrZG93bi1lZGl0b3IuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBCeSBkZWZhdWx0LCBzdHlsZS1sb2FkZXIgaW5qZWN0cyBDU1MgaW50byB0aGUgYm90dG9tXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIDxoZWFkPi4gVGhpcyBjYXVzZXMgb3JkZXJpbmcgcHJvYmxlbXMgYmV0d2VlbiBkZXZcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHByb2QuIFRvIGZpeCB0aGlzLCB3ZSByZW5kZXIgYSA8bm9zY3JpcHQ+IHRhZyBhc1xuICAgICAgICAgICAgICAgICAgICAvLyBhbiBhbmNob3IgZm9yIHRoZSBzdHlsZXMgdG8gYmUgcGxhY2VkIGJlZm9yZS4gVGhlc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gc3R5bGVzIHdpbGwgYmUgYXBwbGllZCBfYmVmb3JlXyA8c3R5bGUganN4IGdsb2JhbD4uXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGVsZW1lbnRzIHNob3VsZCBhbHdheXMgZXhpc3QuIElmIHRoZXkgZG8gbm90LFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGNvZGUgc2hvdWxkIGZhaWwuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3JFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNfX25leHRfY3NzX19ET19OT1RfVVNFX19cIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gYW5jaG9yRWxlbWVudC5wYXJlbnROb2RlLy8gTm9ybWFsbHkgPGhlYWQ+XG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRWFjaCBzdHlsZSB0YWcgc2hvdWxkIGJlIHBsYWNlZCByaWdodCBiZWZvcmUgb3VyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuY2hvci4gQnkgaW5zZXJ0aW5nIGJlZm9yZSBhbmQgbm90IGFmdGVyLCB3ZSBkbyBub3RcbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCB0byB0cmFjayB0aGUgbGFzdCBpbnNlcnRlZCBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtZW50LCBhbmNob3JFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9O1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzIHx8IG1vZHVsZS5ob3QuaW52YWxpZGF0ZSkge1xuICAgIHZhciBpc0VxdWFsTG9jYWxzID0gZnVuY3Rpb24gaXNFcXVhbExvY2FscyhhLCBiLCBpc05hbWVkRXhwb3J0KSB7XG4gICAgaWYgKCFhICYmIGIgfHwgYSAmJiAhYikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBwO1xuICAgIGZvcihwIGluIGEpe1xuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFbcF0gIT09IGJbcF0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IocCBpbiBiKXtcbiAgICAgICAgaWYgKGlzTmFtZWRFeHBvcnQgJiYgcCA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYVtwXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbiAgICB2YXIgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcbiAgICAgIFwiISEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzddLnVzZVsxXSEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls3XS51c2VbMl0hLi9tYXJrZG93bi1lZGl0b3IuY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLm9uZU9mWzddLnVzZVsxXSEuLi8uLi9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS5vbmVPZls3XS51c2VbMl0hLi9tYXJrZG93bi1lZGl0b3IuY3NzXCIpO1xuXG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIWlzRXF1YWxMb2NhbHMob2xkTG9jYWxzLCBjb250ZW50LmxvY2FscykpIHtcbiAgICAgICAgICAgICAgICBtb2R1bGUuaG90LmludmFsaWRhdGUoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgICAgICAgICAgIHVwZGF0ZShjb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@uiw/react-md-editor/markdown-editor.css\n"));

/***/ }),

/***/ "./components/button.tsx":
/*!*******************************!*\
  !*** ./components/button.tsx ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Button; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/src/_object_spread_props.mjs */ \"./node_modules/@swc/helpers/src/_object_spread_props.mjs\");\n/* harmony import */ var _swc_helpers_src_object_without_properties_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/src/_object_without_properties.mjs */ \"./node_modules/@swc/helpers/src/_object_without_properties.mjs\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _libs_client_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libs/client/utils */ \"./libs/client/utils.ts\");\n\n\n\n\n\nfunction Button(_param) {\n    var _large = _param.large, large = _large === void 0 ? false : _large, onClick = _param.onClick, text = _param.text, rest = (0,_swc_helpers_src_object_without_properties_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_param, [\n        \"large\",\n        \"onClick\",\n        \"text\"\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({}, rest), {\n        className: (0,_libs_client_utils__WEBPACK_IMPORTED_MODULE_1__.cls)(\"w-full bg-white  hover:border-gray-300 text-black  px-4 border-[0.5px] border-[#BBBBBB] border-transparent rounded-md shadow-sm font-medium focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:outline-none\", large ? \"py-3 text-base\" : \"py-2 text-sm \"),\n        children: text\n    }), void 0, false, {\n        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\button.tsx\",\n        lineNumber: 16,\n        columnNumber: 5\n    }, this);\n}\n_c = Button;\nvar _c;\n$RefreshReg$(_c, \"Button\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2J1dHRvbi50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7O0FBQXlDO0FBUTFCLFNBQVNDLE1BQU0sQ0FBQyxNQUtqQixFQUFFO2lCQUxlLE1BS2pCLENBSlpDLEtBQUssRUFBTEEsS0FBSyx1QkFBRyxLQUFLLFdBQ2JDLE9BQU8sR0FGc0IsTUFLakIsQ0FIWkEsT0FBTyxFQUNQQyxJQUFJLEdBSHlCLE1BS2pCLENBRlpBLElBQUksRUFDREMsSUFBSSw4RkFKc0IsTUFLakI7UUFKWkgsT0FBSztRQUNMQyxTQUFPO1FBQ1BDLE1BQUk7O0lBR0oscUJBQ0UsOERBQUNFLFFBQU0sMEtBQ0RELElBQUk7UUFDUkUsU0FBUyxFQUFFUCx1REFBRyxDQUNaLHFOQUFxTixFQUNyTkUsS0FBSyxHQUFHLGdCQUFnQixHQUFHLGVBQWUsQ0FDM0M7a0JBRUFFLElBQUk7Ozs7O1lBQ0UsQ0FDVDtBQUNKLENBQUM7QUFqQnVCSCxLQUFBQSxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbXBvbmVudHMvYnV0dG9uLnRzeD9jNGI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNscyB9IGZyb20gXCJAbGlicy9jbGllbnQvdXRpbHNcIjtcclxuXHJcbmludGVyZmFjZSBCdXR0b25Qcm9wcyB7XHJcbiAgbGFyZ2U/OiBib29sZWFuO1xyXG4gIHRleHQ6IHN0cmluZztcclxuICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJ1dHRvbih7XHJcbiAgbGFyZ2UgPSBmYWxzZSxcclxuICBvbkNsaWNrLFxyXG4gIHRleHQsXHJcbiAgLi4ucmVzdFxyXG59OiBCdXR0b25Qcm9wcykge1xyXG4gIHJldHVybiAoXHJcbiAgICA8YnV0dG9uXHJcbiAgICAgIHsuLi5yZXN0fVxyXG4gICAgICBjbGFzc05hbWU9e2NscyhcclxuICAgICAgICBcInctZnVsbCBiZy13aGl0ZSAgaG92ZXI6Ym9yZGVyLWdyYXktMzAwIHRleHQtYmxhY2sgIHB4LTQgYm9yZGVyLVswLjVweF0gYm9yZGVyLVsjQkJCQkJCXSBib3JkZXItdHJhbnNwYXJlbnQgcm91bmRlZC1tZCBzaGFkb3ctc20gZm9udC1tZWRpdW0gZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctb2Zmc2V0LTIgZm9jdXM6cmluZy1ibHVlLTUwMCBmb2N1czpvdXRsaW5lLW5vbmVcIixcclxuICAgICAgICBsYXJnZSA/IFwicHktMyB0ZXh0LWJhc2VcIiA6IFwicHktMiB0ZXh0LXNtIFwiXHJcbiAgICAgICl9XHJcbiAgICA+XHJcbiAgICAgIHt0ZXh0fVxyXG4gICAgPC9idXR0b24+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiY2xzIiwiQnV0dG9uIiwibGFyZ2UiLCJvbkNsaWNrIiwidGV4dCIsInJlc3QiLCJidXR0b24iLCJjbGFzc05hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/button.tsx\n"));

/***/ }),

/***/ "./components/fictionRadarChart.tsx":
/*!******************************************!*\
  !*** ./components/fictionRadarChart.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ FictionRadarChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chart.js */ \"./node_modules/chart.js/dist/chart.mjs\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/react */ \"./node_modules/next-auth/react/index.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-chartjs-2 */ \"./node_modules/react-chartjs-2/dist/index.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! swr */ \"./node_modules/swr/dist/index.mjs\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\nchart_js__WEBPACK_IMPORTED_MODULE_1__.Chart.register(chart_js__WEBPACK_IMPORTED_MODULE_1__.RadialLinearScale, chart_js__WEBPACK_IMPORTED_MODULE_1__.PointElement, chart_js__WEBPACK_IMPORTED_MODULE_1__.LineElement, chart_js__WEBPACK_IMPORTED_MODULE_1__.Filler, chart_js__WEBPACK_IMPORTED_MODULE_1__.Tooltip, chart_js__WEBPACK_IMPORTED_MODULE_1__.Legend);\nfunction FictionRadarChart(props) {\n    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref20;\n    _s();\n    var ref21 = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_2__.useSession)(), session = ref21.data;\n    var router = (0,next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    var ref22 = (0,swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(router.query.id ? \"/api/fictions/\".concat(router.query.id) : null), UserStatData = ref22.data, boundMutate = ref22.mutate;\n    var data = {\n        labels: [\n            \"오리지널리티\",\n            \"필력\",\n            \"캐릭터성\",\n            \"핍진성\",\n            \"스토리\",\n            \"작품성\"\n        ],\n        datasets: [\n            {\n                label: \"FDBS (admin)\",\n                data: [\n                    props.props ? props === null || props === void 0 ? void 0 : props.props[\"originality\"] : 0,\n                    props.props ? props === null || props === void 0 ? void 0 : props.props[\"writing\"] : 0,\n                    props.props ? props === null || props === void 0 ? void 0 : props.props[\"character\"] : 0,\n                    props.props ? props === null || props === void 0 ? void 0 : props.props[\"verisimilitude\"] : 0,\n                    props.props ? props === null || props === void 0 ? void 0 : props.props[\"synopsisComposition\"] : 0,\n                    props.props ? props === null || props === void 0 ? void 0 : props.props[\"value\"] : 0, \n                ],\n                backgroundColor: \"rgba(191, 219, 254, 0.5)\",\n                borderColor: \"rgba(187, 187, 187, 1)\",\n                borderWidth: 1\n            },\n            {\n                label: \"유저 \".concat((UserStatData === null || UserStatData === void 0 ? void 0 : (ref = UserStatData.prevFiction) === null || ref === void 0 ? void 0 : (ref1 = ref.userFictionStat) === null || ref1 === void 0 ? void 0 : (ref2 = ref1._count) === null || ref2 === void 0 ? void 0 : ref2.users) || 0, \"명\"),\n                data: [\n                    (UserStatData === null || UserStatData === void 0 ? void 0 : (ref3 = UserStatData.prevFiction) === null || ref3 === void 0 ? void 0 : ref3.userFictionStat) ? UserStatData === null || UserStatData === void 0 ? void 0 : (ref4 = UserStatData.prevFiction) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.userFictionStat) === null || ref5 === void 0 ? void 0 : ref5.originality : 0,\n                    (UserStatData === null || UserStatData === void 0 ? void 0 : (ref6 = UserStatData.prevFiction) === null || ref6 === void 0 ? void 0 : ref6.userFictionStat) ? UserStatData === null || UserStatData === void 0 ? void 0 : (ref7 = UserStatData.prevFiction) === null || ref7 === void 0 ? void 0 : (ref8 = ref7.userFictionStat) === null || ref8 === void 0 ? void 0 : ref8.writing : 0,\n                    (UserStatData === null || UserStatData === void 0 ? void 0 : (ref9 = UserStatData.prevFiction) === null || ref9 === void 0 ? void 0 : ref9.userFictionStat) ? UserStatData === null || UserStatData === void 0 ? void 0 : (ref10 = UserStatData.prevFiction) === null || ref10 === void 0 ? void 0 : (ref11 = ref10.userFictionStat) === null || ref11 === void 0 ? void 0 : ref11.character : 0,\n                    (UserStatData === null || UserStatData === void 0 ? void 0 : (ref12 = UserStatData.prevFiction) === null || ref12 === void 0 ? void 0 : ref12.userFictionStat) ? UserStatData === null || UserStatData === void 0 ? void 0 : (ref13 = UserStatData.prevFiction) === null || ref13 === void 0 ? void 0 : (ref14 = ref13.userFictionStat) === null || ref14 === void 0 ? void 0 : ref14.verisimilitude : 0,\n                    (UserStatData === null || UserStatData === void 0 ? void 0 : (ref15 = UserStatData.prevFiction) === null || ref15 === void 0 ? void 0 : ref15.userFictionStat) ? UserStatData === null || UserStatData === void 0 ? void 0 : (ref16 = UserStatData.prevFiction) === null || ref16 === void 0 ? void 0 : (ref17 = ref16.userFictionStat) === null || ref17 === void 0 ? void 0 : ref17.synopsisComposition : 0,\n                    (UserStatData === null || UserStatData === void 0 ? void 0 : (ref18 = UserStatData.prevFiction) === null || ref18 === void 0 ? void 0 : ref18.userFictionStat) ? UserStatData === null || UserStatData === void 0 ? void 0 : (ref19 = UserStatData.prevFiction) === null || ref19 === void 0 ? void 0 : (ref20 = ref19.userFictionStat) === null || ref20 === void 0 ? void 0 : ref20.value : 0, \n                ],\n                backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n                borderColor: \"rgba(187, 187, 187, 1)\",\n                borderWidth: 1\n            }, \n        ]\n    };\n    var options = {\n        responsive: true,\n        maintainAspectRatio: true,\n        scales: {\n            r: {\n                // suggestedMin: 0,\n                // suggestedMax: 5,\n                min: 0,\n                max: 5,\n                ticks: {\n                    stepSize: 1\n                },\n                pointLabels: {\n                    font: {\n                        size: 16,\n                        family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n                        color: \"#BBBBBB\"\n                    }\n                }\n            }\n        },\n        plugins: {\n            legend: {\n                labels: {\n                    // This more specific font property overrides the global property\n                    font: {\n                        size: 13\n                    }\n                }\n            }\n        }\n    };\n    // console.log(UserStatData);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \" mx-2\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_chartjs_2__WEBPACK_IMPORTED_MODULE_5__.Radar, {\n            data: data,\n            options: options\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\fictionRadarChart.tsx\",\n            lineNumber: 123,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\fictionRadarChart.tsx\",\n        lineNumber: 122,\n        columnNumber: 5\n    }, this);\n}\n_s(FictionRadarChart, \"JKNpZaBBY+ZIyYeY+C/jJa1w/zY=\", false, function() {\n    return [\n        next_auth_react__WEBPACK_IMPORTED_MODULE_2__.useSession,\n        next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter,\n        swr__WEBPACK_IMPORTED_MODULE_4__[\"default\"]\n    ];\n});\n_c = FictionRadarChart;\nvar _c;\n$RefreshReg$(_c, \"FictionRadarChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/fictionRadarChart.tsx\n"));

/***/ }),

/***/ "./components/input.tsx":
/*!******************************!*\
  !*** ./components/input.tsx ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Input; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/src/_object_spread_props.mjs */ \"./node_modules/@swc/helpers/src/_object_spread_props.mjs\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction Input(param) {\n    var label = param.label, name = param.name, _kind = param.kind, kind = _kind === void 0 ? \"text\" : _kind, register = param.register, type = param.type, required = param.required;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \" mb-2\",\n        children: [\n            kind === \"text\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                        className: \"mb-1 block text-sm font-medium text-gray-700\",\n                        htmlFor: name,\n                        children: label\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 32,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"rounded-md re lative flex items-center shadow-sm\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                            id: name,\n                            required: required\n                        }, register), {\n                            type: type,\n                            className: \"appearance-none w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-400 focus:border-blue-400\"\n                        }), void 0, false, {\n                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                            lineNumber: 42,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 38,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true) : null,\n            kind === \"search\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \" my-12 mb-8 rounded-3xl re lative flex items-center\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                            placeholder: \"검색어를 입력하세요\",\n                            id: name,\n                            required: required\n                        }, register), {\n                            type: type,\n                            className: \"rounded-3xl appearance-none w-full px-3 py-2 border border-gray-300 placeholder-gray-400 focus:outline-none focus:ring-blue-400 focus:border-blue-400\"\n                        }), void 0, false, {\n                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                            lineNumber: 58,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                            className: \" relative right-9 \",\n                            xmlns: \"http://www.w3.org/2000/svg\",\n                            width: \"20\",\n                            height: \"20\",\n                            fill: \"currentColor\",\n                            viewBox: \"0 0 16 16\",\n                            children: [\n                                \" \",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                    d: \"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\",\n                                    fill: \"black\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                                    lineNumber: 75,\n                                    columnNumber: 15\n                                }, this),\n                                \" \"\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                            lineNumber: 66,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                    lineNumber: 54,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false) : null,\n            kind === \"comment\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                        className: \"mb-1 block text-sm font-medium text-gray-700\",\n                        htmlFor: name\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 85,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"rounded-md re lative flex items-center shadow-sm\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                            id: name,\n                            required: required\n                        }, register), {\n                            type: type,\n                            placeholder: \"한줄평을 입력해주세요. 과도한 비방, 욕설, 도배는 차단됩니다.\",\n                            className: \"appearance-none w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-400 focus:border-blue-400\"\n                        }), void 0, false, {\n                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                            lineNumber: 93,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 89,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true) : null,\n            kind === \"text_detail\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"rounded-md relative flex items-center shadow-sm\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                    id: name,\n                    required: required\n                }, register), {\n                    type: type,\n                    className: \"appearance-none w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-400 focus:border-blue-400\"\n                }), void 0, false, {\n                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                    lineNumber: 106,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                lineNumber: 105,\n                columnNumber: 9\n            }, this) : null,\n            kind === \"date\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                        className: \"mb-1 block text-sm font-medium text-gray-700\",\n                        htmlFor: name,\n                        children: label\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 117,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"rounded-md re lative flex items-center shadow-sm\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                            id: name,\n                            required: required\n                        }, register), {\n                            type: type,\n                            className: \"appearance-none w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-400 focus:border-blue-400\"\n                        }), void 0, false, {\n                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                            lineNumber: 127,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 123,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true) : null,\n            kind === \"status\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"rounded-md relative flex items-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \" w-2/4 pb-1 text-xs text-center\",\n                        children: label\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 139,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                        id: name,\n                        placeholder: label\n                    }, register), {\n                        type: type,\n                        min: \"0\",\n                        max: \"5\",\n                        className: \"appearance-none w-2/4 px-3 py-1 border text-xs border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-400 focus:border-blue-400\"\n                    }), void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 140,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                lineNumber: 138,\n                columnNumber: 9\n            }, this) : null,\n            kind === \"price\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"rounded-md relative flex items-center shadow-sm\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"absolute left-0 pointer-events-none pl-3 flex items-center justify-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-gray-500 text-sm\",\n                            children: \"$\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                            lineNumber: 154,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 153,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                        id: name,\n                        required: required\n                    }, register), {\n                        type: type,\n                        className: \"appearance-none pl-7 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-400 focus:border-blue-400\"\n                    }), void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 156,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"absolute right-0 pointer-events-none pr-3 flex items-center\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"text-gray-500\",\n                            children: \"KRW\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                            lineNumber: 164,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 163,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                lineNumber: 152,\n                columnNumber: 9\n            }, this) : null,\n            kind === \"phone\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                        className: \"mb-1 block text-sm font-medium text-gray-700\",\n                        htmlFor: name,\n                        children: label\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 170,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex rounded-md shadow-sm\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"flex items-center justify-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 select-none text-sm\",\n                                children: \"+82\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                                lineNumber: 177,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                                id: name,\n                                required: required\n                            }, register), {\n                                type: type,\n                                className: \"appearance-none w-full px-3 py-2 border border-gray-300 rounded-md rounded-l-none shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500\"\n                            }), void 0, false, {\n                                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                                lineNumber: 180,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n                        lineNumber: 176,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true) : null\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\input.tsx\",\n        lineNumber: 29,\n        columnNumber: 5\n    }, this);\n}\n_c = Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/input.tsx\n"));

/***/ }),

/***/ "./components/textarea.tsx":
/*!*********************************!*\
  !*** ./components/textarea.tsx ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ TextArea; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/src/_object_spread_props.mjs */ \"./node_modules/@swc/helpers/src/_object_spread_props.mjs\");\n/* harmony import */ var _swc_helpers_src_object_without_properties_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/src/_object_without_properties.mjs */ \"./node_modules/@swc/helpers/src/_object_without_properties.mjs\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n\nfunction TextArea(_param) {\n    var label = _param.label, name = _param.name, register = _param.register, rest = (0,_swc_helpers_src_object_without_properties_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_param, [\n        \"label\",\n        \"name\",\n        \"register\"\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            label ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                htmlFor: name,\n                className: \"mb-1 block text-sm font-medium text-gray-700\",\n                children: label\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\textarea.tsx\",\n                lineNumber: 19,\n                columnNumber: 9\n            }, this) : null,\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n                id: name\n            }, register), {\n                className: \" h-48 mt-1 shadow-sm w-full focus:ring-blue-400 rounded-md border-gray-300 focus:border-blue-400 \",\n                rows: 4\n            }), rest), void 0, false, {\n                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\textarea.tsx\",\n                lineNumber: 26,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\components\\\\textarea.tsx\",\n        lineNumber: 17,\n        columnNumber: 5\n    }, this);\n}\n_c = TextArea;\nvar _c;\n$RefreshReg$(_c, \"TextArea\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3RleHRhcmVhLnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztBQVNlLFNBQVNBLFFBQVEsQ0FBQyxNQUtqQixFQUFFO1FBSmhCQyxLQUFLLEdBRDBCLE1BS2pCLENBSmRBLEtBQUssRUFDTEMsSUFBSSxHQUYyQixNQUtqQixDQUhkQSxJQUFJLEVBQ0pDLFFBQVEsR0FIdUIsTUFLakIsQ0FGZEEsUUFBUSxFQUNMQyxJQUFJLDhGQUp3QixNQUtqQjtRQUpkSCxPQUFLO1FBQ0xDLE1BQUk7UUFDSkMsVUFBUTs7SUFHUixxQkFDRSw4REFBQ0UsS0FBRzs7WUFDREosS0FBSyxpQkFDSiw4REFBQ0EsT0FBSztnQkFDSkssT0FBTyxFQUFFSixJQUFJO2dCQUNiSyxTQUFTLEVBQUMsOENBQThDOzBCQUV2RE4sS0FBSzs7Ozs7b0JBQ0EsR0FDTixJQUFJOzBCQUNSLDhEQUFDTyxVQUFRO2dCQUNQQyxFQUFFLEVBQUVQLElBQUk7ZUFDSkMsUUFBUTtnQkFDWkksU0FBUyxFQUFDLG1HQUFtRztnQkFDN0dHLElBQUksRUFBRSxDQUFDO2dCQUNITixJQUFJOzs7O29CQUNSOzs7Ozs7WUFDRSxDQUNOO0FBQ0osQ0FBQztBQXpCdUJKLEtBQUFBLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy90ZXh0YXJlYS50c3g/MGExNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VGb3JtUmVnaXN0ZXJSZXR1cm4gfSBmcm9tIFwicmVhY3QtaG9vay1mb3JtXCI7XHJcblxyXG5pbnRlcmZhY2UgVGV4dEFyZWFQcm9wcyB7XHJcbiAgbGFiZWw/OiBzdHJpbmc7XHJcbiAgbmFtZT86IHN0cmluZztcclxuICByZWdpc3RlcjogVXNlRm9ybVJlZ2lzdGVyUmV0dXJuO1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGV4dEFyZWEoe1xyXG4gIGxhYmVsLFxyXG4gIG5hbWUsXHJcbiAgcmVnaXN0ZXIsXHJcbiAgLi4ucmVzdFxyXG59OiBUZXh0QXJlYVByb3BzKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+XHJcbiAgICAgIHtsYWJlbCA/IChcclxuICAgICAgICA8bGFiZWxcclxuICAgICAgICAgIGh0bWxGb3I9e25hbWV9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJtYi0xIGJsb2NrIHRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTcwMFwiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAge2xhYmVsfVxyXG4gICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICkgOiBudWxsfVxyXG4gICAgICA8dGV4dGFyZWFcclxuICAgICAgICBpZD17bmFtZX1cclxuICAgICAgICB7Li4ucmVnaXN0ZXJ9XHJcbiAgICAgICAgY2xhc3NOYW1lPVwiIGgtNDggbXQtMSBzaGFkb3ctc20gdy1mdWxsIGZvY3VzOnJpbmctYmx1ZS00MDAgcm91bmRlZC1tZCBib3JkZXItZ3JheS0zMDAgZm9jdXM6Ym9yZGVyLWJsdWUtNDAwIFwiXHJcbiAgICAgICAgcm93cz17NH1cclxuICAgICAgICB7Li4ucmVzdH1cclxuICAgICAgLz5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIlRleHRBcmVhIiwibGFiZWwiLCJuYW1lIiwicmVnaXN0ZXIiLCJyZXN0IiwiZGl2IiwiaHRtbEZvciIsImNsYXNzTmFtZSIsInRleHRhcmVhIiwiaWQiLCJyb3dzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/textarea.tsx\n"));

/***/ }),

/***/ "./libs/client/useMutation.tsx":
/*!*************************************!*\
  !*** ./libs/client/useMutation.tsx ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ useMutation; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/src/_object_spread_props.mjs */ \"./node_modules/@swc/helpers/src/_object_spread_props.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar _s = $RefreshSig$();\n\nfunction useMutation(url) {\n    var mutation = function mutation(data, method) {\n        setSate(function(prev) {\n            return (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, prev), {\n                loading: true\n            });\n        });\n        fetch(url, {\n            method: (method === null || method === void 0 ? void 0 : method.toString()) || \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }).then(function(response) {\n            return response.json().catch(function() {});\n        }).then(function(data) {\n            return setSate(function(prev) {\n                return (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, prev), {\n                    data: data\n                });\n            });\n        }).catch(function(error) {\n            return setSate(function(prev) {\n                return (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, prev), {\n                    error: error\n                });\n            });\n        }).finally(function() {\n            return setSate(function(prev) {\n                return (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, prev), {\n                    loading: false\n                });\n            });\n        });\n    };\n    _s();\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        loading: false,\n        data: undefined,\n        error: undefined\n    }), state = ref[0], setSate = ref[1];\n    return [\n        mutation,\n        (0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, state)\n    ];\n}\n_s(useMutation, \"CHjeIxzNK/Ulr3stn9OKPZY41Sg=\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL2NsaWVudC91c2VNdXRhdGlvbi50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7O0FBQ2lDO0FBWWxCLFNBQVNDLFdBQVcsQ0FDakNDLEdBQVcsRUFDVztRQU1iQyxRQUFRLEdBQWpCLFNBQVNBLFFBQVEsQ0FBQ0MsSUFBUyxFQUFFQyxNQUFjLEVBQUU7UUFDM0NDLE9BQU8sQ0FBQyxTQUFDQyxJQUFJO21CQUFNLHdLQUFLQSxJQUFJO2dCQUFFQyxPQUFPLEVBQUUsSUFBSTtjQUFFO1NBQUMsQ0FBQyxDQUFDO1FBQ2hEQyxLQUFLLENBQUNQLEdBQUcsRUFBRTtZQUNURyxNQUFNLEVBQUVBLENBQUFBLE1BQU0sYUFBTkEsTUFBTSxXQUFVLEdBQWhCQSxLQUFBQSxDQUFnQixHQUFoQkEsTUFBTSxDQUFFSyxRQUFRLEVBQUUsS0FBSSxNQUFNO1lBQ3BDQyxPQUFPLEVBQUU7Z0JBQ1AsY0FBYyxFQUFFLGtCQUFrQjthQUNuQztZQUNEQyxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsU0FBUyxDQUFDVixJQUFJLENBQUM7U0FDM0IsQ0FBQyxDQUNDVyxJQUFJLENBQUMsU0FBQ0MsUUFBUTttQkFBS0EsUUFBUSxDQUFDQyxJQUFJLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDLFdBQU0sQ0FBQyxDQUFDLENBQUM7U0FBQSxDQUFDLENBQ25ESCxJQUFJLENBQUMsU0FBQ1gsSUFBSTttQkFBS0UsT0FBTyxDQUFDLFNBQUNDLElBQUk7dUJBQU0sd0tBQUtBLElBQUk7b0JBQUVILElBQUksRUFBSkEsSUFBSTtrQkFBRTthQUFDLENBQUM7U0FBQSxDQUFDLENBQ3REYyxLQUFLLENBQUMsU0FBQ0MsS0FBSzttQkFBS2IsT0FBTyxDQUFDLFNBQUNDLElBQUk7dUJBQU0sd0tBQUtBLElBQUk7b0JBQUVZLEtBQUssRUFBTEEsS0FBSztrQkFBRTthQUFDLENBQUM7U0FBQSxDQUFDLENBQ3pEQyxPQUFPLENBQUM7bUJBQU1kLE9BQU8sQ0FBQyxTQUFDQyxJQUFJO3VCQUFNLHdLQUFLQSxJQUFJO29CQUFFQyxPQUFPLEVBQUUsS0FBSztrQkFBRTthQUFDLENBQUM7U0FBQSxDQUFDLENBQUM7SUFDckUsQ0FBQzs7SUFsQkQsSUFBeUJSLEdBSXZCLEdBSnVCQSwrQ0FBUSxDQUFzQjtRQUNyRFEsT0FBTyxFQUFFLEtBQUs7UUFDZEosSUFBSSxFQUFFaUIsU0FBUztRQUNmRixLQUFLLEVBQUVFLFNBQVM7S0FDakIsQ0FBQyxFQUpLQyxLQUFLLEdBQWF0QixHQUl2QixHQUpVLEVBQUVNLE9BQU8sR0FBSU4sR0FJdkIsR0FKbUI7SUFtQnJCLE9BQU87UUFBQ0csUUFBUTtRQUFFLG1GQUFLbUIsS0FBSyxDQUFFO0tBQUMsQ0FBQztBQUNsQyxDQUFDO0dBdkJ1QnJCLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGlicy9jbGllbnQvdXNlTXV0YXRpb24udHN4PzM4YzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVxdWVzdCB9IGZyb20gXCJodHRwc1wiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW50ZXJmYWNlIFVzZU11dGF0aW9uU3RhdGU8VD4ge1xyXG4gIGxvYWRpbmc6IGJvb2xlYW47XHJcbiAgZGF0YT86IFQ7XHJcbiAgZXJyb3I/OiBvYmplY3Q7XHJcbn1cclxudHlwZSBVc2VNdXRhdGlvblJlc3VsdDxUPiA9IFtcclxuICAoZGF0YTogYW55LCBtZXRob2Q6IHN0cmluZykgPT4gdm9pZCxcclxuICBVc2VNdXRhdGlvblN0YXRlPFQ+XHJcbl07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNdXRhdGlvbjxUID0gYW55PihcclxuICB1cmw6IHN0cmluZ1xyXG4pOiBVc2VNdXRhdGlvblJlc3VsdDxUPiB7XHJcbiAgY29uc3QgW3N0YXRlLCBzZXRTYXRlXSA9IHVzZVN0YXRlPFVzZU11dGF0aW9uU3RhdGU8VD4+KHtcclxuICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgZGF0YTogdW5kZWZpbmVkLFxyXG4gICAgZXJyb3I6IHVuZGVmaW5lZCxcclxuICB9KTtcclxuICBmdW5jdGlvbiBtdXRhdGlvbihkYXRhOiBhbnksIG1ldGhvZDogc3RyaW5nKSB7XHJcbiAgICBzZXRTYXRlKChwcmV2KSA9PiAoeyAuLi5wcmV2LCBsb2FkaW5nOiB0cnVlIH0pKTtcclxuICAgIGZldGNoKHVybCwge1xyXG4gICAgICBtZXRob2Q6IG1ldGhvZD8udG9TdHJpbmcoKSB8fCBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpLmNhdGNoKCgpID0+IHt9KSlcclxuICAgICAgLnRoZW4oKGRhdGEpID0+IHNldFNhdGUoKHByZXYpID0+ICh7IC4uLnByZXYsIGRhdGEgfSkpKVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiBzZXRTYXRlKChwcmV2KSA9PiAoeyAuLi5wcmV2LCBlcnJvciB9KSkpXHJcbiAgICAgIC5maW5hbGx5KCgpID0+IHNldFNhdGUoKHByZXYpID0+ICh7IC4uLnByZXYsIGxvYWRpbmc6IGZhbHNlIH0pKSk7XHJcbiAgfVxyXG4gIHJldHVybiBbbXV0YXRpb24sIHsgLi4uc3RhdGUgfV07XHJcbn1cclxuIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlTXV0YXRpb24iLCJ1cmwiLCJtdXRhdGlvbiIsImRhdGEiLCJtZXRob2QiLCJzZXRTYXRlIiwicHJldiIsImxvYWRpbmciLCJmZXRjaCIsInRvU3RyaW5nIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsImNhdGNoIiwiZXJyb3IiLCJmaW5hbGx5IiwidW5kZWZpbmVkIiwic3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./libs/client/useMutation.tsx\n"));

/***/ }),

/***/ "./libs/client/utils.ts":
/*!******************************!*\
  !*** ./libs/client/utils.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cls\": function() { return /* binding */ cls; }\n/* harmony export */ });\nfunction cls() {\n    for(var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++){\n        classnames[_key] = arguments[_key];\n    }\n    return classnames.join(\" \");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL2NsaWVudC91dGlscy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsR0FBRyxHQUEwQjtJQUF6QixZQUF1QixHQUF2QixTQUF1QixDQUF2QixNQUF1QixFQUF2QixVQUFhLEdBQWIsY0FBdUIsR0FBdkIsSUFBdUIsR0FBdkIsQ0FBdUIsRUFBdkIsSUFBdUIsR0FBdkIsSUFBdUIsRUFBdkIsSUFBdUIsR0FBdkI7UUFBQSxVQUFhLENBQWIsSUFBdUIsSUFBdkIsU0FBdUIsQ0FBdkIsSUFBdUI7SUFBRCxDQUFDO0lBQ3pDLE9BQU9DLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGlicy9jbGllbnQvdXRpbHMudHM/MWFjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY2xzKC4uLmNsYXNzbmFtZXM6IHN0cmluZ1tdKSB7XHJcbiAgcmV0dXJuIGNsYXNzbmFtZXMuam9pbihcIiBcIik7XHJcbn1cclxuIl0sIm5hbWVzIjpbImNscyIsImNsYXNzbmFtZXMiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./libs/client/utils.ts\n"));

/***/ }),

/***/ "./pages/fictions/create.tsx":
/*!***********************************!*\
  !*** ./pages/fictions/create.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @swc/helpers/src/_async_to_generator.mjs */ \"./node_modules/@swc/helpers/src/_async_to_generator.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @swc/helpers/src/_object_spread.mjs */ \"./node_modules/@swc/helpers/src/_object_spread.mjs\");\n/* harmony import */ var _swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @swc/helpers/src/_object_spread_props.mjs */ \"./node_modules/@swc/helpers/src/_object_spread_props.mjs\");\n/* harmony import */ var _swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @swc/helpers/src/_sliced_to_array.mjs */ \"./node_modules/@swc/helpers/src/_sliced_to_array.mjs\");\n/* harmony import */ var _swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @swc/helpers/src/_to_consumable_array.mjs */ \"./node_modules/@swc/helpers/src/_to_consumable_array.mjs\");\n/* harmony import */ var _swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @swc/helpers/src/_ts_generator.mjs */ \"./node_modules/@swc/helpers/src/_ts_generator.mjs\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @components/button */ \"./components/button.tsx\");\n/* harmony import */ var _components_fictionRadarChart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @components/fictionRadarChart */ \"./components/fictionRadarChart.tsx\");\n/* harmony import */ var _components_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @components/input */ \"./components/input.tsx\");\n/* harmony import */ var _components_textarea__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @components/textarea */ \"./components/textarea.tsx\");\n/* harmony import */ var _libs_client_useMutation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libs/client/useMutation */ \"./libs/client/useMutation.tsx\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! react-hook-form */ \"./node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/image */ \"./node_modules/next/image.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dynamic */ \"./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _uiw_react_md_editor_markdown_editor_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @uiw/react-md-editor/markdown-editor.css */ \"./node_modules/@uiw/react-md-editor/markdown-editor.css\");\n/* harmony import */ var _uiw_react_md_editor_markdown_editor_css__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_uiw_react_md_editor_markdown_editor_css__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _uiw_react_markdown_preview_markdown_css__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @uiw/react-markdown-preview/markdown.css */ \"./node_modules/@uiw/react-markdown-preview/markdown.css\");\n/* harmony import */ var _uiw_react_markdown_preview_markdown_css__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_uiw_react_markdown_preview_markdown_css__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\n\n\nvar _this = undefined;\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\nvar MDEditor = next_dynamic__WEBPACK_IMPORTED_MODULE_9___default()(function() {\n    return __webpack_require__.e(/*! import() */ \"node_modules_uiw_react-md-editor_esm_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! @uiw/react-md-editor */ \"./node_modules/@uiw/react-md-editor/esm/index.js\"));\n}, {\n    loadableGenerated: {\n        modules: [\n            \"fictions\\\\create.tsx -> \" + \"@uiw/react-md-editor\"\n        ]\n    },\n    ssr: false\n});\n_c = MDEditor;\nvar Create = function(props) {\n    _s();\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(\"# Hello World\"), md = ref[0], setMd = ref[1];\n    // const handleChange = useCallback((md) => {\n    //   setMd(md);\n    // }, []);\n    var handleChange = function(md) {\n        setMd(md);\n    };\n    ///////////\n    // console.log(\"redered\");\n    var router = (0,next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter)();\n    var ref1 = (0,_swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_12__[\"default\"])((0,_libs_client_useMutation__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"/api/fictions\"), 2), createFiction = ref1[0], ref2 = ref1[1], loading = ref2.loading, data = ref2.data, error = ref2.error;\n    var ref3 = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_13__.useForm)({\n        mode: \"onBlur\"\n    }), register = ref3.register, handleSubmit = ref3.handleSubmit, reset = ref3.reset, resetField = ref3.resetField, watch = ref3.watch, errors = ref3.formState.errors, setValue = ref3.setValue;\n    var onValid = function() {\n        var _ref = (0,_swc_helpers_src_async_to_generator_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(function(data) {\n            var uploadURL, form, ref, id;\n            return (0,_swc_helpers_src_ts_generator_mjs__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(this, function(_state) {\n                switch(_state.label){\n                    case 0:\n                        // if (data) console.log(data);\n                        if (loading) return [\n                            2\n                        ];\n                        if (!(data.thumb && data.thumb.length > 0)) return [\n                            3,\n                            5\n                        ];\n                        return [\n                            4,\n                            fetch(\"/api/files\")\n                        ];\n                    case 1:\n                        return [\n                            4,\n                            _state.sent().json()\n                        ];\n                    case 2:\n                        uploadURL = _state.sent().uploadURL;\n                        form = new FormData();\n                        form.append(\"file\", data.thumb[0], data.title);\n                        return [\n                            4,\n                            fetch(uploadURL, {\n                                method: \"POST\",\n                                body: form\n                            })\n                        ];\n                    case 3:\n                        return [\n                            4,\n                            _state.sent().json()\n                        ];\n                    case 4:\n                        ref = _state.sent(), id = ref.result.id;\n                        createFiction((0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"])({}, data), {\n                            thumbId: id,\n                            setup: md\n                        }), \"POST\");\n                        return [\n                            3,\n                            6\n                        ];\n                    case 5:\n                        createFiction((0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"])({}, data), {\n                            setup: md\n                        }), \"POST\");\n                        _state.label = 6;\n                    case 6:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n        return function onValid(data) {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    (0,react__WEBPACK_IMPORTED_MODULE_7__.useEffect)(function() {\n        if (data === null || data === void 0 ? void 0 : data.ok) {\n            router.push(\"/fictions/\".concat(data.fiction.id));\n        }\n    }, [\n        data,\n        router\n    ]);\n    var ref4 = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(\"\"), thumbPreview = ref4[0], setThumbPreview = ref4[1];\n    var thumb = watch(\"thumb\");\n    (0,react__WEBPACK_IMPORTED_MODULE_7__.useEffect)(function() {\n        if (thumb && thumb.length > 0) {\n            var file = thumb[0];\n            setThumbPreview(URL.createObjectURL(file));\n        }\n    }, [\n        thumb\n    ]);\n    var onInvalid = function(erros) {\n        if (loading) return;\n    };\n    /// watch state (react-hook-form)\n    var wKeywords = watch().keywords;\n    var wKeywords2 = watch().mcKeywords;\n    var wKeywords3 = watch().subKeywords;\n    var wKeywords4 = watch().consKeywords;\n    var wStatus = watch().status;\n    // console.log(watch());\n    var onKeyDown = function(e) {\n        var key = e.key;\n        // console.log(key);\n        if (key === \",\" && wKeywords[0].trim() !== \"\") {\n            e.preventDefault();\n            if (!wKeywords.slice(1).includes(wKeywords[0].trim())) {\n                wKeywords[0] = wKeywords[0].trim();\n                wKeywords.filter(function(item) {\n                    return item !== \" \";\n                });\n                setValue(\"keywords\", [\n                    wKeywords[0]\n                ].concat((0,_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(wKeywords)));\n            }\n            // console.log(wKeywords);\n            resetField(\"keywords.0\");\n        }\n    };\n    var onKeyDown2 = function(e) {\n        var key = e.key;\n        // console.log(key);\n        if (key === \",\" && wKeywords2[0].trim() !== \"\") {\n            e.preventDefault();\n            if (!wKeywords2.slice(1).includes(wKeywords2[0].trim())) {\n                wKeywords2[0] = wKeywords2[0].trim();\n                wKeywords2.filter(function(item) {\n                    return item !== \" \";\n                });\n                setValue(\"mcKeywords\", [\n                    wKeywords2[0]\n                ].concat((0,_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(wKeywords2)));\n            }\n            // console.log(wKeywords2);\n            resetField(\"mcKeywords.0\");\n        }\n    };\n    var onKeyDown3 = function(e) {\n        var key = e.key;\n        // console.log(key);\n        if (key === \",\" && wKeywords3[0].trim() !== \"\") {\n            e.preventDefault();\n            if (!wKeywords3.slice(1).includes(wKeywords3[0].trim())) {\n                wKeywords3[0] = wKeywords3[0].trim();\n                wKeywords3.filter(function(item) {\n                    return item !== \" \";\n                });\n                setValue(\"subKeywords\", [\n                    wKeywords3[0]\n                ].concat((0,_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(wKeywords3)));\n            }\n            // console.log(wKeywords3);\n            resetField(\"subKeywords.0\");\n        }\n    };\n    var onKeyDown4 = function(e) {\n        var key = e.key;\n        // console.log(key);\n        if (key === \",\" && wKeywords4[0].trim() !== \"\") {\n            e.preventDefault();\n            if (!wKeywords4.slice(1).includes(wKeywords4[0].trim())) {\n                wKeywords4[0] = wKeywords4[0].trim();\n                wKeywords4.filter(function(item) {\n                    return item !== \" \";\n                });\n                setValue(\"consKeywords\", [\n                    wKeywords4[0]\n                ].concat((0,_swc_helpers_src_to_consumable_array_mjs__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(wKeywords4)));\n            }\n            // console.log(wKeywords4);\n            resetField(\"consKeywords.0\");\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"form\", {\n                className: \" w-[90vw]\",\n                onSubmit: handleSubmit(onValid, onInvalid),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \" max-w-[1500px]\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \" grid grid-cols-1 sm:grid-cols-5 \",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \" bg-white col-span-2 mx-5 mt-7 h-fit border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \" min-h-[330px] w-full\",\n                                                children: thumbPreview ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                                    className: \" relative pb-100 w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_image__WEBPACK_IMPORTED_MODULE_8___default()), {\n                                                            className: \" object-cover\",\n                                                            src: thumbPreview || \"/\",\n                                                            layout: \"fill\"\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 195,\n                                                            columnNumber: 23\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"])({}, register(\"thumb\")), {\n                                                            className: \"hidden\",\n                                                            type: \"file\"\n                                                        }), void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 200,\n                                                            columnNumber: 23\n                                                        }, _this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                    lineNumber: 194,\n                                                    columnNumber: 21\n                                                }, _this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                                    className: \"w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                            className: \"h-12 w-12\",\n                                                            stroke: \"currentColor\",\n                                                            fill: \"none\",\n                                                            viewBox: \"0 0 48 48\",\n                                                            \"aria-hidden\": \"true\",\n                                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                                d: \"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\",\n                                                                strokeWidth: 2,\n                                                                strokeLinecap: \"round\",\n                                                                strokeLinejoin: \"round\"\n                                                            }, void 0, false, {\n                                                                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                lineNumber: 215,\n                                                                columnNumber: 25\n                                                            }, _this)\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 208,\n                                                            columnNumber: 23\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"])({}, register(\"thumb\")), {\n                                                            className: \"hidden\",\n                                                            type: \"file\"\n                                                        }), void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 223,\n                                                            columnNumber: 23\n                                                        }, _this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                    lineNumber: 207,\n                                                    columnNumber: 21\n                                                }, _this)\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                lineNumber: 192,\n                                                columnNumber: 17\n                                            }, _this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \" px-4 py-3\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"title\", {\n                                                            required: true\n                                                        }),\n                                                        required: true,\n                                                        label: \"Title\",\n                                                        name: \"title\",\n                                                        type: \"text_detail\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 232,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"relatedTitle\", {\n                                                            required: true\n                                                        }),\n                                                        required: true,\n                                                        label: \"RelatedTitle\",\n                                                        name: \"relatedTitle\",\n                                                        type: \"text_detail\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 239,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"author\", {\n                                                            required: true\n                                                        }),\n                                                        required: true,\n                                                        label: \"Author\",\n                                                        name: \"author\",\n                                                        type: \"text_detail\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 246,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"relatedAuthor\", {\n                                                            required: true\n                                                        }),\n                                                        required: true,\n                                                        label: \"RelatedAuthor\",\n                                                        name: \"relatedAuthor\",\n                                                        type: \"text_detail\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 253,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"type\", {\n                                                            required: true\n                                                        }),\n                                                        required: true,\n                                                        label: \"Type\",\n                                                        name: \"type\",\n                                                        type: \"text_detail\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 260,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"nationality\", {\n                                                            required: true\n                                                        }),\n                                                        required: true,\n                                                        label: \"Nationality\",\n                                                        name: \"nationality\",\n                                                        type: \"text_detail\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 267,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"genre\"),\n                                                        required: true,\n                                                        label: \"Genre\",\n                                                        name: \"genre\",\n                                                        type: \"text_detail\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 274,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \" flex relative items-center justify-between\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \" w-[48%]\",\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                                    register: register(\"date.0\"),\n                                                                    required: true,\n                                                                    label: \"StartDate\",\n                                                                    name: \"startDate\",\n                                                                    type: \"date\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 283,\n                                                                    columnNumber: 23\n                                                                }, _this)\n                                                            }, void 0, false, {\n                                                                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                lineNumber: 282,\n                                                                columnNumber: 21\n                                                            }, _this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \" w-[48%]\",\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                                    register: register(\"date.1\"),\n                                                                    required: true,\n                                                                    label: \"EndDate\",\n                                                                    name: \"endDate\",\n                                                                    type: \"date\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 292,\n                                                                    columnNumber: 23\n                                                                }, _this)\n                                                            }, void 0, false, {\n                                                                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                lineNumber: 291,\n                                                                columnNumber: 21\n                                                            }, _this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 281,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"original\", {\n                                                            required: true\n                                                        }),\n                                                        required: true,\n                                                        label: \"Original\",\n                                                        name: \"original\",\n                                                        type: \"text\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 301,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"platforms.0\"),\n                                                        required: true,\n                                                        label: \"Platforms\",\n                                                        name: \"platforms\",\n                                                        type: \"text\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 308,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"currentState\"),\n                                                        required: true,\n                                                        label: \"CurrentState\",\n                                                        name: \"currentState\",\n                                                        type: \"text\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 315,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"volume\", {\n                                                            required: true\n                                                        }),\n                                                        required: true,\n                                                        label: \"Volume\",\n                                                        name: \"volume\",\n                                                        type: \"text_detail\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 322,\n                                                        columnNumber: 19\n                                                    }, _this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                        register: register(\"isTranslated\", {\n                                                            required: false\n                                                        }),\n                                                        required: true,\n                                                        label: \"IsTranslated\",\n                                                        name: \"isTranslated\",\n                                                        type: \"text_detail\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                        lineNumber: 329,\n                                                        columnNumber: 19\n                                                    }, _this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                lineNumber: 231,\n                                                columnNumber: 17\n                                            }, _this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                        lineNumber: 191,\n                                        columnNumber: 15\n                                    }, _this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \" col-span-3 mx-5 mt-7\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \" grid sm:grid-cols-1\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                                            className: \" font-bold pt-1 px-2\",\n                                                            children: \"Keywords\"\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 341,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"])({\n                                                            className: \" w-full\"\n                                                        }, register(\"keywords.0\")), {\n                                                            type: \"text\",\n                                                            placeholder: \" 키워드(,를 눌러서 입력하세요)\",\n                                                            onKeyDown: onKeyDown\n                                                        }), void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 342,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                                            className: \" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\",\n                                                            children: wKeywords === null || wKeywords === void 0 ? void 0 : wKeywords.filter(function(item) {\n                                                                return item !== undefined;\n                                                            }).map(function(item, index) {\n                                                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                                    className: \" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\",\n                                                                    onClick: function(e) {\n                                                                        wKeywords = wKeywords.filter(function(item) {\n                                                                            return item !== e.currentTarget.innerHTML;\n                                                                        });\n                                                                        setValue(\"keywords\", wKeywords);\n                                                                    // console.log(e.currentTarget.innerHTML);\n                                                                    },\n                                                                    children: item\n                                                                }, index, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 353,\n                                                                    columnNumber: 27\n                                                                }, _this);\n                                                            })\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 349,\n                                                            columnNumber: 21\n                                                        }, _this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                    lineNumber: 340,\n                                                    columnNumber: 19\n                                                }, _this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                                            className: \" font-bold pt-1 px-2\",\n                                                            children: \"Mc Keywords\"\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 370,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"])({\n                                                            className: \" w-full\"\n                                                        }, register(\"mcKeywords.0\")), {\n                                                            type: \"text\",\n                                                            placeholder: \" 키워드(,를 눌러서 입력하세요)\",\n                                                            onKeyDown: onKeyDown2\n                                                        }), void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 371,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                                            className: \" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\",\n                                                            children: wKeywords2 === null || wKeywords2 === void 0 ? void 0 : wKeywords2.filter(function(item) {\n                                                                return item !== undefined;\n                                                            }).map(function(item, index) {\n                                                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                                    className: \" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\",\n                                                                    onClick: function(e) {\n                                                                        wKeywords2 = wKeywords2.filter(function(item) {\n                                                                            return item !== e.currentTarget.innerHTML;\n                                                                        });\n                                                                        setValue(\"keywords\", wKeywords2);\n                                                                    // console.log(e.currentTarget.innerHTML);\n                                                                    },\n                                                                    children: item\n                                                                }, index, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 382,\n                                                                    columnNumber: 27\n                                                                }, _this);\n                                                            })\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 378,\n                                                            columnNumber: 21\n                                                        }, _this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                    lineNumber: 369,\n                                                    columnNumber: 19\n                                                }, _this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                                            className: \" font-bold pt-1 px-2\",\n                                                            children: \"Sub Keywords\"\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 399,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"])({\n                                                            className: \" w-full\"\n                                                        }, register(\"subKeywords.0\")), {\n                                                            type: \"text\",\n                                                            placeholder: \" 키워드(,를 눌러서 입력하세요)\",\n                                                            onKeyDown: onKeyDown3\n                                                        }), void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 400,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                                            className: \" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\",\n                                                            children: wKeywords3 === null || wKeywords3 === void 0 ? void 0 : wKeywords3.filter(function(item) {\n                                                                return item !== undefined;\n                                                            }).map(function(item, index) {\n                                                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                                    className: \" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\",\n                                                                    onClick: function(e) {\n                                                                        wKeywords3 = wKeywords3.filter(function(item) {\n                                                                            return item !== e.currentTarget.innerHTML;\n                                                                        });\n                                                                        setValue(\"subKeywords\", wKeywords3);\n                                                                    // console.log(e.currentTarget.innerHTML);\n                                                                    },\n                                                                    children: item\n                                                                }, index, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 411,\n                                                                    columnNumber: 27\n                                                                }, _this);\n                                                            })\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 407,\n                                                            columnNumber: 21\n                                                        }, _this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                    lineNumber: 398,\n                                                    columnNumber: 19\n                                                }, _this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                                            className: \" font-bold pt-1 px-2\",\n                                                            children: \"Cons Keywords\"\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 428,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", (0,_swc_helpers_src_object_spread_props_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"])((0,_swc_helpers_src_object_spread_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"])({\n                                                            className: \" w-full\"\n                                                        }, register(\"consKeywords.0\")), {\n                                                            type: \"text\",\n                                                            placeholder: \" 키워드(,를 눌러서 입력하세요)\",\n                                                            onKeyDown: onKeyDown4\n                                                        }), void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 429,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                                            className: \" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\",\n                                                            children: wKeywords4 === null || wKeywords4 === void 0 ? void 0 : wKeywords4.filter(function(item) {\n                                                                return item !== undefined;\n                                                            }).map(function(item, index) {\n                                                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                                    className: \" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\",\n                                                                    onClick: function(e) {\n                                                                        wKeywords4 = wKeywords4.filter(function(item) {\n                                                                            return item !== e.currentTarget.innerHTML;\n                                                                        });\n                                                                        setValue(\"consKeywords\", wKeywords4);\n                                                                    // console.log(e.currentTarget.innerHTML);\n                                                                    },\n                                                                    children: item\n                                                                }, index, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 440,\n                                                                    columnNumber: 27\n                                                                }, _this);\n                                                            })\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 436,\n                                                            columnNumber: 21\n                                                        }, _this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                    lineNumber: 427,\n                                                    columnNumber: 19\n                                                }, _this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \" h-max bg-white mb-10 w-full border-[0.5px] border-[#BBBBBB] rounded-md overflow-x-auto\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                                            className: \" font-bold pt-1 px-2\",\n                                                            children: \"graphs and charts\"\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 457,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_fictionRadarChart__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                                            props: wStatus\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 458,\n                                                            columnNumber: 21\n                                                        }, _this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: \" grid grid-cols-2 mx-2\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                                    register: register(\"status.0\", {\n                                                                        max: 5,\n                                                                        min: 0\n                                                                    }),\n                                                                    required: true,\n                                                                    label: \"오리지널리티\",\n                                                                    name: \"status\",\n                                                                    type: \"number\",\n                                                                    kind: \"status\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 460,\n                                                                    columnNumber: 23\n                                                                }, _this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                                    register: register(\"status.1\"),\n                                                                    required: true,\n                                                                    label: \"필력\",\n                                                                    name: \"status\",\n                                                                    type: \"number\",\n                                                                    kind: \"status\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 471,\n                                                                    columnNumber: 23\n                                                                }, _this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                                    register: register(\"status.2\"),\n                                                                    required: true,\n                                                                    label: \"캐릭터성\",\n                                                                    name: \"status\",\n                                                                    type: \"number\",\n                                                                    kind: \"status\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 479,\n                                                                    columnNumber: 23\n                                                                }, _this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                                    register: register(\"status.3\"),\n                                                                    required: true,\n                                                                    label: \"핍진성\",\n                                                                    name: \"status\",\n                                                                    type: \"number\",\n                                                                    kind: \"status\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 487,\n                                                                    columnNumber: 23\n                                                                }, _this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                                    register: register(\"status.4\"),\n                                                                    required: true,\n                                                                    label: \"스토리\",\n                                                                    name: \"status\",\n                                                                    type: \"number\",\n                                                                    kind: \"status\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 495,\n                                                                    columnNumber: 23\n                                                                }, _this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_input__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                                                    register: register(\"status.5\"),\n                                                                    required: true,\n                                                                    label: \"작품성\",\n                                                                    name: \"status\",\n                                                                    type: \"number\",\n                                                                    kind: \"status\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                                    lineNumber: 503,\n                                                                    columnNumber: 23\n                                                                }, _this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                            lineNumber: 459,\n                                                            columnNumber: 21\n                                                        }, _this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                                    lineNumber: 456,\n                                                    columnNumber: 19\n                                                }, _this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                            lineNumber: 339,\n                                            columnNumber: 17\n                                        }, _this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                        lineNumber: 338,\n                                        columnNumber: 15\n                                    }, _this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                lineNumber: 190,\n                                columnNumber: 13\n                            }, _this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \" mx-5 my-7 bg-white px-3 py-3 border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_textarea__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                        register: register(\"synopsis\"),\n                                        name: \"synopsis\",\n                                        label: \"Synopsis\",\n                                        required: true\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                        lineNumber: 521,\n                                        columnNumber: 15\n                                    }, _this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_textarea__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                                        register: register(\"characters\"),\n                                        name: \"characters\",\n                                        label: \"Characters\",\n                                        required: true\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                        lineNumber: 527,\n                                        columnNumber: 15\n                                    }, _this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MDEditor, {\n                                            value: md,\n                                            onChange: handleChange\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                            lineNumber: 541,\n                                            columnNumber: 17\n                                        }, _this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                        lineNumber: 539,\n                                        columnNumber: 15\n                                    }, _this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                                lineNumber: 520,\n                                columnNumber: 13\n                            }, _this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                        lineNumber: 189,\n                        columnNumber: 11\n                    }, _this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_button__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                        text: loading ? \"Loading...\" : \"저장\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                        lineNumber: 545,\n                        columnNumber: 11\n                    }, _this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n                lineNumber: 188,\n                columnNumber: 9\n            }, _this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\mk448\\\\Dv_study\\\\fdbs_proto\\\\fdbsVer1.0\\\\pages\\\\fictions\\\\create.tsx\",\n            lineNumber: 187,\n            columnNumber: 7\n        }, _this)\n    }, void 0, false);\n};\n_s(Create, \"Qmwb92Ba839wGbK+IQ+eiz0m3uc=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter,\n        _libs_client_useMutation__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n        react_hook_form__WEBPACK_IMPORTED_MODULE_13__.useForm\n    ];\n});\n_c1 = Create;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Create);\nvar _c, _c1;\n$RefreshReg$(_c, \"MDEditor\");\n$RefreshReg$(_c1, \"Create\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/fictions/create.tsx\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_array_like_to_array.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_array_like_to_array.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _arrayLikeToArray; }\n/* harmony export */ });\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fYXJyYXlfbGlrZV90b19hcnJheS5tanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLGlCQUFULENBQTJCQyxHQUEzQixFQUFnQ0MsR0FBaEMsRUFBcUM7RUFDbEQsSUFBSUEsR0FBRyxJQUFJLElBQVAsSUFBZUEsR0FBRyxHQUFHRCxHQUFHLENBQUNFLE1BQTdCLEVBQXFDRCxHQUFHLEdBQUdELEdBQUcsQ0FBQ0UsTUFBVjs7RUFDckMsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxJQUFJLEdBQUcsSUFBSUMsS0FBSixDQUFVSixHQUFWLENBQXZCLEVBQXVDRSxDQUFDLEdBQUdGLEdBQTNDLEVBQWdERSxDQUFDLEVBQWpELEVBQXFEQyxJQUFJLENBQUNELENBQUQsQ0FBSixHQUFVSCxHQUFHLENBQUNHLENBQUQsQ0FBYjs7RUFDckQsT0FBT0MsSUFBUDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvc3JjL19hcnJheV9saWtlX3RvX2FycmF5Lm1qcz9hOThhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG4gIHJldHVybiBhcnIyO1xufVxuIl0sIm5hbWVzIjpbIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwibGVuZ3RoIiwiaSIsImFycjIiLCJBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_array_like_to_array.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_array_with_holes.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_array_with_holes.mjs ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _arrayWithHoles; }\n/* harmony export */ });\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fYXJyYXlfd2l0aF9ob2xlcy5tanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLGVBQVQsQ0FBeUJDLEdBQXpCLEVBQThCO0VBQzNDLElBQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixHQUFkLENBQUosRUFBd0IsT0FBT0EsR0FBUDtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fYXJyYXlfd2l0aF9ob2xlcy5tanM/MWQ3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG4iXSwibmFtZXMiOlsiX2FycmF5V2l0aEhvbGVzIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_array_with_holes.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_array_without_holes.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_array_without_holes.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _arrayWithoutHoles; }\n/* harmony export */ });\n/* harmony import */ var _array_like_to_array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_array_like_to_array.mjs */ \"./node_modules/@swc/helpers/src/_array_like_to_array.mjs\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return (0,_array_like_to_array_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fYXJyYXlfd2l0aG91dF9ob2xlcy5tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUVlLFNBQVNDLGtCQUFULENBQTRCQyxHQUE1QixFQUFpQztFQUM5QyxJQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsR0FBZCxDQUFKLEVBQXdCLE9BQU9GLG9FQUFpQixDQUFDRSxHQUFELENBQXhCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvc3JjL19hcnJheV93aXRob3V0X2hvbGVzLm1qcz81NDY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfYXJyYXlMaWtlVG9BcnJheSBmcm9tICcuL19hcnJheV9saWtlX3RvX2FycmF5Lm1qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG4iXSwibmFtZXMiOlsiX2FycmF5TGlrZVRvQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_array_without_holes.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_async_to_generator.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_async_to_generator.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _asyncToGenerator; }\n/* harmony export */ });\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fYXN5bmNfdG9fZ2VuZXJhdG9yLm1qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0Esa0JBQVQsQ0FBNEJDLEdBQTVCLEVBQWlDQyxPQUFqQyxFQUEwQ0MsTUFBMUMsRUFBa0RDLEtBQWxELEVBQXlEQyxNQUF6RCxFQUFpRUMsR0FBakUsRUFBc0VDLEdBQXRFLEVBQTJFO0VBQ3pFLElBQUk7SUFDRixJQUFJQyxJQUFJLEdBQUdQLEdBQUcsQ0FBQ0ssR0FBRCxDQUFILENBQVNDLEdBQVQsQ0FBWDtJQUNBLElBQUlFLEtBQUssR0FBR0QsSUFBSSxDQUFDQyxLQUFqQjtFQUNELENBSEQsQ0FHRSxPQUFPQyxLQUFQLEVBQWM7SUFDZFAsTUFBTSxDQUFDTyxLQUFELENBQU47SUFDQTtFQUNEOztFQUVELElBQUlGLElBQUksQ0FBQ0csSUFBVCxFQUFlO0lBQ2JULE9BQU8sQ0FBQ08sS0FBRCxDQUFQO0VBQ0QsQ0FGRCxNQUVPO0lBQ0xHLE9BQU8sQ0FBQ1YsT0FBUixDQUFnQk8sS0FBaEIsRUFBdUJJLElBQXZCLENBQTRCVCxLQUE1QixFQUFtQ0MsTUFBbkM7RUFDRDtBQUNGOztBQUVjLFNBQVNTLGlCQUFULENBQTJCQyxFQUEzQixFQUErQjtFQUM1QyxPQUFPLFlBQVk7SUFDakIsSUFBSUMsSUFBSSxHQUFHLElBQVg7SUFBQSxJQUNFQyxJQUFJLEdBQUdDLFNBRFQ7SUFFQSxPQUFPLElBQUlOLE9BQUosQ0FBWSxVQUFVVixPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtNQUM1QyxJQUFJRixHQUFHLEdBQUdjLEVBQUUsQ0FBQ0ksS0FBSCxDQUFTSCxJQUFULEVBQWVDLElBQWYsQ0FBVjs7TUFFQSxTQUFTYixLQUFULENBQWVLLEtBQWYsRUFBc0I7UUFDcEJULGtCQUFrQixDQUFDQyxHQUFELEVBQU1DLE9BQU4sRUFBZUMsTUFBZixFQUF1QkMsS0FBdkIsRUFBOEJDLE1BQTlCLEVBQXNDLE1BQXRDLEVBQThDSSxLQUE5QyxDQUFsQjtNQUNEOztNQUVELFNBQVNKLE1BQVQsQ0FBZ0JlLEdBQWhCLEVBQXFCO1FBQ25CcEIsa0JBQWtCLENBQUNDLEdBQUQsRUFBTUMsT0FBTixFQUFlQyxNQUFmLEVBQXVCQyxLQUF2QixFQUE4QkMsTUFBOUIsRUFBc0MsT0FBdEMsRUFBK0NlLEdBQS9DLENBQWxCO01BQ0Q7O01BRURoQixLQUFLLENBQUNpQixTQUFELENBQUw7SUFDRCxDQVpNLENBQVA7RUFhRCxDQWhCRDtBQWlCRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fYXN5bmNfdG9fZ2VuZXJhdG9yLm1qcz8yYzdmIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJyZXNvbHZlIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJrZXkiLCJhcmciLCJpbmZvIiwidmFsdWUiLCJlcnJvciIsImRvbmUiLCJQcm9taXNlIiwidGhlbiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiZm4iLCJzZWxmIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwiZXJyIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_async_to_generator.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_iterable_to_array.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_iterable_to_array.mjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _iterableToArray; }\n/* harmony export */ });\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9faXRlcmFibGVfdG9fYXJyYXkubWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxTQUFTQSxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0M7RUFDN0MsSUFBSSxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDRCxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsUUFBUixDQUFKLElBQXlCLElBQTFELElBQWtFRixJQUFJLENBQUMsWUFBRCxDQUFKLElBQXNCLElBQTVGLEVBQWtHLE9BQU9HLEtBQUssQ0FBQ0MsSUFBTixDQUFXSixJQUFYLENBQVA7QUFDbkciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9zcmMvX2l0ZXJhYmxlX3RvX2FycmF5Lm1qcz82ZTI5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cbiJdLCJuYW1lcyI6WyJfaXRlcmFibGVUb0FycmF5IiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiQXJyYXkiLCJmcm9tIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_iterable_to_array.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_non_iterable_rest.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_non_iterable_rest.mjs ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _nonIterableRest; }\n/* harmony export */ });\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fbm9uX2l0ZXJhYmxlX3Jlc3QubWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxTQUFTQSxnQkFBVCxHQUE0QjtFQUN6QyxNQUFNLElBQUlDLFNBQUosQ0FBYyw0SUFBZCxDQUFOO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9zcmMvX25vbl9pdGVyYWJsZV9yZXN0Lm1qcz8xZGVhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbiJdLCJuYW1lcyI6WyJfbm9uSXRlcmFibGVSZXN0IiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_non_iterable_rest.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_non_iterable_spread.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_non_iterable_spread.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _nonIterableSpread; }\n/* harmony export */ });\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fbm9uX2l0ZXJhYmxlX3NwcmVhZC5tanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLGtCQUFULEdBQThCO0VBQzNDLE1BQU0sSUFBSUMsU0FBSixDQUFjLHVJQUFkLENBQU47QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fbm9uX2l0ZXJhYmxlX3NwcmVhZC5tanM/MzYyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG4iXSwibmFtZXMiOlsiX25vbkl0ZXJhYmxlU3ByZWFkIiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_non_iterable_spread.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_object_spread_props.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_object_spread_props.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _objectSpreadProps; }\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpreadProps(target, source) {\n  source = source != null ? source : {};\n\n  if (Object.getOwnPropertyDescriptors) {\n    Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n  } else {\n    ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fb2JqZWN0X3NwcmVhZF9wcm9wcy5tanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCQyxjQUF6QixFQUF5QztFQUN2QyxJQUFJQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZRixNQUFaLENBQVg7O0VBQ0EsSUFBSUcsTUFBTSxDQUFDQyxxQkFBWCxFQUFrQztJQUNoQyxJQUFJQyxPQUFPLEdBQUdGLE1BQU0sQ0FBQ0MscUJBQVAsQ0FBNkJKLE1BQTdCLENBQWQ7O0lBQ0EsSUFBSUMsY0FBSixFQUFvQjtNQUNsQkksT0FBTyxHQUFHQSxPQUFPLENBQUNDLE1BQVIsQ0FBZSxVQUFVQyxHQUFWLEVBQWU7UUFDdEMsT0FBT0osTUFBTSxDQUFDSyx3QkFBUCxDQUFnQ1IsTUFBaEMsRUFBd0NPLEdBQXhDLEVBQTZDRSxVQUFwRDtNQUNELENBRlMsQ0FBVjtJQUdEOztJQUNEUCxJQUFJLENBQUNRLElBQUwsQ0FBVUMsS0FBVixDQUFnQlQsSUFBaEIsRUFBc0JHLE9BQXRCO0VBQ0Q7O0VBQ0QsT0FBT0gsSUFBUDtBQUNEOztBQUVjLFNBQVNVLGtCQUFULENBQTRCQyxNQUE1QixFQUFvQ0MsTUFBcEMsRUFBNEM7RUFDekRBLE1BQU0sR0FBR0EsTUFBTSxJQUFJLElBQVYsR0FBaUJBLE1BQWpCLEdBQTBCLEVBQW5DOztFQUNBLElBQUlYLE1BQU0sQ0FBQ1kseUJBQVgsRUFBc0M7SUFDcENaLE1BQU0sQ0FBQ2EsZ0JBQVAsQ0FBd0JILE1BQXhCLEVBQWdDVixNQUFNLENBQUNZLHlCQUFQLENBQWlDRCxNQUFqQyxDQUFoQztFQUNELENBRkQsTUFFTztJQUNMZixPQUFPLENBQUNJLE1BQU0sQ0FBQ1csTUFBRCxDQUFQLENBQVAsQ0FBd0JHLE9BQXhCLENBQWdDLFVBQVVDLEdBQVYsRUFBZTtNQUM3Q2YsTUFBTSxDQUFDZ0IsY0FBUCxDQUNFTixNQURGLEVBRUVLLEdBRkYsRUFHRWYsTUFBTSxDQUFDSyx3QkFBUCxDQUFnQ00sTUFBaEMsRUFBd0NJLEdBQXhDLENBSEY7SUFLRCxDQU5EO0VBT0Q7O0VBRUQsT0FBT0wsTUFBUDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvc3JjL19vYmplY3Rfc3ByZWFkX3Byb3BzLm1qcz85YmZiIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSB7XG4gICAgICBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWRQcm9wcyh0YXJnZXQsIHNvdXJjZSkge1xuICBzb3VyY2UgPSBzb3VyY2UgIT0gbnVsbCA/IHNvdXJjZSA6IHt9XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gIH0gZWxzZSB7XG4gICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAga2V5LFxuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59Il0sIm5hbWVzIjpbIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWRQcm9wcyIsInRhcmdldCIsInNvdXJjZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZm9yRWFjaCIsImtleSIsImRlZmluZVByb3BlcnR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_object_spread_props.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_object_without_properties.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_object_without_properties.mjs ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _objectWithoutProperties; }\n/* harmony export */ });\n/* harmony import */ var _object_without_properties_loose_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_object_without_properties_loose.mjs */ \"./node_modules/@swc/helpers/src/_object_without_properties_loose.mjs\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = (0,_object_without_properties_loose_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcy5tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUVlLFNBQVNDLHdCQUFULENBQWtDQyxNQUFsQyxFQUEwQ0MsUUFBMUMsRUFBb0Q7RUFDakUsSUFBSUQsTUFBTSxJQUFJLElBQWQsRUFBb0IsT0FBTyxFQUFQO0VBQ3BCLElBQUlFLE1BQU0sR0FBR0osZ0ZBQTRCLENBQUNFLE1BQUQsRUFBU0MsUUFBVCxDQUF6QztFQUNBLElBQUlFLEdBQUosRUFBU0MsQ0FBVDs7RUFFQSxJQUFJQyxNQUFNLENBQUNDLHFCQUFYLEVBQWtDO0lBQ2hDLElBQUlDLGdCQUFnQixHQUFHRixNQUFNLENBQUNDLHFCQUFQLENBQTZCTixNQUE3QixDQUF2Qjs7SUFFQSxLQUFLSSxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdHLGdCQUFnQixDQUFDQyxNQUFqQyxFQUF5Q0osQ0FBQyxFQUExQyxFQUE4QztNQUM1Q0QsR0FBRyxHQUFHSSxnQkFBZ0IsQ0FBQ0gsQ0FBRCxDQUF0QjtNQUNBLElBQUlILFFBQVEsQ0FBQ1EsT0FBVCxDQUFpQk4sR0FBakIsS0FBeUIsQ0FBN0IsRUFBZ0M7TUFDaEMsSUFBSSxDQUFDRSxNQUFNLENBQUNLLFNBQVAsQ0FBaUJDLG9CQUFqQixDQUFzQ0MsSUFBdEMsQ0FBMkNaLE1BQTNDLEVBQW1ERyxHQUFuRCxDQUFMLEVBQThEO01BQzlERCxNQUFNLENBQUNDLEdBQUQsQ0FBTixHQUFjSCxNQUFNLENBQUNHLEdBQUQsQ0FBcEI7SUFDRDtFQUNGOztFQUVELE9BQU9ELE1BQVA7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcy5tanM/ZDk2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICcuL19vYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzX2xvb3NlLm1qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iXSwibmFtZXMiOlsib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInNvdXJjZSIsImV4Y2x1ZGVkIiwidGFyZ2V0Iiwia2V5IiwiaSIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJsZW5ndGgiLCJpbmRleE9mIiwicHJvdG90eXBlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_object_without_properties.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_object_without_properties_loose.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_object_without_properties_loose.mjs ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _objectWithoutPropertiesLoose; }\n/* harmony export */ });\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllc19sb29zZS5tanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLDZCQUFULENBQXVDQyxNQUF2QyxFQUErQ0MsUUFBL0MsRUFBeUQ7RUFDdEUsSUFBSUQsTUFBTSxJQUFJLElBQWQsRUFBb0IsT0FBTyxFQUFQO0VBQ3BCLElBQUlFLE1BQU0sR0FBRyxFQUFiO0VBQ0EsSUFBSUMsVUFBVSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsTUFBWixDQUFqQjtFQUNBLElBQUlNLEdBQUosRUFBU0MsQ0FBVDs7RUFFQSxLQUFLQSxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdKLFVBQVUsQ0FBQ0ssTUFBM0IsRUFBbUNELENBQUMsRUFBcEMsRUFBd0M7SUFDdENELEdBQUcsR0FBR0gsVUFBVSxDQUFDSSxDQUFELENBQWhCO0lBQ0EsSUFBSU4sUUFBUSxDQUFDUSxPQUFULENBQWlCSCxHQUFqQixLQUF5QixDQUE3QixFQUFnQztJQUNoQ0osTUFBTSxDQUFDSSxHQUFELENBQU4sR0FBY04sTUFBTSxDQUFDTSxHQUFELENBQXBCO0VBQ0Q7O0VBRUQsT0FBT0osTUFBUDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvc3JjL19vYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzX2xvb3NlLm1qcz8yMGI3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuIl0sIm5hbWVzIjpbIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlIiwiZXhjbHVkZWQiLCJ0YXJnZXQiLCJzb3VyY2VLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImkiLCJsZW5ndGgiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_object_without_properties_loose.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_sliced_to_array.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_sliced_to_array.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _slicedToArray; }\n/* harmony export */ });\n/* harmony import */ var _array_with_holes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_array_with_holes.mjs */ \"./node_modules/@swc/helpers/src/_array_with_holes.mjs\");\n/* harmony import */ var _iterable_to_array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_iterable_to_array.mjs */ \"./node_modules/@swc/helpers/src/_iterable_to_array.mjs\");\n/* harmony import */ var _non_iterable_rest_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_non_iterable_rest.mjs */ \"./node_modules/@swc/helpers/src/_non_iterable_rest.mjs\");\n/* harmony import */ var _unsupported_iterable_to_array_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_unsupported_iterable_to_array.mjs */ \"./node_modules/@swc/helpers/src/_unsupported_iterable_to_array.mjs\");\n\n\n\n\nfunction _slicedToArray(arr, i) {\n  return (0,_array_with_holes_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr) || (0,_iterable_to_array_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(arr, i) || (0,_unsupported_iterable_to_array_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(arr, i) || (0,_non_iterable_rest_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fc2xpY2VkX3RvX2FycmF5Lm1qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRWUsU0FBU0ksY0FBVCxDQUF3QkMsR0FBeEIsRUFBNkJDLENBQTdCLEVBQWdDO0VBQzdDLE9BQU9OLGlFQUFjLENBQUNLLEdBQUQsQ0FBZCxJQUF1Qkosa0VBQW9CLENBQUNJLEdBQUQsRUFBTUMsQ0FBTixDQUEzQyxJQUF1REgsOEVBQTBCLENBQUNFLEdBQUQsRUFBTUMsQ0FBTixDQUFqRixJQUE2Rkosa0VBQWUsRUFBbkg7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fc2xpY2VkX3RvX2FycmF5Lm1qcz84Njk5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tICcuL19hcnJheV93aXRoX2hvbGVzLm1qcyc7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSAnLi9faXRlcmFibGVfdG9fYXJyYXkubWpzJztcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSAnLi9fbm9uX2l0ZXJhYmxlX3Jlc3QubWpzJztcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tICcuL191bnN1cHBvcnRlZF9pdGVyYWJsZV90b19hcnJheS5tanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufVxuIl0sIm5hbWVzIjpbImFycmF5V2l0aEhvbGVzIiwiaXRlcmFibGVUb0FycmF5TGltaXQiLCJub25JdGVyYWJsZVJlc3QiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_sliced_to_array.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_to_consumable_array.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_to_consumable_array.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _toConsumableArray; }\n/* harmony export */ });\n/* harmony import */ var _array_without_holes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_array_without_holes.mjs */ \"./node_modules/@swc/helpers/src/_array_without_holes.mjs\");\n/* harmony import */ var _iterable_to_array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_iterable_to_array.mjs */ \"./node_modules/@swc/helpers/src/_iterable_to_array.mjs\");\n/* harmony import */ var _non_iterable_spread_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_non_iterable_spread.mjs */ \"./node_modules/@swc/helpers/src/_non_iterable_spread.mjs\");\n/* harmony import */ var _unsupported_iterable_to_array_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_unsupported_iterable_to_array.mjs */ \"./node_modules/@swc/helpers/src/_unsupported_iterable_to_array.mjs\");\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return (0,_array_without_holes_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr) || (0,_iterable_to_array_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(arr) || (0,_unsupported_iterable_to_array_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(arr) || (0,_non_iterable_spread_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fdG9fY29uc3VtYWJsZV9hcnJheS5tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVlLFNBQVNJLGtCQUFULENBQTRCQyxHQUE1QixFQUFpQztFQUM5QyxPQUFPTCxvRUFBaUIsQ0FBQ0ssR0FBRCxDQUFqQixJQUEwQkosa0VBQWUsQ0FBQ0ksR0FBRCxDQUF6QyxJQUFrREYsOEVBQTBCLENBQUNFLEdBQUQsQ0FBNUUsSUFBcUZILG9FQUFpQixFQUE3RztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvc3JjL190b19jb25zdW1hYmxlX2FycmF5Lm1qcz8yNjQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tICcuL19hcnJheV93aXRob3V0X2hvbGVzLm1qcyc7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gJy4vX2l0ZXJhYmxlX3RvX2FycmF5Lm1qcyc7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSAnLi9fbm9uX2l0ZXJhYmxlX3NwcmVhZC5tanMnO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gJy4vX3Vuc3VwcG9ydGVkX2l0ZXJhYmxlX3RvX2FycmF5Lm1qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuIl0sIm5hbWVzIjpbImFycmF5V2l0aG91dEhvbGVzIiwiaXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_to_consumable_array.mjs\n"));

/***/ }),

/***/ "./node_modules/@swc/helpers/src/_ts_generator.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_ts_generator.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* reexport safe */ tslib__WEBPACK_IMPORTED_MODULE_0__.__generator; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");


/***/ }),

/***/ "./node_modules/@swc/helpers/src/_unsupported_iterable_to_array.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@swc/helpers/src/_unsupported_iterable_to_array.mjs ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ _unsupportedIterableToArray; }\n/* harmony export */ });\n/* harmony import */ var _array_like_to_array_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_array_like_to_array.mjs */ \"./node_modules/@swc/helpers/src/_array_like_to_array.mjs\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return (0,_array_like_to_array_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_array_like_to_array_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(o, minLen);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL3NyYy9fdW5zdXBwb3J0ZWRfaXRlcmFibGVfdG9fYXJyYXkubWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFFZSxTQUFTQywyQkFBVCxDQUFxQ0MsQ0FBckMsRUFBd0NDLE1BQXhDLEVBQWdEO0VBQzdELElBQUksQ0FBQ0QsQ0FBTCxFQUFRO0VBQ1IsSUFBSSxPQUFPQSxDQUFQLEtBQWEsUUFBakIsRUFBMkIsT0FBT0Ysb0VBQWlCLENBQUNFLENBQUQsRUFBSUMsTUFBSixDQUF4QjtFQUMzQixJQUFJQyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTixDQUEvQixFQUFrQ08sS0FBbEMsQ0FBd0MsQ0FBeEMsRUFBMkMsQ0FBQyxDQUE1QyxDQUFSO0VBQ0EsSUFBSUwsQ0FBQyxLQUFLLFFBQU4sSUFBa0JGLENBQUMsQ0FBQ1EsV0FBeEIsRUFBcUNOLENBQUMsR0FBR0YsQ0FBQyxDQUFDUSxXQUFGLENBQWNDLElBQWxCO0VBQ3JDLElBQUlQLENBQUMsS0FBSyxLQUFOLElBQWVBLENBQUMsS0FBSyxLQUF6QixFQUFnQyxPQUFPUSxLQUFLLENBQUNDLElBQU4sQ0FBV1QsQ0FBWCxDQUFQO0VBQ2hDLElBQUlBLENBQUMsS0FBSyxXQUFOLElBQXFCLDJDQUEyQ1UsSUFBM0MsQ0FBZ0RWLENBQWhELENBQXpCLEVBQ0UsT0FBT0osb0VBQWlCLENBQUNFLENBQUQsRUFBSUMsTUFBSixDQUF4QjtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvc3JjL191bnN1cHBvcnRlZF9pdGVyYWJsZV90b19hcnJheS5tanM/ZTdiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2FycmF5TGlrZVRvQXJyYXkgZnJvbSAnLi9fYXJyYXlfbGlrZV90b19hcnJheS5tanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG4pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSlcbiAgICByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cbiJdLCJuYW1lcyI6WyJfYXJyYXlMaWtlVG9BcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheSIsImZyb20iLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/src/_unsupported_iterable_to_array.mjs\n"));

/***/ }),

/***/ "./node_modules/chart.js/dist/chart.mjs":
/*!**********************************************!*\
  !*** ./node_modules/chart.js/dist/chart.mjs ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Animation\": function() { return /* binding */ Animation; },\n/* harmony export */   \"Animations\": function() { return /* binding */ Animations; },\n/* harmony export */   \"ArcElement\": function() { return /* binding */ ArcElement; },\n/* harmony export */   \"BarController\": function() { return /* binding */ BarController; },\n/* harmony export */   \"BarElement\": function() { return /* binding */ BarElement; },\n/* harmony export */   \"BasePlatform\": function() { return /* binding */ BasePlatform; },\n/* harmony export */   \"BasicPlatform\": function() { return /* binding */ BasicPlatform; },\n/* harmony export */   \"BubbleController\": function() { return /* binding */ BubbleController; },\n/* harmony export */   \"CategoryScale\": function() { return /* binding */ CategoryScale; },\n/* harmony export */   \"Chart\": function() { return /* binding */ Chart; },\n/* harmony export */   \"DatasetController\": function() { return /* binding */ DatasetController; },\n/* harmony export */   \"Decimation\": function() { return /* binding */ plugin_decimation; },\n/* harmony export */   \"DomPlatform\": function() { return /* binding */ DomPlatform; },\n/* harmony export */   \"DoughnutController\": function() { return /* binding */ DoughnutController; },\n/* harmony export */   \"Element\": function() { return /* binding */ Element; },\n/* harmony export */   \"Filler\": function() { return /* binding */ index; },\n/* harmony export */   \"Interaction\": function() { return /* binding */ Interaction; },\n/* harmony export */   \"Legend\": function() { return /* binding */ plugin_legend; },\n/* harmony export */   \"LineController\": function() { return /* binding */ LineController; },\n/* harmony export */   \"LineElement\": function() { return /* binding */ LineElement; },\n/* harmony export */   \"LinearScale\": function() { return /* binding */ LinearScale; },\n/* harmony export */   \"LogarithmicScale\": function() { return /* binding */ LogarithmicScale; },\n/* harmony export */   \"PieController\": function() { return /* binding */ PieController; },\n/* harmony export */   \"PointElement\": function() { return /* binding */ PointElement; },\n/* harmony export */   \"PolarAreaController\": function() { return /* binding */ PolarAreaController; },\n/* harmony export */   \"RadarController\": function() { return /* binding */ RadarController; },\n/* harmony export */   \"RadialLinearScale\": function() { return /* binding */ RadialLinearScale; },\n/* harmony export */   \"Scale\": function() { return /* binding */ Scale; },\n/* harmony export */   \"ScatterController\": function() { return /* binding */ ScatterController; },\n/* harmony export */   \"SubTitle\": function() { return /* binding */ plugin_subtitle; },\n/* harmony export */   \"Ticks\": function() { return /* binding */ Ticks; },\n/* harmony export */   \"TimeScale\": function() { return /* binding */ TimeScale; },\n/* harmony export */   \"TimeSeriesScale\": function() { return /* binding */ TimeSeriesScale; },\n/* harmony export */   \"Title\": function() { return /* binding */ plugin_title; },\n/* harmony export */   \"Tooltip\": function() { return /* binding */ plugin_tooltip; },\n/* harmony export */   \"_adapters\": function() { return /* binding */ adapters; },\n/* harmony export */   \"_detectPlatform\": function() { return /* binding */ _detectPlatform; },\n/* harmony export */   \"animator\": function() { return /* binding */ animator; },\n/* harmony export */   \"controllers\": function() { return /* binding */ controllers; },\n/* harmony export */   \"defaults\": function() { return /* reexport safe */ _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d; },\n/* harmony export */   \"elements\": function() { return /* binding */ elements; },\n/* harmony export */   \"layouts\": function() { return /* binding */ layouts; },\n/* harmony export */   \"plugins\": function() { return /* binding */ plugins; },\n/* harmony export */   \"registerables\": function() { return /* binding */ registerables; },\n/* harmony export */   \"registry\": function() { return /* binding */ registry; },\n/* harmony export */   \"scales\": function() { return /* binding */ scales; }\n/* harmony export */ });\n/* harmony import */ var _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/helpers.segment.mjs */ \"./node_modules/chart.js/dist/chunks/helpers.segment.mjs\");\n/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\n\n\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n\n    this._running = true;\n    this._request = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.r.call(window, () => {\n      this._update();\n\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n\n        this._notify(chart, anims, date, 'complete');\n\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n\n    return anims;\n  }\n\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n\n    this._getAnims(chart).items.push(...items);\n  }\n\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  start(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims) {\n      return;\n    }\n\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  stop(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.items.length) {\n      return;\n    }\n\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n\n    anims.items = [];\n\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n\n}\n\nvar animator = new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n\n  color(from, to, factor) {\n    const c0 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(from || transparent);\n    const c1 = c0.valid && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n\n};\n\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.to, to, currentValue, cfg.from]);\n    const from = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.e[cfg.easing] || _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.e.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.to, to, currentValue, cfg.from]);\n      this._from = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n\n    if (!this._active) {\n      this._target[prop] = to;\n\n      this._notify(true);\n\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n\n}\n\nconst numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('animation', {\n  delay: undefined,\n  duration: 1000,\n  easing: 'easeOutQuart',\n  fn: undefined,\n  from: undefined,\n  loop: undefined,\n  to: undefined,\n  type: undefined\n});\nconst animationOptions = Object.keys(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.animation);\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('animation', {\n  _fallback: false,\n  _indexable: false,\n  _scriptable: name => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n});\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('animations', {\n  colors: {\n    type: 'color',\n    properties: colors\n  },\n  numbers: {\n    type: 'number',\n    properties: numbers\n  }\n});\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('animations', {\n  _fallback: 'animation'\n});\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('transitions', {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        duration: 0\n      }\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        easing: 'linear',\n        fn: v => v | 0\n      }\n    }\n  }\n});\n\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(config)) {\n      return;\n    }\n\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n\n      if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(cfg)) {\n        return;\n      }\n\n      const resolved = {};\n\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n\n    return animations;\n  }\n\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n\n    return animations;\n  }\n\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n\n  let options = target.options;\n\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n\n      break;\n    }\n\n    otherValue = stack.values[datasetIndex];\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(otherValue) && (singleMode || value === 0 || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(value) === (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(otherValue))) {\n      value += otherValue;\n    }\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\n\nfunction createDataContext(parent, index, element) {\n  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n\n    delete stacks[axis][datasetIndex];\n  }\n}\n\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\n\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\n\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\n\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  _destroy() {\n    const meta = this._cachedMeta;\n\n    if (this._data) {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(this._data, this);\n    }\n\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n\n      if (data && Object.isExtensible(data)) {\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(data, this);\n      }\n\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    this._resyncElements(resetNewElements);\n\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n\n          prev = cur;\n        }\n      }\n\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(item, xAxisKey), index),\n        y: yScale.parse((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(item, yAxisKey), index)\n      };\n    }\n\n    return parsed;\n  }\n\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n\n    const otherScale = this._getOtherScale(scale);\n\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n\n      if (sorted) {\n        break;\n      }\n    }\n\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(value)) {\n        values.push(value);\n      }\n    }\n\n    return values;\n  }\n\n  getMaxOverflow() {\n    return false;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  update(mode) {}\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n\n      if (element.hidden) {\n        continue;\n      }\n\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(index);\n\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.elements[elementType]);\n\n    const context = () => this.getContext(index, active);\n\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n\n    if (cached) {\n      return cached;\n    }\n\n    let options;\n\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n\n    const animations = new Animations(chart, options && options.animations);\n\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = arr => {\n      arr.length += count;\n\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {}\n\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n\n    meta.data.splice(start, count);\n  }\n\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n\n    const newCount = arguments.length - 2;\n\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n\n}\n\nDatasetController.defaults = {};\nDatasetController.prototype.datasetElementType = null;\nDatasetController.prototype.dataElementType = null;\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n\n    scale._cache.$bar = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__._)(values.sort((a, b) => a - b));\n  }\n\n  return scale._cache.$bar;\n}\n\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\n\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(size);\n  }\n\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {\n  inflateAmount\n}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\n\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(obj, iAxisKey), i);\n      parsed.push(parseValue((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(obj, vAxisKey), item, vScale, i));\n    }\n\n    return parsed;\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  getMaxOverflow() {\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n\n    const ruler = this._getRuler();\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n\n      if (value !== 0 && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(value) !== (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(custom.barEnd)) {\n        start = 0;\n      }\n\n      start += value;\n    }\n\n    const startValue = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(options.maxBarThickness, Infinity);\n    let center, size;\n\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n};\n\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n\n    return max > 0 && max;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: meta.label,\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n\n    const radius = values.radius;\n\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n\n    values.radius += (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(parsed && parsed._custom, radius);\n    return values;\n  }\n\n}\n\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        }\n\n      }\n    }\n  }\n};\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (circumference < _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n\n    const calcMax = (angle, a, b) => (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n\n    const calcMin = (angle, a, b) => (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, startY, endY);\n    const minX = calcMin(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P, startX, endX);\n    const minY = calcMin(_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\n\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n\n        getter = i => +(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(data[i], key);\n      }\n\n      let i, ilen;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  _getRotation() {\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.rotation - 90);\n  }\n\n  _getCircumference() {\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.circumference);\n  }\n\n  _getRotationExtents() {\n    let min = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T;\n    let max = -_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n\n        const rotation = controller._getRotation();\n\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(this.options.cutout, maxSize), 1);\n\n    const chartWeight = this._getRingWeight(this.index);\n\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n\n    const circumference = this._getCircumference();\n\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n\n    return this.calculateCircumference(meta._parsed[i] * circumference / _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    let startAngle = this._getRotation();\n\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n\n    if (total > 0 && !isNaN(value)) {\n      return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T * (Math.abs(value) / total);\n    }\n\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n\n    return max;\n  }\n\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  _getRingWeight(datasetIndex) {\n    return Math.max((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n\n}\n\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n};\nDoughnutController.descriptors = {\n  _scriptable: name => name !== 'spacing',\n  _indexable: name => name !== 'spacing'\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n\n      },\n\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n\n        label(tooltipItem) {\n          let dataLabel = tooltipItem.label;\n          const value = ': ' + tooltipItem.formattedValue;\n\n          if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(dataLabel)) {\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n\n          return dataLabel;\n        }\n\n      }\n    }\n  }\n};\n\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n\n}\n\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n};\n\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.y.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n\n}\n\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n\n      },\n\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n\n        label(context) {\n          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n        }\n\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\n\nclass PieController extends DoughnutController {}\n\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\n\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.y.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n}\n\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n};\n\nclass Element {\n  constructor() {\n    this.x = undefined;\n    this.y = undefined;\n    this.active = false;\n    this.options = undefined;\n    this.$animations = undefined;\n  }\n\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  hasValue() {\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(this.x) && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(this.y);\n  }\n\n  getProps(props, final) {\n    const anims = this.$animations;\n\n    if (!final || !anims) {\n      return this;\n    }\n\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n\n}\n\nElement.defaults = {};\nElement.defaultRoutes = undefined;\nconst formatters = {\n  values(value) {\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(value) ? value : '' + value;\n  },\n\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue;\n\n    if (ticks.length > 1) {\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n\n      delta = calculateDelta(tickValue, ticks);\n    }\n\n    const logDelta = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(Math.abs(delta));\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n    const options = {\n      notation,\n      minimumFractionDigits: numDecimal,\n      maximumFractionDigits: numDecimal\n    };\n    Object.assign(options, this.options.ticks.format);\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(tickValue, locale, options);\n  },\n\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n\n    const remain = tickValue / Math.pow(10, Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(tickValue)));\n\n    if (remain === 1 || remain === 2 || remain === 5) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n\n    return '';\n  }\n\n};\n\nfunction calculateDelta(tickValue, ticks) {\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    delta = tickValue - Math.floor(tickValue);\n  }\n\n  return delta;\n}\n\nvar Ticks = {\n  formatters\n};\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('scale', {\n  display: true,\n  offset: false,\n  reverse: false,\n  beginAtZero: false,\n  bounds: 'ticks',\n  grace: 0,\n  grid: {\n    display: true,\n    lineWidth: 1,\n    drawBorder: true,\n    drawOnChartArea: true,\n    drawTicks: true,\n    tickLength: 8,\n    tickWidth: (_ctx, options) => options.lineWidth,\n    tickColor: (_ctx, options) => options.color,\n    offset: false,\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderWidth: 1\n  },\n  title: {\n    display: false,\n    text: '',\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: false,\n    textStrokeWidth: 0,\n    textStrokeColor: '',\n    padding: 3,\n    display: true,\n    autoSkip: true,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: Ticks.formatters.values,\n    minor: {},\n    major: {},\n    align: 'center',\n    crossAlign: 'near',\n    showLabelBackdrop: false,\n    backdropColor: 'rgba(255, 255, 255, 0.75)',\n    backdropPadding: 2\n  }\n});\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.ticks', 'color', '', 'color');\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.grid', 'color', '', 'borderColor');\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.grid', 'borderColor', '', 'borderColor');\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.title', 'color', '', 'color');\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('scale', {\n  _fallback: false,\n  _scriptable: name => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n  _indexable: name => name !== 'borderDash' && name !== 'tickBorderDash'\n});\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('scales', {\n  _fallback: 'scale'\n});\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe('scale.ticks', {\n  _scriptable: name => name !== 'backdropPadding' && name !== 'callback',\n  _indexable: name => name !== 'backdropPadding'\n});\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n\n    skip(ticks, newTicks, spacing, last, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n\n  const tickLength = scale._tickSize();\n\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.A)(evenMajorSpacing);\n\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n\n  return Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}\n\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(majorStart, 0);\n  const end = Math.min((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n\n  return diff;\n}\n\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n\n  return result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n\n    lineValue += validIndex < index ? offset : -offset;\n\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n\n  return lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.font, fallback);\n  const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(options.padding);\n  const lines = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.R)(align);\n\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, left, right);\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n\n    maxWidth = right - left;\n  } else {\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n\n    titleY = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, bottom, top);\n    rotation = position === 'left' ? -_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H : _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H;\n  }\n\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\n\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  parse(raw, index) {\n    return raw;\n  }\n\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_userMin, _suggestedMin),\n      max: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(_userMax, _suggestedMax),\n      minDefined: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_userMin),\n      maxDefined: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(_userMax)\n    };\n  }\n\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(min, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(max, min)),\n      max: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(max, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(min, max))\n    };\n  }\n\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  getTicks() {\n    return this.ticks;\n  }\n\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  beforeUpdate() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeUpdate, [this]);\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.D)(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterUpdate, [this]);\n  }\n\n  beforeSetDimensions() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeSetDimensions, [this]);\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n\n  afterSetDimensions() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options[name], [this]);\n  }\n\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n\n  determineDataLimits() {}\n\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n\n  buildTicks() {\n    return [];\n  }\n\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeTickToLabelConversion, [this]);\n  }\n\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n\n  afterTickToLabelConversion() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  beforeCalculateLabelRotation() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeCalculateLabelRotation, [this]);\n  }\n\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    const maxWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.F)(Math.min(Math.asin((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n\n  afterCalculateLabelRotation() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterCalculateLabelRotation, [this]);\n  }\n\n  afterAutoSkip() {}\n\n  beforeFit() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.beforeFit, [this]);\n  }\n\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n\n    const display = this._isVisible();\n\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.afterFit, [this]);\n  }\n\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n\n    return labelSizes;\n  }\n\n  _computeLabelSizes(ticks, length) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n\n      if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(label) && !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(label)) {\n        width = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n\n          if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(nestedLabel) && !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(nestedLabel)) {\n            width = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.G)(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n\n  getLabelForValue(value) {\n    return value;\n  }\n\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n\n  getValueForPixel(pixel) {}\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.I)(this._alignToPixels ? (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(this.chart, pixel, 0) : pixel);\n  }\n\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n    const axisHalfWidth = axisWidth / 2;\n\n    const alignBorderValue = function (pixel) {\n      return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, pixel, axisWidth);\n    };\n\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n\n    for (i = 0; i < ticksLength; i += step) {\n      const optsAtIndex = grid.setContext(this.getContext(i));\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndex.borderDash || [];\n      const borderDashOffset = optsAtIndex.borderDashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n\n        if (mirror) {\n          textOffset *= -1;\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = y + textOffset - labelPadding.top;\n        let left = x - labelPadding.left;\n\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n\n          case 'bottom':\n            top -= height;\n            break;\n        }\n\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n\n          case 'right':\n            left -= width;\n            break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n\n      items.push({\n        rotation,\n        label,\n        font,\n        color,\n        strokeColor,\n        strokeWidth,\n        textOffset,\n        textAlign: tickTextAlign,\n        textBaseline,\n        translation: [x, y],\n        backdrop\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n\n    const labelSizes = this._getLabelSizes();\n\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {\n      textAlign,\n      x\n    };\n  }\n\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n\n    return 0;\n  }\n\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        grid\n      }\n    } = this;\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n\n    if (!axisWidth) {\n      return;\n    }\n\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.J)(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n\n    ctx.save();\n    ctx.lineWidth = borderOpts.borderWidth;\n    ctx.strokeStyle = borderOpts.borderColor;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n\n    if (area) {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.L)(ctx, area);\n    }\n\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n\n    let i, ilen;\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      const item = items[i];\n      const tickFont = item.font;\n      const label = item.label;\n\n      if (item.backdrop) {\n        ctx.fillStyle = item.backdrop.color;\n        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n      }\n\n      let y = item.textOffset;\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, label, 0, y, tickFont, item);\n    }\n\n    if (area) {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.N)(ctx);\n    }\n  }\n\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(title.font);\n    const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {\n      offset += padding.bottom;\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(opts.grid && opts.grid.z, -1);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: gz + 1,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(opts.font);\n  }\n\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n\n    if (this.override) {\n      _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  get(id) {\n    return this.items[id];\n  }\n\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d[scope]) {\n      delete _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d[scope][id];\n\n      if (this.override) {\n        delete _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[id];\n      }\n    }\n  }\n\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.V)(Object.create(null), [parentScope ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.get(parentScope) : {}, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.get(scope), item.defaults]);\n  _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  _exec(method, registry, component) {\n    const camelMethod = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.W)(method);\n\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(component['before' + camelMethod], [], component);\n    registry[method](component);\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(component['after' + camelMethod], [], component);\n  }\n\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n\n    return this.plugins;\n  }\n\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n\n    return item;\n  }\n\n}\n\nvar registry = new Registry();\n\nclass ScatterController extends DatasetController {\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.q)(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.w)(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n}\n\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n\n        label(item) {\n          return '(' + item.label + ', ' + item.formattedValue + ')';\n        }\n\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PolarAreaController: PolarAreaController,\n  PieController: PieController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\nclass DateAdapter {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  init(chartOptions) {}\n\n  formats() {\n    return abstract();\n  }\n\n  parse(value, format) {\n    return abstract();\n  }\n\n  format(timestamp, format) {\n    return abstract();\n  }\n\n  add(timestamp, amount, unit) {\n    return abstract();\n  }\n\n  diff(a, b, unit) {\n    return abstract();\n  }\n\n  startOf(timestamp, unit, weekday) {\n    return abstract();\n  }\n\n  endOf(timestamp, unit) {\n    return abstract();\n  }\n\n}\n\nDateAdapter.override = function (members) {\n  Object.assign(DateAdapter.prototype, members);\n};\n\nvar adapters = {\n  _date: DateAdapter\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Y : _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z;\n\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\n\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.$)(element, chart.chartArea, 0)) {\n      return;\n    }\n\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a0)(element, {\n      x: position.x,\n      y: position.y\n    });\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n\n  return items;\n}\n\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n\n    dataset(chart, e, options, useFinalPosition) {\n      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n\n      return items;\n    },\n\n    point(chart, e, options, useFinalPosition) {\n      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    nearest(chart, e, options, useFinalPosition) {\n      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    x(chart, e, options, useFinalPosition) {\n      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    y(chart, e, options, useFinalPosition) {\n      const position = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n\n  return stacks;\n}\n\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(stack.start)) {\n        y = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(stack.start)) {\n        x = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.set('layout', {\n  autoPadding: true,\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n\n  releaseContext(context) {\n    return false;\n  }\n\n  addEventListener(chart, type, listener) {}\n\n  removeEventListener(chart, type, listener) {}\n\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  isAttached(canvas) {\n    return true;\n  }\n\n  updateConfig(config) {}\n\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a3)(canvas, 'width');\n\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a3)(canvas, 'height');\n\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\nconst eventListenerOptions = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a5 ? {\n  passive: true\n} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.X)(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n\n  const container = canvas && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a2)(canvas);\n\n  if (!container) {\n    return;\n  }\n\n  const resize = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a4)((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a4)(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart, args => {\n    const event = args[0];\n    return [event, event.offsetX, event.offsetY];\n  });\n  addListener(canvas, type, proxy);\n  return proxy;\n}\n\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  releaseContext(context) {\n    const canvas = context.canvas;\n\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a1)(canvas, width, height, aspectRatio);\n  }\n\n  isAttached(canvas) {\n    const container = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a2)(canvas);\n\n    return !!(container && container.isConnected);\n  }\n\n}\n\nfunction _detectPlatform(canvas) {\n  if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a6)() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n\n  return DomPlatform;\n}\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n\n      this._notify(this._init, chart, 'uninstall');\n    }\n\n    return result;\n  }\n\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n\n}\n\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {\n    plugins,\n    localIds\n  };\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n\n  if (options === true) {\n    return {};\n  }\n\n  return options;\n}\n\nfunction createDescriptors(chart, {\n  plugins,\n  localIds\n}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n\n    if (opts === null) {\n      continue;\n    }\n\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {\n  plugin,\n  local\n}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y') {\n    return id;\n  }\n\n  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const firstIDs = Object.create(null);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n\n    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    firstIDs[axis] = firstIDs[axis] || id;\n    scales[id] = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ac)(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ac)(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ac)(scale, [_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.scales[scale.type], _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.scale]);\n  });\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(obj, key);\n\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n\n    this._resolverCache.clear();\n  }\n\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n\n    let cache = _scopeCache.get(mainScope);\n\n    if (!cache || resetCache) {\n      cache = new Map();\n\n      _scopeCache.set(mainScope, cache);\n    }\n\n    return cache;\n  }\n\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n\n    const cache = this._cachedScopes(mainScope, resetCache);\n\n    const cached = cache.get(keyLists);\n\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d, key));\n      keys.forEach(key => addIfFound(scopes, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a7, key));\n    });\n    const array = Array.from(scopes);\n\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n\n    return array;\n  }\n\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U[type] || {}, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type] || {}, {\n      type\n    }, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a7];\n  }\n\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a8)(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a9)(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n\n    return result;\n  }\n\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(context) ? (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a9)(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n\n  if (!cached) {\n    const resolver = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aa)(scopes, prefixes);\n\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n\n  return cached;\n}\n\nconst hasFunction = value => (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a8)(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ab)(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n\n    if (scriptable && ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a8)(value) || hasFunction(value)) || indexable && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar version = \"3.9.1\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\n\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\n\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\nfunction getCanvas(item) {\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a6)() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n\n  return item;\n}\n\nconst instances = {};\n\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const intKey = +key;\n\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n\n  if (isClick) {\n    return lastEvent;\n  }\n\n  return e;\n}\n\nclass Chart {\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ad)();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ae)(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n\n    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(aspectRatio)) {\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.af)(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n\n  clear() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ag)(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n\n    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.af)(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n\n      metasets.splice(numData, numMeta - numData);\n    }\n\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n\n        meta = this.getDatasetMeta(i);\n      }\n\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type];\n        Object.assign(ControllerClass.prototype, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n\n    return newControllers;\n  }\n\n  _resetElements() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  reset() {\n    this._resetElements();\n\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n\n    this._checkEventBindings();\n\n    this._updateHiddenIndices();\n\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n\n    this._updateLayout(minPadding);\n\n    if (!animsDisabled) {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(newControllers, controller => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    const {\n      _active,\n      _lastEvent\n    } = this;\n\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  _updateScales() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ah)(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n\n    const changeSet = makeSet(0);\n\n    for (let i = 1; i < datasetCount; i++) {\n      if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ah)(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n\n      if (box.configure) {\n        box.configure();\n      }\n\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a8)(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n\n  draw() {\n    let i;\n\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n\n      this._resize(width, height);\n\n      this._resizeBeforeDraw = null;\n    }\n\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const layers = this._layers;\n\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.L)(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.N)(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  isPointInArea(point) {\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.$)(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n\n    this._stop();\n\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ag)(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    this.notifyPlugins('destroy');\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  bindEvents() {\n    this.bindUserEvents();\n\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n\n      this._eventHandler(e);\n    };\n\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.options.events, type => _add(type, listener));\n  }\n\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached;\n\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      this._stop();\n\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  unbindEvents() {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ai)(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n\n    const isClick = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aj)(e);\n\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      this._lastEvent = null;\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ai)(active, lastActive);\n\n    if (changed || replay) {\n      this._active = active;\n\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n\n}\n\nconst invalidatePlugins = () => (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(Chart.instances, chart => chart._plugins.invalidate());\n\nconst enumerable = true;\nObject.defineProperties(Chart, {\n  defaults: {\n    enumerable,\n    value: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d\n  },\n  instances: {\n    enumerable,\n    value: instances\n  },\n  overrides: {\n    enumerable,\n    value: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.U\n  },\n  registry: {\n    enumerable,\n    value: registry\n  },\n  version: {\n    enumerable,\n    value: version\n  },\n  getChart: {\n    enumerable,\n    value: getChart\n  },\n  register: {\n    enumerable,\n    value: (...items) => {\n      registry.add(...items);\n      invalidatePlugins();\n    }\n  },\n  unregister: {\n    enumerable,\n    value: (...items) => {\n      registry.remove(...items);\n      invalidatePlugins();\n    }\n  }\n});\n\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, startAngle - _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H);\n  }\n\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.al)(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(o.innerStart, 0, innerLimit),\n    innerEnd: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(o.innerEnd, 0, innerLimit)\n  };\n}\n\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n\n  if (circular) {\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H);\n    }\n\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, innerEndAdjustedAngle + Math.PI);\n    }\n\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, startAngle + innerStart / innerRadius, true);\n\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H);\n    }\n\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, startAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + circumference % _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T;\n\n      if (circumference % _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T === 0) {\n        endAngle += _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T;\n      }\n    }\n  }\n\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawFullCircleBorders(ctx, element, inner) {\n  const {\n    x,\n    y,\n    startAngle,\n    pixelMargin,\n    fullCircles\n  } = element;\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n  const innerRadius = element.innerRadius + pixelMargin;\n  let i;\n\n  if (inner) {\n    clipArc(ctx, element, startAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\n  }\n\n  ctx.beginPath();\n  ctx.arc(x, y, innerRadius, startAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T, startAngle, true);\n\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\n\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n}\n\nfunction drawBorder(ctx, element, offset, spacing, endAngle, circular) {\n  const {\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle\n  } = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  if (element.fullCircles) {\n    drawFullCircleBorders(ctx, element, inner);\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.stroke();\n}\n\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a0)(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n\n    const _circumference = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(circumference, endAngle - startAngle);\n\n    const betweenAngles = _circumference >= _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(angle, startAngle, endAngle);\n\n    const withinRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return betweenAngles && withinRadius;\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 2;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T ? Math.floor(circumference / _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n    let radiusOffset = 0;\n\n    if (offset) {\n      radiusOffset = offset / 2;\n      const halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n\n      if (this.circumference >= _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P) {\n        radiusOffset = offset;\n      }\n    }\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    const endAngle = drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, endAngle, circular);\n    ctx.restore();\n  }\n\n}\n\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.as;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.at;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n\n    lastY = y;\n  }\n\n  drawX();\n}\n\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ap;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aq;\n  }\n\n  return _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ar;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n\n  if (!path) {\n    path = line._path = new Path2D();\n\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.am)(this._points, options, chartArea, loop, indexAxis);\n\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.an)(this, this.options.segment));\n  }\n\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n\n    const segments = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ao)(this, {\n      property,\n      start: value,\n      end: value\n    });\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n\n    const _interpolate = _getInterpolationMethod(options);\n\n    let i, ilen;\n\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n\n    return result.length === 1 ? result[0] : result;\n  }\n\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  path(ctx, start, count) {\n    const segments = this.segments;\n\n    const segmentMethod = _getSegmentMethod(this);\n\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n\n    return !!loop;\n  }\n\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n\n}\n\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: name => name !== 'borderDash' && name !== 'fill'\n};\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\n\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx, area) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.$)(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    return options.radius + options.hitRadius;\n  }\n\n}\n\nPointElement.id = 'point';\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aw)(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(x, bounds.left, bounds.right)) && (skipY || (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av : addNormalRectPath;\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n\n}\n\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  LineElement: LineElement,\n  PointElement: PointElement,\n  BarElement: BarElement\n});\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n\n      if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(minIndex) && !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      value: data\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z)(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n\n  if (maxDefined) {\n    count = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z)(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {\n    start,\n    count\n  };\n}\n\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.a)([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n\n      if (chart.options.parsing) {\n        return;\n      }\n\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n\n      let decimated;\n\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    const targetSegments = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ao)(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n\n      const fillSources = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ay)(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n\n  return parts;\n}\n\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(start);\n    end = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(end);\n  }\n\n  return {\n    property,\n    start,\n    end\n  };\n}\n\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({\n    start,\n    end\n  }) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\n\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n\n  return pixel;\n}\n\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n\n  return value;\n}\n\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\n\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n\n    if (meta.index === index) {\n      break;\n    }\n\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n\n  return below;\n}\n\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n\n    if (!point || first && last) {\n      continue;\n    }\n\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n\n      if (!last) {\n        break;\n      }\n    }\n  }\n\n  points.push(...postponed);\n}\n\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n\n  return {\n    first,\n    last,\n    point\n  };\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n\n}\n\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n\n  return computeLinearBoundary(source);\n}\n\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n\n  const pixel = _getTargetPixel(fill, scale);\n\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n\n  const value = _getTargetValue(fill, scale, start);\n\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n\n  if (target && line.points.length) {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.L)(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.N)(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n\n  const segments = _segments(line, target, property);\n\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(labelOpts.font);\n    const fontSize = labelFont.size;\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(rtl, this.left, this.width);\n\n    if (this.isHorizontal()) {\n      let row = 0;\n\n      let left = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.left + padding, this.right - this.lineWidths[row]);\n\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n\n      let top = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.L)(ctx, this);\n\n      this._draw();\n\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.N)(ctx);\n    }\n  }\n\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.color;\n    const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(opts.rtl, this.left, this.width);\n    const labelFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(labelOpts.font);\n    const {\n      color: fontColor,\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      ctx.save();\n      const lineWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineWidth, 1);\n      ctx.fillStyle = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aE)(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(legendItem.borderRadius);\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av)(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function (x, y, legendItem) {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    const isHorizontal = this.isHorizontal();\n\n    const titleHeight = this._computeTitleHeight();\n\n    if (isHorizontal) {\n      cursor = {\n        x: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aB)(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor || fontColor;\n      ctx.fillStyle = legendItem.fontColor || fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aC)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aD)(this.ctx, opts.textDirection);\n  }\n\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(titleOpts.font);\n    const titlePadding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    const x = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(position, left, left + maxWidth);\n\n    ctx.textAlign = rtlHelper.textAlign((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.R)(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(titleOpts.font);\n    const titlePadding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(x, this.left, this.right) && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(x, hitBox.left, hitBox.left + hitBox.width) && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ak)(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  handleEvent(e) {\n    const opts = this.options;\n\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n\n      if (previous && !sameItem) {\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n\n  return false;\n}\n\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: 0,\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(opts.text) ? opts.text.length : 1;\n    this._padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(opts.padding);\n\n    const textSize = lineCount * (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, bottom, top);\n        rotation = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.S)(align, top, bottom);\n        rotation = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P * 0.5;\n      }\n\n      maxWidth = bottom - top;\n    }\n\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.R)(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aG)(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n\n};\n\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n\n  return str;\n}\n\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.bodyFont);\n  const titleFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.titleFont);\n  const footerFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  let widthPadding = 0;\n\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n  ctx.font = titleFont.string;\n  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(body, bodyItem => {\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.before, maxLineWidth);\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.lines, maxLineWidth);\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\n\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n\n  return y;\n}\n\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(x, 0, chart.width - size.width),\n    y: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart || config._chart;\n    this._chart = this.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = callbacks.beforeTitle.apply(this, [context]);\n    const title = callbacks.title.apply(this, [context]);\n    const afterTitle = callbacks.afterTitle.apply(this, [context]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n  }\n\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));\n      pushOrConcat(bodyItem.lines, scoped.label.call(this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n  }\n\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);\n    const footer = callbacks.footer.apply(this, [tooltipItems]);\n    const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(scoped.labelColor.call(this, context));\n      labelPointStyles.push(scoped.labelPointStyle.call(this, context));\n      labelTextColors.push(scoped.labelTextColor.call(this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n\n      y3 = y1;\n    }\n\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.au)(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(labelColors.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av)(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av)(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(bodyItem.after, fillLineOfText);\n    }\n\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Q)(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aA)(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n\n      if (!position) {\n        return;\n      }\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aB)(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aD)(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ai)(lastActive, active);\n\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    const positionChanged = this._positionChanged(active, e);\n\n    const changed = replay || !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ai)(active, lastActive) || positionChanged;\n\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n\n}\n\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,\n\n      title(tooltipItems) {\n        if (tooltipItems.length > 0) {\n          const item = tooltipItems[0];\n          const labels = item.chart.data.labels;\n          const labelCount = labels ? labels.length : 0;\n\n          if (this && this.options && this.options.mode === 'dataset') {\n            return item.dataset.label || '';\n          } else if (item.label) {\n            return item.label;\n          } else if (labelCount > 0 && item.dataIndex < labelCount) {\n            return labels[item.dataIndex];\n          }\n        }\n\n        return '';\n      },\n\n      afterTitle: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,\n      beforeBody: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,\n      beforeLabel: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,\n\n      label(tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n\n        let label = tooltipItem.dataset.label || '';\n\n        if (label) {\n          label += ': ';\n        }\n\n        const value = tooltipItem.formattedValue;\n\n        if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(value)) {\n          label += value;\n        }\n\n        return label;\n      },\n\n      labelColor(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          borderColor: options.borderColor,\n          backgroundColor: options.backgroundColor,\n          borderWidth: options.borderWidth,\n          borderDash: options.borderDash,\n          borderDashOffset: options.borderDashOffset,\n          borderRadius: 0\n        };\n      },\n\n      labelTextColor() {\n        return this.options.bodyColor;\n      },\n\n      labelPointStyle(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          pointStyle: options.pointStyle,\n          rotation: options.rotation\n        };\n      },\n\n      afterLabel: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,\n      afterBody: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,\n      beforeFooter: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,\n      footer: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF,\n      afterFooter: _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aF\n    }\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(Math.round(index), 0, max);\n\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n\n    if (added.length) {\n      const labels = this.getLabels();\n\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n\n      this._addedLabels = [];\n    }\n\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(raw)) {\n      return null;\n    }\n\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    const labels = this.getLabels();\n\n    if (value >= 0 && value < labels.length) {\n      return labels[value];\n    }\n\n    return value;\n  }\n\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n\n}\n\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: CategoryScale.prototype.getLabelForValue\n  }\n};\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(min);\n  const maxDefined = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(max);\n  const countDefined = !(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aI)((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n  if (numSpaces > maxSpaces) {\n    spacing = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aI)(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aJ)((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aK)(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  const decimalPlaces = Math.max((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aL)(spacing), (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aL)(niceMin));\n  factor = Math.pow(10, (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n\n      if (niceMin < min) {\n        j++;\n      }\n\n      if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aK)(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({\n      value: Math.round((niceMin + j * spacing) * factor) / factor\n    });\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aK)(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {\n  horizontal,\n  minRotation\n}) {\n  const rad = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(raw)) {\n      return null;\n    }\n\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (beginAtZero) {\n      const minSign = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(min);\n      const maxSign = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = 1;\n\n      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {\n        offset = Math.abs(max * 0.05);\n      }\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n\n    if (opts.bounds === 'ticks') {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aH)(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n}\n\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(min) ? min : 0;\n    this.max = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n\n    const tickFont = this._resolveTickFontOptions(0);\n\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n\n}\n\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(tickVal)));\n  return remain === 1;\n}\n\nfunction generateTicks(generationOptions, dataRange) {\n  const endExp = Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(dataRange.max));\n  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n  const ticks = [];\n  let tickVal = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(generationOptions.min, Math.pow(10, Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(dataRange.min))));\n  let exp = Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(tickVal));\n  let significand = Math.floor(tickVal / Math.pow(10, exp));\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n  do {\n    ticks.push({\n      value: tickVal,\n      major: isMajor(tickVal)\n    });\n    ++significand;\n\n    if (significand === 10) {\n      significand = 1;\n      ++exp;\n      precision = exp >= 0 ? 1 : precision;\n    }\n\n    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n  } while (exp < endExp || exp === endExp && significand < endSignificand);\n\n  const lastTick = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.B)(generationOptions.max, tickVal);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(tickVal)\n  });\n  return ticks;\n}\n\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(min) ? Math.max(0, min) : null;\n    this.max = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    const exp = (v, m) => Math.pow(10, Math.floor((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(v)) + m);\n\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(exp(min, -1));\n        setMax(exp(max, +1));\n      }\n    }\n\n    if (min <= 0) {\n      setMin(exp(max, -1));\n    }\n\n    if (max <= 0) {\n      setMax(exp(min, +1));\n    }\n\n    if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {\n      setMin(exp(min, -1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    if (opts.bounds === 'ticks') {\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aH)(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return value === undefined ? '0' : (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(start);\n    this._valueRange = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(this.max) - (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n\n    return this.getPixelForDecimal(value === this.min ? 0 : ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.z)(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n\n}\n\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(tickOpts.backdropPadding);\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(tickOpts.font && tickOpts.font.size, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.d.font.size) + padding.height;\n  }\n\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(label) ? label : [label];\n  return {\n    w: (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aM)(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(scale.getIndexAngle(i) + additionalAngle);\n\n    const angle = Math.round((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.F)(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.P / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.F)((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(pointLabelPosition.angle + _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n\n  return y;\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign,\n      left,\n      top,\n      right,\n      bottom\n    } = scale._pointLabelItems[i];\n    const {\n      backdropColor\n    } = optsAtIndex;\n\n    if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(backdropColor)) {\n      const borderRadius = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ax)(optsAtIndex.borderRadius);\n      const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.av)(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(gridLineOpts.borderDash);\n  ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    const padding = this._padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(min) && !isNaN(min) ? min : 0;\n    this.max = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.T / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.az)(index * angleMultiplier + (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(value)) {\n      return NaN;\n    }\n\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - _chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.H + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const optsAtIndex = grid.setContext(this.getContext(index - 1));\n          drawRadiusLine(this, optsAtIndex, offset, labelCount);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  drawBorder() {}\n\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.O)(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.K)(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n\n      (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.M)(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color\n      });\n    });\n    ctx.restore();\n  }\n\n  drawTitle() {}\n\n}\n\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n\n    callback(label) {\n      return label;\n    },\n\n    padding: 5,\n    centerPointLabels: false\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n  return a - b;\n}\n\nfunction parse(scale, input) {\n  if ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  if (!(0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && ((0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aO)(timestamps, time);\n\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n\n  return ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.ac)(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n\n    return {\n      min,\n      max\n    };\n  }\n\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.aN)(timestamps, min, max);\n\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  initOffsets(timestamps) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(start, 0, limit);\n    end = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.E)(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(timeOpts.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.x)(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n\n    const formatter = options.ticks.callback;\n    return formatter ? (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.C)(formatter, [label, index, ticks], this) : label;\n  }\n\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.t)(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n\n    const size = this._getLabelSize(exampleLabel);\n\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return this._cache.data = this.normalize(timestamps);\n  }\n\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n\n  normalize(values) {\n    return (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__._)(values.sort(sorter));\n  }\n\n}\n\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    major: {\n      enabled: false\n    }\n  }\n};\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z)(table, 'pos', val));\n    }\n\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = (0,_chunks_helpers_segment_mjs__WEBPACK_IMPORTED_MODULE_0__.Z)(table, 'time', val));\n    }\n\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  }\n\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n\n}\n\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/chart.js/dist/chart.mjs\n"));

/***/ }),

/***/ "./node_modules/chart.js/dist/chunks/helpers.segment.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/chart.js/dist/chunks/helpers.segment.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$\": function() { return /* binding */ _isPointInArea; },\n/* harmony export */   \"A\": function() { return /* binding */ _factorize; },\n/* harmony export */   \"B\": function() { return /* binding */ finiteOrDefault; },\n/* harmony export */   \"C\": function() { return /* binding */ callback; },\n/* harmony export */   \"D\": function() { return /* binding */ _addGrace; },\n/* harmony export */   \"E\": function() { return /* binding */ _limitValue; },\n/* harmony export */   \"F\": function() { return /* binding */ toDegrees; },\n/* harmony export */   \"G\": function() { return /* binding */ _measureText; },\n/* harmony export */   \"H\": function() { return /* binding */ HALF_PI; },\n/* harmony export */   \"I\": function() { return /* binding */ _int16Range; },\n/* harmony export */   \"J\": function() { return /* binding */ _alignPixel; },\n/* harmony export */   \"K\": function() { return /* binding */ toPadding; },\n/* harmony export */   \"L\": function() { return /* binding */ clipArea; },\n/* harmony export */   \"M\": function() { return /* binding */ renderText; },\n/* harmony export */   \"N\": function() { return /* binding */ unclipArea; },\n/* harmony export */   \"O\": function() { return /* binding */ toFont; },\n/* harmony export */   \"P\": function() { return /* binding */ PI; },\n/* harmony export */   \"Q\": function() { return /* binding */ each; },\n/* harmony export */   \"R\": function() { return /* binding */ _toLeftRightCenter; },\n/* harmony export */   \"S\": function() { return /* binding */ _alignStartEnd; },\n/* harmony export */   \"T\": function() { return /* binding */ TAU; },\n/* harmony export */   \"U\": function() { return /* binding */ overrides; },\n/* harmony export */   \"V\": function() { return /* binding */ merge; },\n/* harmony export */   \"W\": function() { return /* binding */ _capitalize; },\n/* harmony export */   \"X\": function() { return /* binding */ getRelativePosition; },\n/* harmony export */   \"Y\": function() { return /* binding */ _rlookupByKey; },\n/* harmony export */   \"Z\": function() { return /* binding */ _lookupByKey; },\n/* harmony export */   \"_\": function() { return /* binding */ _arrayUnique; },\n/* harmony export */   \"a\": function() { return /* binding */ resolve; },\n/* harmony export */   \"a$\": function() { return /* binding */ toLineHeight; },\n/* harmony export */   \"a0\": function() { return /* binding */ getAngleFromPoint; },\n/* harmony export */   \"a1\": function() { return /* binding */ getMaximumSize; },\n/* harmony export */   \"a2\": function() { return /* binding */ _getParentNode; },\n/* harmony export */   \"a3\": function() { return /* binding */ readUsedSize; },\n/* harmony export */   \"a4\": function() { return /* binding */ throttled; },\n/* harmony export */   \"a5\": function() { return /* binding */ supportsEventListenerOptions; },\n/* harmony export */   \"a6\": function() { return /* binding */ _isDomSupported; },\n/* harmony export */   \"a7\": function() { return /* binding */ descriptors; },\n/* harmony export */   \"a8\": function() { return /* binding */ isFunction; },\n/* harmony export */   \"a9\": function() { return /* binding */ _attachContext; },\n/* harmony export */   \"aA\": function() { return /* binding */ getRtlAdapter; },\n/* harmony export */   \"aB\": function() { return /* binding */ overrideTextDirection; },\n/* harmony export */   \"aC\": function() { return /* binding */ _textX; },\n/* harmony export */   \"aD\": function() { return /* binding */ restoreTextDirection; },\n/* harmony export */   \"aE\": function() { return /* binding */ drawPointLegend; },\n/* harmony export */   \"aF\": function() { return /* binding */ noop; },\n/* harmony export */   \"aG\": function() { return /* binding */ distanceBetweenPoints; },\n/* harmony export */   \"aH\": function() { return /* binding */ _setMinAndMaxByKey; },\n/* harmony export */   \"aI\": function() { return /* binding */ niceNum; },\n/* harmony export */   \"aJ\": function() { return /* binding */ almostWhole; },\n/* harmony export */   \"aK\": function() { return /* binding */ almostEquals; },\n/* harmony export */   \"aL\": function() { return /* binding */ _decimalPlaces; },\n/* harmony export */   \"aM\": function() { return /* binding */ _longestText; },\n/* harmony export */   \"aN\": function() { return /* binding */ _filterBetween; },\n/* harmony export */   \"aO\": function() { return /* binding */ _lookup; },\n/* harmony export */   \"aP\": function() { return /* binding */ isPatternOrGradient; },\n/* harmony export */   \"aQ\": function() { return /* binding */ getHoverColor; },\n/* harmony export */   \"aR\": function() { return /* binding */ clone$1; },\n/* harmony export */   \"aS\": function() { return /* binding */ _merger; },\n/* harmony export */   \"aT\": function() { return /* binding */ _mergerIf; },\n/* harmony export */   \"aU\": function() { return /* binding */ _deprecated; },\n/* harmony export */   \"aV\": function() { return /* binding */ _splitKey; },\n/* harmony export */   \"aW\": function() { return /* binding */ toFontString; },\n/* harmony export */   \"aX\": function() { return /* binding */ splineCurve; },\n/* harmony export */   \"aY\": function() { return /* binding */ splineCurveMonotone; },\n/* harmony export */   \"aZ\": function() { return /* binding */ getStyle; },\n/* harmony export */   \"a_\": function() { return /* binding */ fontString; },\n/* harmony export */   \"aa\": function() { return /* binding */ _createResolver; },\n/* harmony export */   \"ab\": function() { return /* binding */ _descriptors; },\n/* harmony export */   \"ac\": function() { return /* binding */ mergeIf; },\n/* harmony export */   \"ad\": function() { return /* binding */ uid; },\n/* harmony export */   \"ae\": function() { return /* binding */ debounce; },\n/* harmony export */   \"af\": function() { return /* binding */ retinaScale; },\n/* harmony export */   \"ag\": function() { return /* binding */ clearCanvas; },\n/* harmony export */   \"ah\": function() { return /* binding */ setsEqual; },\n/* harmony export */   \"ai\": function() { return /* binding */ _elementsEqual; },\n/* harmony export */   \"aj\": function() { return /* binding */ _isClickEvent; },\n/* harmony export */   \"ak\": function() { return /* binding */ _isBetween; },\n/* harmony export */   \"al\": function() { return /* binding */ _readValueToProps; },\n/* harmony export */   \"am\": function() { return /* binding */ _updateBezierControlPoints; },\n/* harmony export */   \"an\": function() { return /* binding */ _computeSegments; },\n/* harmony export */   \"ao\": function() { return /* binding */ _boundSegments; },\n/* harmony export */   \"ap\": function() { return /* binding */ _steppedInterpolation; },\n/* harmony export */   \"aq\": function() { return /* binding */ _bezierInterpolation; },\n/* harmony export */   \"ar\": function() { return /* binding */ _pointInLine; },\n/* harmony export */   \"as\": function() { return /* binding */ _steppedLineTo; },\n/* harmony export */   \"at\": function() { return /* binding */ _bezierCurveTo; },\n/* harmony export */   \"au\": function() { return /* binding */ drawPoint; },\n/* harmony export */   \"av\": function() { return /* binding */ addRoundedRectPath; },\n/* harmony export */   \"aw\": function() { return /* binding */ toTRBL; },\n/* harmony export */   \"ax\": function() { return /* binding */ toTRBLCorners; },\n/* harmony export */   \"ay\": function() { return /* binding */ _boundSegment; },\n/* harmony export */   \"az\": function() { return /* binding */ _normalizeAngle; },\n/* harmony export */   \"b\": function() { return /* binding */ isArray; },\n/* harmony export */   \"b0\": function() { return /* binding */ PITAU; },\n/* harmony export */   \"b1\": function() { return /* binding */ INFINITY; },\n/* harmony export */   \"b2\": function() { return /* binding */ RAD_PER_DEG; },\n/* harmony export */   \"b3\": function() { return /* binding */ QUARTER_PI; },\n/* harmony export */   \"b4\": function() { return /* binding */ TWO_THIRDS_PI; },\n/* harmony export */   \"b5\": function() { return /* binding */ _angleDiff; },\n/* harmony export */   \"c\": function() { return /* binding */ color; },\n/* harmony export */   \"d\": function() { return /* binding */ defaults; },\n/* harmony export */   \"e\": function() { return /* binding */ effects; },\n/* harmony export */   \"f\": function() { return /* binding */ resolveObjectKey; },\n/* harmony export */   \"g\": function() { return /* binding */ isNumberFinite; },\n/* harmony export */   \"h\": function() { return /* binding */ createContext; },\n/* harmony export */   \"i\": function() { return /* binding */ isObject; },\n/* harmony export */   \"j\": function() { return /* binding */ defined; },\n/* harmony export */   \"k\": function() { return /* binding */ isNullOrUndef; },\n/* harmony export */   \"l\": function() { return /* binding */ listenArrayEvents; },\n/* harmony export */   \"m\": function() { return /* binding */ toPercentage; },\n/* harmony export */   \"n\": function() { return /* binding */ toDimension; },\n/* harmony export */   \"o\": function() { return /* binding */ formatNumber; },\n/* harmony export */   \"p\": function() { return /* binding */ _angleBetween; },\n/* harmony export */   \"q\": function() { return /* binding */ _getStartAndCountOfVisiblePoints; },\n/* harmony export */   \"r\": function() { return /* binding */ requestAnimFrame; },\n/* harmony export */   \"s\": function() { return /* binding */ sign; },\n/* harmony export */   \"t\": function() { return /* binding */ toRadians; },\n/* harmony export */   \"u\": function() { return /* binding */ unlistenArrayEvents; },\n/* harmony export */   \"v\": function() { return /* binding */ valueOrDefault; },\n/* harmony export */   \"w\": function() { return /* binding */ _scaleRangesChanged; },\n/* harmony export */   \"x\": function() { return /* binding */ isNumber; },\n/* harmony export */   \"y\": function() { return /* binding */ _parseObjectDataRadialScale; },\n/* harmony export */   \"z\": function() { return /* binding */ log10; }\n/* harmony export */ });\n/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nfunction noop() {}\n\nconst uid = function () {\n  let id = 0;\n  return function () {\n    return id++;\n  };\n}();\n\nfunction isNullOrUndef(value) {\n  return value === null || typeof value === 'undefined';\n}\n\nfunction isArray(value) {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n\n  const type = Object.prototype.toString.call(value);\n\n  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isObject(value) {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n\nconst isNumberFinite = value => (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n\nfunction finiteOrDefault(value, defaultValue) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\n\nfunction valueOrDefault(value, defaultValue) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\n\nconst toPercentage = (value, dimension) => typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : value / dimension;\n\nconst toDimension = (value, dimension) => typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n\nfunction callback(fn, args, thisArg) {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\n\nfunction each(loopable, fn, thisArg, reverse) {\n  let i, len, keys;\n\n  if (isArray(loopable)) {\n    len = loopable.length;\n\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\n\nfunction _elementsEqual(a0, a1) {\n  let i, ilen, v0, v1;\n\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction clone$1(source) {\n  if (isArray(source)) {\n    return source.map(clone$1);\n  }\n\n  if (isObject(source)) {\n    const target = Object.create(null);\n    const keys = Object.keys(source);\n    const klen = keys.length;\n    let k = 0;\n\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone$1(source[keys[k]]);\n    }\n\n    return target;\n  }\n\n  return source;\n}\n\nfunction isValidKey(key) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\n\nfunction _merger(key, target, source, options) {\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  const tval = target[key];\n  const sval = source[key];\n\n  if (isObject(tval) && isObject(sval)) {\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone$1(sval);\n  }\n}\n\nfunction merge(target, source, options) {\n  const sources = isArray(source) ? source : [source];\n  const ilen = sources.length;\n\n  if (!isObject(target)) {\n    return target;\n  }\n\n  options = options || {};\n  const merger = options.merger || _merger;\n\n  for (let i = 0; i < ilen; ++i) {\n    source = sources[i];\n\n    if (!isObject(source)) {\n      continue;\n    }\n\n    const keys = Object.keys(source);\n\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, source, options);\n    }\n  }\n\n  return target;\n}\n\nfunction mergeIf(target, source) {\n  return merge(target, source, {\n    merger: _mergerIf\n  });\n}\n\nfunction _mergerIf(key, target, source) {\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  const tval = target[key];\n  const sval = source[key];\n\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone$1(sval);\n  }\n}\n\nfunction _deprecated(scope, value, previous, current) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\n\nconst keyResolvers = {\n  '': v => v,\n  x: o => o.x,\n  y: o => o.y\n};\n\nfunction resolveObjectKey(obj, key) {\n  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n\n  return resolver(obj);\n}\n\nfunction _getKeyResolver(key) {\n  const keys = _splitKey(key);\n\n  return obj => {\n    for (const k of keys) {\n      if (k === '') {\n        break;\n      }\n\n      obj = obj && obj[k];\n    }\n\n    return obj;\n  };\n}\n\nfunction _splitKey(key) {\n  const parts = key.split('.');\n  const keys = [];\n  let tmp = '';\n\n  for (const part of parts) {\n    tmp += part;\n\n    if (tmp.endsWith('\\\\')) {\n      tmp = tmp.slice(0, -1) + '.';\n    } else {\n      keys.push(tmp);\n      tmp = '';\n    }\n  }\n\n  return keys;\n}\n\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nconst defined = value => typeof value !== 'undefined';\n\nconst isFunction = value => typeof value === 'function';\n\nconst setsEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nfunction _isClickEvent(e) {\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\nconst PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\n\nfunction niceNum(range) {\n  const roundedRange = Math.round(range);\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\n  const fraction = range / niceRange;\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\n\nfunction _factorize(value) {\n  const result = [];\n  const sqrt = Math.sqrt(value);\n  let i;\n\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n\n  if (sqrt === (sqrt | 0)) {\n    result.push(sqrt);\n  }\n\n  result.sort((a, b) => a - b).pop();\n  return result;\n}\n\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction almostEquals(x, y, epsilon) {\n  return Math.abs(x - y) < epsilon;\n}\n\nfunction almostWhole(x, epsilon) {\n  const rounded = Math.round(x);\n  return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n\nfunction _setMinAndMaxByKey(array, target, property) {\n  let i, ilen, value;\n\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\n\nfunction toRadians(degrees) {\n  return degrees * (PI / 180);\n}\n\nfunction toDegrees(radians) {\n  return radians * (180 / PI);\n}\n\nfunction _decimalPlaces(x) {\n  if (!isNumberFinite(x)) {\n    return;\n  }\n\n  let e = 1;\n  let p = 0;\n\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n\n  return p;\n}\n\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n  if (angle < -0.5 * PI) {\n    angle += TAU;\n  }\n\n  return {\n    angle,\n    distance: radialDistanceFromCenter\n  };\n}\n\nfunction distanceBetweenPoints(pt1, pt2) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n\nfunction _angleDiff(a, b) {\n  return (a - b + PITAU) % TAU - PI;\n}\n\nfunction _normalizeAngle(a) {\n  return (a % TAU + TAU) % TAU;\n}\n\nfunction _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n  const a = _normalizeAngle(angle);\n\n  const s = _normalizeAngle(start);\n\n  const e = _normalizeAngle(end);\n\n  const angleToStart = _normalizeAngle(s - a);\n\n  const angleToEnd = _normalizeAngle(e - a);\n\n  const startToAngle = _normalizeAngle(a - s);\n\n  const endToAngle = _normalizeAngle(a - e);\n\n  return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n\nfunction _limitValue(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nfunction _int16Range(value) {\n  return _limitValue(value, -32768, 32767);\n}\n\nfunction _isBetween(value, start, end, epsilon = 1e-6) {\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n  cmp = cmp || (index => table[index] < value);\n\n  let hi = table.length - 1;\n  let lo = 0;\n  let mid;\n\n  while (hi - lo > 1) {\n    mid = lo + hi >> 1;\n\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n\n  return {\n    lo,\n    hi\n  };\n}\n\nconst _lookupByKey = (table, key, value, last) => _lookup(table, value, last ? index => table[index][key] <= value : index => table[index][key] < value);\n\nconst _rlookupByKey = (table, key, value) => _lookup(table, value, index => table[index][key] >= value);\n\nfunction _filterBetween(values, min, max) {\n  let start = 0;\n  let end = values.length;\n\n  while (start < end && values[start] < min) {\n    start++;\n  }\n\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n\n  return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\n\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n\nfunction listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n\n    return;\n  }\n\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n  arrayEvents.forEach(key => {\n    const method = '_onData' + _capitalize(key);\n\n    const base = array[key];\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n\n      value(...args) {\n        const res = base.apply(this, args);\n\n        array._chartjs.listeners.forEach(object => {\n          if (typeof object[method] === 'function') {\n            object[method](...args);\n          }\n        });\n\n        return res;\n      }\n\n    });\n  });\n}\n\nfunction unlistenArrayEvents(array, listener) {\n  const stub = array._chartjs;\n\n  if (!stub) {\n    return;\n  }\n\n  const listeners = stub.listeners;\n  const index = listeners.indexOf(listener);\n\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n\n  if (listeners.length > 0) {\n    return;\n  }\n\n  arrayEvents.forEach(key => {\n    delete array[key];\n  });\n  delete array._chartjs;\n}\n\nfunction _arrayUnique(items) {\n  const set = new Set();\n  let i, ilen;\n\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\n    set.add(items[i]);\n  }\n\n  if (set.size === ilen) {\n    return items;\n  }\n\n  return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n\nconst requestAnimFrame = function () {\n  if (typeof window === 'undefined') {\n    return function (callback) {\n      return callback();\n    };\n  }\n\n  return window.requestAnimationFrame;\n}();\n\nfunction throttled(fn, thisArg, updateFn) {\n  const updateArgs = updateFn || (args => Array.prototype.slice.call(args));\n\n  let ticking = false;\n  let args = [];\n  return function (...rest) {\n    args = updateArgs(rest);\n\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, () => {\n        ticking = false;\n        fn.apply(thisArg, args);\n      });\n    }\n  };\n}\n\nfunction debounce(fn, delay) {\n  let timeout;\n  return function (...args) {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay, args);\n    } else {\n      fn.apply(this, args);\n    }\n\n    return delay;\n  };\n}\n\nconst _toLeftRightCenter = align => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n\nconst _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n\nconst _textX = (align, left, right, rtl) => {\n  const check = rtl ? 'left' : 'right';\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n\nfunction _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n  const pointCount = points.length;\n  let start = 0;\n  let count = pointCount;\n\n  if (meta._sorted) {\n    const {\n      iScale,\n      _parsed\n    } = meta;\n    const axis = iScale.axis;\n    const {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = iScale.getUserBounds();\n\n    if (minDefined) {\n      start = _limitValue(Math.min(_lookupByKey(_parsed, iScale.axis, min).lo, animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n    }\n\n    if (maxDefined) {\n      count = _limitValue(Math.max(_lookupByKey(_parsed, iScale.axis, max, true).hi + 1, animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n\n  return {\n    start,\n    count\n  };\n}\n\nfunction _scaleRangesChanged(meta) {\n  const {\n    xScale,\n    yScale,\n    _scaleRanges\n  } = meta;\n  const newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n\n  const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n\nconst atEdge = t => t === 0 || t === 1;\n\nconst elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\n\nconst elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n\nconst effects = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => -t * (t - 2),\n  easeInOutQuad: t => (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => (t -= 1) * t * t + 1,\n  easeInOutCubic: t => (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => -((t -= 1) * t * t * t - 1),\n  easeInOutQuart: t => (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,\n  easeInOutQuint: t => (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n  easeInSine: t => -Math.cos(t * HALF_PI) + 1,\n  easeOutSine: t => Math.sin(t * HALF_PI),\n  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),\n  easeInExpo: t => t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n  easeOutExpo: t => t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n  easeInOutExpo: t => atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n  easeInCirc: t => t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),\n  easeInOutCirc: t => (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n\n  easeInOutElastic(t) {\n    const s = 0.1125;\n    const p = 0.45;\n    return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n\n  easeInBack(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n\n  easeOutBack(t) {\n    const s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n\n  easeInOutBack(t) {\n    let s = 1.70158;\n\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n    }\n\n    return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n  },\n\n  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),\n\n  easeOutBounce(t) {\n    const m = 7.5625;\n    const d = 2.75;\n\n    if (t < 1 / d) {\n      return m * t * t;\n    }\n\n    if (t < 2 / d) {\n      return m * (t -= 1.5 / d) * t + 0.75;\n    }\n\n    if (t < 2.5 / d) {\n      return m * (t -= 2.25 / d) * t + 0.9375;\n    }\n\n    return m * (t -= 2.625 / d) * t + 0.984375;\n  },\n\n  easeInOutBounce: t => t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n/*!\n * @kurkle/color v0.2.1\n * https://github.com/kurkle/color#readme\n * (c) 2022 Jukka Kurkela\n * Released under the MIT License\n */\n\nfunction round(v) {\n  return v + 0.5 | 0;\n}\n\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\n\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\n\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\n\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\n\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15,\n  a: 10,\n  b: 11,\n  c: 12,\n  d: 13,\n  e: 14,\n  f: 15\n};\nconst hex = [...'0123456789ABCDEF'];\n\nconst h1 = b => hex[b & 0xF];\n\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\n\nconst eq = b => (b & 0xF0) >> 4 === (b & 0xF);\n\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\n\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255\n      };\n    }\n  }\n\n  return ret;\n}\n\nconst alpha = (a, f) => a < 255 ? f(a) : '';\n\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  return [f(0), f(8), f(4)];\n}\n\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n\n  return [f(5), f(3), f(1)];\n}\n\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n\n  return rgb;\n}\n\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return (g - b) / d + (g < b ? 6 : 0);\n  }\n\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n\n  return (r - g) / d + 4;\n}\n\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n\n  return [h | 0, s || 0, l];\n}\n\nfunction calln(f, a, b, c) {\n  return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);\n}\n\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\n\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\n\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\n\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\n\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n\n  if (!m) {\n    return;\n  }\n\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\n\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\n\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\n\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n\n  return unpacked;\n}\n\nlet names;\n\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\n\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n\n  if (!m) {\n    return;\n  }\n\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\n\nfunction rgbString(v) {\n  return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\n\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\n\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\n\nfunction fromObject(input) {\n  var v = {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 255\n  };\n\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {\n        r: input[0],\n        g: input[1],\n        b: input[2],\n        a: 255\n      };\n\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 1\n    });\n    v.a = n2b(v.a);\n  }\n\n  return v;\n}\n\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n\n  return hueParse(str);\n}\n\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n\n    const type = typeof input;\n    let v;\n\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n\n    this._rgb = v;\n    this._valid = !!v;\n  }\n\n  get valid() {\n    return this._valid;\n  }\n\n  get rgb() {\n    var v = clone(this._rgb);\n\n    if (v) {\n      v.a = b2n(v.a);\n    }\n\n    return v;\n  }\n\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n\n    return this;\n  }\n\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new Color(this.rgb);\n  }\n\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nfunction isPatternOrGradient(value) {\n  if (value && typeof value === 'object') {\n    const type = value.toString();\n    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n  }\n\n  return false;\n}\n\nfunction color(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value);\n}\n\nfunction getHoverColor(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n\nfunction getScope$1(node, key) {\n  if (!key) {\n    return node;\n  }\n\n  const keys = key.split('.');\n\n  for (let i = 0, n = keys.length; i < n; ++i) {\n    const k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n\n  return node;\n}\n\nfunction set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope$1(root, scope), values);\n  }\n\n  return merge(getScope$1(root, ''), scope);\n}\n\nclass Defaults {\n  constructor(_descriptors) {\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n\n    this.devicePixelRatio = context => context.chart.platform.getDevicePixelRatio();\n\n    this.elements = {};\n    this.events = ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true,\n      includeInvisible: false\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.drawActiveElementsOnTop = true;\n    this.describe(_descriptors);\n  }\n\n  set(scope, values) {\n    return set(this, scope, values);\n  }\n\n  get(scope) {\n    return getScope$1(this, scope);\n  }\n\n  describe(scope, values) {\n    return set(descriptors, scope, values);\n  }\n\n  override(scope, values) {\n    return set(overrides, scope, values);\n  }\n\n  route(scope, name, targetScope, targetName) {\n    const scopeObject = getScope$1(this, scope);\n    const targetScopeObject = getScope$1(this, targetScope);\n    const privateName = '_' + name;\n    Object.defineProperties(scopeObject, {\n      [privateName]: {\n        value: scopeObject[name],\n        writable: true\n      },\n      [name]: {\n        enumerable: true,\n\n        get() {\n          const local = this[privateName];\n          const target = targetScopeObject[targetName];\n\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n\n          return valueOrDefault(local, target);\n        },\n\n        set(value) {\n          this[privateName] = value;\n        }\n\n      }\n    });\n  }\n\n}\n\nvar defaults = new Defaults({\n  _scriptable: name => !name.startsWith('on'),\n  _indexable: name => name !== 'events',\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false\n  }\n});\n\nfunction toFontString(font) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n\n  return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n\nfunction _measureText(ctx, data, gc, longest, string) {\n  let textWidth = data[string];\n\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n\n  return longest;\n}\n\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n  cache = cache || {};\n  let data = cache.data = cache.data || {};\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\n\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n\n  ctx.save();\n  ctx.font = font;\n  let longest = 0;\n  const ilen = arrayOfThings.length;\n  let i, j, jlen, thing, nestedThing;\n\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n\n  ctx.restore();\n  const gcLen = gc.length / 2;\n\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n\n    gc.splice(0, gcLen);\n  }\n\n  return longest;\n}\n\nfunction _alignPixel(chart, pixel, width) {\n  const devicePixelRatio = chart.currentDevicePixelRatio;\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n\nfunction clearCanvas(canvas, ctx) {\n  ctx = ctx || canvas.getContext('2d');\n  ctx.save();\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\n\nfunction drawPoint(ctx, options, x, y) {\n  drawPointLegend(ctx, options, x, y, null);\n}\n\nfunction drawPointLegend(ctx, options, x, y, w) {\n  let type, xOffset, yOffset, size, cornerRadius, width;\n  const style = options.pointStyle;\n  const rotation = options.rotation;\n  const radius = options.radius;\n  let rad = (rotation || 0) * RAD_PER_DEG;\n\n  if (style && typeof style === 'object') {\n    type = style.toString();\n\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n\n  ctx.beginPath();\n\n  switch (style) {\n    default:\n      if (w) {\n        ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n      } else {\n        ctx.arc(x, y, radius, 0, TAU);\n      }\n\n      ctx.closePath();\n      break;\n\n    case 'triangle':\n      ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n      rad += TWO_THIRDS_PI;\n      ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n      rad += TWO_THIRDS_PI;\n      ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n      ctx.closePath();\n      break;\n\n    case 'rectRounded':\n      cornerRadius = radius * 0.516;\n      size = radius - cornerRadius;\n      xOffset = Math.cos(rad + QUARTER_PI) * size;\n      yOffset = Math.sin(rad + QUARTER_PI) * size;\n      ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n      ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n      ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n      ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n      ctx.closePath();\n      break;\n\n    case 'rect':\n      if (!rotation) {\n        size = Math.SQRT1_2 * radius;\n        width = w ? w / 2 : size;\n        ctx.rect(x - width, y - size, 2 * width, 2 * size);\n        break;\n      }\n\n      rad += QUARTER_PI;\n\n    case 'rectRot':\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + yOffset, y - xOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      ctx.lineTo(x - yOffset, y + xOffset);\n      ctx.closePath();\n      break;\n\n    case 'crossRot':\n      rad += QUARTER_PI;\n\n    case 'cross':\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      ctx.moveTo(x + yOffset, y - xOffset);\n      ctx.lineTo(x - yOffset, y + xOffset);\n      break;\n\n    case 'star':\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      ctx.moveTo(x + yOffset, y - xOffset);\n      ctx.lineTo(x - yOffset, y + xOffset);\n      rad += QUARTER_PI;\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      ctx.moveTo(x + yOffset, y - xOffset);\n      ctx.lineTo(x - yOffset, y + xOffset);\n      break;\n\n    case 'line':\n      xOffset = w ? w / 2 : Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      break;\n\n    case 'dash':\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n      break;\n  }\n\n  ctx.fill();\n\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\n\nfunction _isPointInArea(point, area, margin) {\n  margin = margin || 0.5;\n  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\n\nfunction clipArea(ctx, area) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\n\nfunction unclipArea(ctx) {\n  ctx.restore();\n}\n\nfunction _steppedLineTo(ctx, previous, target, flip, mode) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n\n  if (mode === 'middle') {\n    const midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction _bezierCurveTo(ctx, previous, target, flip) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n\n  ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\n\nfunction renderText(ctx, text, x, y, font, opts = {}) {\n  const lines = isArray(text) ? text : [text];\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  let i, line;\n  ctx.save();\n  ctx.font = font.string;\n  setRenderOpts(ctx, opts);\n\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n\n    ctx.fillText(line, x, y, opts.maxWidth);\n    decorateText(ctx, x, y, line, opts);\n    y += font.lineHeight;\n  }\n\n  ctx.restore();\n}\n\nfunction setRenderOpts(ctx, opts) {\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n}\n\nfunction decorateText(ctx, x, y, line, opts) {\n  if (opts.strikethrough || opts.underline) {\n    const metrics = ctx.measureText(line);\n    const left = x - metrics.actualBoundingBoxLeft;\n    const right = x + metrics.actualBoundingBoxRight;\n    const top = y - metrics.actualBoundingBoxAscent;\n    const bottom = y + metrics.actualBoundingBoxDescent;\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.beginPath();\n    ctx.lineWidth = opts.decorationWidth || 2;\n    ctx.moveTo(left, yDecoration);\n    ctx.lineTo(right, yDecoration);\n    ctx.stroke();\n  }\n}\n\nfunction addRoundedRectPath(ctx, rect) {\n  const {\n    x,\n    y,\n    w,\n    h,\n    radius\n  } = rect;\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n  ctx.lineTo(x + w, y + radius.topRight);\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n  ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\nconst FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\n\nfunction toLineHeight(value, size) {\n  const matches = ('' + value).match(LINE_HEIGHT);\n\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n\n  value = +matches[2];\n\n  switch (matches[3]) {\n    case 'px':\n      return value;\n\n    case '%':\n      value /= 100;\n      break;\n  }\n\n  return size * value;\n}\n\nconst numberOrZero = v => +v || 0;\n\nfunction _readValueToProps(value, props) {\n  const ret = {};\n  const objProps = isObject(props);\n  const keys = objProps ? Object.keys(props) : props;\n  const read = isObject(value) ? objProps ? prop => valueOrDefault(value[prop], value[props[prop]]) : prop => value[prop] : () => value;\n\n  for (const prop of keys) {\n    ret[prop] = numberOrZero(read(prop));\n  }\n\n  return ret;\n}\n\nfunction toTRBL(value) {\n  return _readValueToProps(value, {\n    top: 'y',\n    right: 'x',\n    bottom: 'y',\n    left: 'x'\n  });\n}\n\nfunction toTRBLCorners(value) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\n\nfunction toPadding(value) {\n  const obj = toTRBL(value);\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n  return obj;\n}\n\nfunction toFont(options, fallback) {\n  options = options || {};\n  fallback = fallback || defaults.font;\n  let size = valueOrDefault(options.size, fallback.size);\n\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n\n  let style = valueOrDefault(options.style, fallback.style);\n\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = '';\n  }\n\n  const font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size,\n    style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n  font.string = toFontString(font);\n  return font;\n}\n\nfunction resolve(inputs, context, index, info) {\n  let cacheable = true;\n  let i, ilen, value;\n\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n\n    if (value === undefined) {\n      continue;\n    }\n\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n\n      return value;\n    }\n  }\n}\n\nfunction _addGrace(minmax, grace, beginAtZero) {\n  const {\n    min,\n    max\n  } = minmax;\n  const change = toDimension(grace, (max - min) / 2);\n\n  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;\n\n  return {\n    min: keepZero(min, -Math.abs(change)),\n    max: keepZero(max, change)\n  };\n}\n\nfunction createContext(parentContext, context) {\n  return Object.assign(Object.create(parentContext), context);\n}\n\nfunction _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\n  if (!defined(fallback)) {\n    fallback = _resolve('_fallback', scopes);\n  }\n\n  const cache = {\n    [Symbol.toStringTag]: 'Object',\n    _cacheable: true,\n    _scopes: scopes,\n    _rootScopes: rootScopes,\n    _fallback: fallback,\n    _getTarget: getTarget,\n    override: scope => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback)\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete target._keys;\n      delete scopes[0][prop];\n      return true;\n    },\n\n    get(target, prop) {\n      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n    },\n\n    getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n\n    has(target, prop) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n\n    ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n\n    set(target, prop, value) {\n      const storage = target._storage || (target._storage = getTarget());\n      target[prop] = storage[prop] = value;\n      delete target._keys;\n      return true;\n    }\n\n  });\n}\n\nfunction _attachContext(proxy, context, subProxy, descriptorDefaults) {\n  const cache = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: ctx => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n    override: scope => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete proxy[prop];\n      return true;\n    },\n\n    get(target, prop, receiver) {\n      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));\n    },\n\n    getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n        enumerable: true,\n        configurable: true\n      } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n\n    has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n\n    ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n\n    set(target, prop, value) {\n      proxy[prop] = value;\n      delete target[prop];\n      return true;\n    }\n\n  });\n}\n\nfunction _descriptors(proxy, defaults = {\n  scriptable: true,\n  indexable: true\n}) {\n  const {\n    _scriptable = defaults.scriptable,\n    _indexable = defaults.indexable,\n    _allKeys = defaults.allKeys\n  } = proxy;\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n  };\n}\n\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\n\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\n\nfunction _cached(target, prop, resolve) {\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\n    return target[prop];\n  }\n\n  const value = resolve();\n  target[prop] = value;\n  return value;\n}\n\nfunction _resolveWithContext(target, prop, receiver) {\n  const {\n    _proxy,\n    _context,\n    _subProxy,\n    _descriptors: descriptors\n  } = target;\n  let value = _proxy[prop];\n\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n\n  if (needsSubResolver(prop, value)) {\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n\n  return value;\n}\n\nfunction _resolveScriptable(prop, value, target, receiver) {\n  const {\n    _proxy,\n    _context,\n    _subProxy,\n    _stack\n  } = target;\n\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n  }\n\n  _stack.add(prop);\n\n  value = value(_context, _subProxy || receiver);\n\n  _stack.delete(prop);\n\n  if (needsSubResolver(prop, value)) {\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n\n  return value;\n}\n\nfunction _resolveArray(prop, value, target, isIndexable) {\n  const {\n    _proxy,\n    _context,\n    _subProxy,\n    _descriptors: descriptors\n  } = target;\n\n  if (defined(_context.index) && isIndexable(prop)) {\n    value = value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    const arr = value;\n\n    const scopes = _proxy._scopes.filter(s => s !== arr);\n\n    value = [];\n\n    for (const item of arr) {\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n    }\n  }\n\n  return value;\n}\n\nfunction resolveFallback(fallback, prop, value) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\n\nconst getScope = (key, parent) => key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\n\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n  for (const parent of parentScopes) {\n    const scope = getScope(key, parent);\n\n    if (scope) {\n      set.add(scope);\n      const fallback = resolveFallback(scope._fallback, key, value);\n\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\n        return fallback;\n      }\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\n      return null;\n    }\n  }\n\n  return false;\n}\n\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n  const rootScopes = resolver._rootScopes;\n  const fallback = resolveFallback(resolver._fallback, prop, value);\n  const allScopes = [...parentScopes, ...rootScopes];\n  const set = new Set();\n  set.add(value);\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n\n  if (key === null) {\n    return false;\n  }\n\n  if (defined(fallback) && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\n\n    if (key === null) {\n      return false;\n    }\n  }\n\n  return _createResolver(Array.from(set), [''], rootScopes, fallback, () => subGetTarget(resolver, prop, value));\n}\n\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback, item);\n  }\n\n  return key;\n}\n\nfunction subGetTarget(resolver, prop, value) {\n  const parent = resolver._getTarget();\n\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n\n  const target = parent[prop];\n\n  if (isArray(target) && isObject(value)) {\n    return value;\n  }\n\n  return target;\n}\n\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n  let value;\n\n  for (const prefix of prefixes) {\n    value = _resolve(readKey(prefix, prop), scopes);\n\n    if (defined(value)) {\n      return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n    }\n  }\n}\n\nfunction _resolve(key, scopes) {\n  for (const scope of scopes) {\n    if (!scope) {\n      continue;\n    }\n\n    const value = scope[key];\n\n    if (defined(value)) {\n      return value;\n    }\n  }\n}\n\nfunction getKeysFromAllScopes(target) {\n  let keys = target._keys;\n\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n\n  return keys;\n}\n\nfunction resolveKeysFromAllScopes(scopes) {\n  const set = new Set();\n\n  for (const scope of scopes) {\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n      set.add(key);\n    }\n  }\n\n  return Array.from(set);\n}\n\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n  const {\n    iScale\n  } = meta;\n  const {\n    key = 'r'\n  } = this._parsing;\n  const parsed = new Array(count);\n  let i, ilen, index, item;\n\n  for (i = 0, ilen = count; i < ilen; ++i) {\n    index = i + start;\n    item = data[index];\n    parsed[i] = {\n      r: iScale.parse(resolveObjectKey(item, key), index)\n    };\n  }\n\n  return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\n\nconst getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\n\nconst getValueAxis = indexAxis => indexAxis === 'x' ? 'y' : 'x';\n\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\n  const current = middlePoint;\n  const next = afterPoint.skip ? middlePoint : afterPoint;\n  const d01 = distanceBetweenPoints(current, previous);\n  const d12 = distanceBetweenPoints(next, current);\n  let s01 = d01 / (d01 + d12);\n  let s12 = d12 / (d01 + d12);\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n  const fa = t * s01;\n  const fb = t * s12;\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\n\nfunction monotoneAdjust(points, deltaK, mK) {\n  const pointsLen = points.length;\n  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n\n  for (let i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\n\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  let delta, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n\n  for (let i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n\n    if (!pointCurrent) {\n      continue;\n    }\n\n    const iPixel = pointCurrent[indexAxis];\n    const vPixel = pointCurrent[valueAxis];\n\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n    }\n\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n    }\n  }\n}\n\nfunction splineCurveMonotone(points, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  const deltaK = Array(pointsLen).fill(0);\n  const mK = Array(pointsLen);\n  let i, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n\n    if (!pointCurrent) {\n      continue;\n    }\n\n    if (pointAfter) {\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n\n    mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n\n  monotoneAdjust(points, deltaK, mK);\n  monotoneCompute(points, mK, indexAxis);\n}\n\nfunction capControlPoint(pt, min, max) {\n  return Math.max(Math.min(pt, max), min);\n}\n\nfunction capBezierPoints(points, area) {\n  let i, ilen, point, inArea, inAreaPrev;\n\n  let inAreaNext = _isPointInArea(points[0], area);\n\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n\n    if (!inArea) {\n      continue;\n    }\n\n    point = points[i];\n\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\n\nfunction _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n  let i, ilen, point, controlPoints;\n\n  if (options.spanGaps) {\n    points = points.filter(pt => !pt.skip);\n  }\n\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    let prev = loop ? points[points.length - 1] : points[0];\n\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n\nfunction _isDomSupported() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n\nfunction _getParentNode(domNode) {\n  let parent = domNode.parentNode;\n\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = parent.host;\n  }\n\n  return parent;\n}\n\nfunction parseMaxStyle(styleValue, node, parentProperty) {\n  let valueInPixels;\n\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n\n    if (styleValue.indexOf('%') !== -1) {\n      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n\n  return valueInPixels;\n}\n\nconst getComputedStyle = element => window.getComputedStyle(element, null);\n\nfunction getStyle(el, property) {\n  return getComputedStyle(el).getPropertyValue(property);\n}\n\nconst positions = ['top', 'right', 'bottom', 'left'];\n\nfunction getPositionedStyle(styles, style, suffix) {\n  const result = {};\n  suffix = suffix ? '-' + suffix : '';\n\n  for (let i = 0; i < 4; i++) {\n    const pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\n\nconst useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\n\nfunction getCanvasPosition(e, canvas) {\n  const touches = e.touches;\n  const source = touches && touches.length ? touches[0] : e;\n  const {\n    offsetX,\n    offsetY\n  } = source;\n  let box = false;\n  let x, y;\n\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    const rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n\n  return {\n    x,\n    y,\n    box\n  };\n}\n\nfunction getRelativePosition(evt, chart) {\n  if ('native' in evt) {\n    return evt;\n  }\n\n  const {\n    canvas,\n    currentDevicePixelRatio\n  } = chart;\n  const style = getComputedStyle(canvas);\n  const borderBox = style.boxSizing === 'border-box';\n  const paddings = getPositionedStyle(style, 'padding');\n  const borders = getPositionedStyle(style, 'border', 'width');\n  const {\n    x,\n    y,\n    box\n  } = getCanvasPosition(evt, canvas);\n  const xOffset = paddings.left + (box && borders.left);\n  const yOffset = paddings.top + (box && borders.top);\n  let {\n    width,\n    height\n  } = chart;\n\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\n\nfunction getContainerSize(canvas, width, height) {\n  let maxWidth, maxHeight;\n\n  if (width === undefined || height === undefined) {\n    const container = _getParentNode(canvas);\n\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      const rect = container.getBoundingClientRect();\n      const containerStyle = getComputedStyle(container);\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n\n  return {\n    width,\n    height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\n\nconst round1 = v => Math.round(v * 10) / 10;\n\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n  const style = getComputedStyle(canvas);\n  const margins = getPositionedStyle(style, 'margin');\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  let {\n    width,\n    height\n  } = containerSize;\n\n  if (style.boxSizing === 'content-box') {\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n\n  if (width && !height) {\n    height = round1(width / 2);\n  }\n\n  return {\n    width,\n    height\n  };\n}\n\nfunction retinaScale(chart, forceRatio, forceStyle) {\n  const pixelRatio = forceRatio || 1;\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\n  chart.height = deviceHeight / pixelRatio;\n  chart.width = deviceWidth / pixelRatio;\n  const canvas = chart.canvas;\n\n  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n    canvas.style.height = `${chart.height}px`;\n    canvas.style.width = `${chart.width}px`;\n  }\n\n  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n\n  return false;\n}\n\nconst supportsEventListenerOptions = function () {\n  let passiveSupported = false;\n\n  try {\n    const options = {\n      get passive() {\n        passiveSupported = true;\n        return false;\n      }\n\n    };\n    window.addEventListener('test', null, options);\n    window.removeEventListener('test', null, options);\n  } catch (e) {}\n\n  return passiveSupported;\n}();\n\nfunction readUsedSize(element, property) {\n  const value = getStyle(element, property);\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n\nfunction _pointInLine(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\n\nfunction _steppedInterpolation(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n  };\n}\n\nfunction _bezierInterpolation(p1, p2, t, mode) {\n  const cp1 = {\n    x: p1.cp2x,\n    y: p1.cp2y\n  };\n  const cp2 = {\n    x: p2.cp1x,\n    y: p2.cp1y\n  };\n\n  const a = _pointInLine(p1, cp1, t);\n\n  const b = _pointInLine(cp1, cp2, t);\n\n  const c = _pointInLine(cp2, p2, t);\n\n  const d = _pointInLine(a, b, t);\n\n  const e = _pointInLine(b, c, t);\n\n  return _pointInLine(d, e, t);\n}\n\nconst intlCache = new Map();\n\nfunction getNumberFormat(locale, options) {\n  options = options || {};\n  const cacheKey = locale + JSON.stringify(options);\n  let formatter = intlCache.get(cacheKey);\n\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n\n  return formatter;\n}\n\nfunction formatNumber(num, locale, options) {\n  return getNumberFormat(locale, options).format(num);\n}\n\nconst getRightToLeftAdapter = function (rectX, width) {\n  return {\n    x(x) {\n      return rectX + rectX + width - x;\n    },\n\n    setWidth(w) {\n      width = w;\n    },\n\n    textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n\n      return align === 'right' ? 'left' : 'right';\n    },\n\n    xPlus(x, value) {\n      return x - value;\n    },\n\n    leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    }\n\n  };\n};\n\nconst getLeftToRightAdapter = function () {\n  return {\n    x(x) {\n      return x;\n    },\n\n    setWidth(w) {},\n\n    textAlign(align) {\n      return align;\n    },\n\n    xPlus(x, value) {\n      return x + value;\n    },\n\n    leftForLtr(x, _itemWidth) {\n      return x;\n    }\n\n  };\n};\n\nfunction getRtlAdapter(rtl, rectX, width) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\n\nfunction overrideTextDirection(ctx, direction) {\n  let style, original;\n\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [style.getPropertyValue('direction'), style.getPropertyPriority('direction')];\n    style.setProperty('direction', direction, 'important');\n    ctx.prevTextDirection = original;\n  }\n}\n\nfunction restoreTextDirection(ctx, original) {\n  if (original !== undefined) {\n    delete ctx.prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle\n    };\n  }\n\n  return {\n    between: _isBetween,\n    compare: (a, b) => a - b,\n    normalize: x => x\n  };\n}\n\nfunction normalizeSegment({\n  start,\n  end,\n  count,\n  loop,\n  style\n}) {\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style\n  };\n}\n\nfunction getSegment(segment, points, bounds) {\n  const {\n    property,\n    start: startBound,\n    end: endBound\n  } = bounds;\n  const {\n    between,\n    normalize\n  } = propertyFn(property);\n  const count = points.length;\n  let {\n    start,\n    end,\n    loop\n  } = segment;\n  let i, ilen;\n\n  if (loop) {\n    start += count;\n    end += count;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n\n      start--;\n      end--;\n    }\n\n    start %= count;\n    end %= count;\n  }\n\n  if (end < start) {\n    end += count;\n  }\n\n  return {\n    start,\n    end,\n    loop,\n    style: segment.style\n  };\n}\n\nfunction _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n\n  const {\n    property,\n    start: startBound,\n    end: endBound\n  } = bounds;\n  const count = points.length;\n  const {\n    compare,\n    between,\n    normalize\n  } = propertyFn(property);\n  const {\n    start,\n    end,\n    loop,\n    style\n  } = getSegment(segment, points, bounds);\n  const result = [];\n  let inside = false;\n  let subStart = null;\n  let value, point, prevValue;\n\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n\n  const shouldStart = () => inside || startIsBefore();\n\n  const shouldStop = () => !inside || endIsBefore();\n\n  for (let i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n\n    if (point.skip) {\n      continue;\n    }\n\n    value = normalize(point[property]);\n\n    if (value === prevValue) {\n      continue;\n    }\n\n    inside = between(value, startBound, endBound);\n\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({\n        start: subStart,\n        end: i,\n        loop,\n        count,\n        style\n      }));\n      subStart = null;\n    }\n\n    prev = i;\n    prevValue = value;\n  }\n\n  if (subStart !== null) {\n    result.push(normalizeSegment({\n      start: subStart,\n      end,\n      loop,\n      count,\n      style\n    }));\n  }\n\n  return result;\n}\n\nfunction _boundSegments(line, bounds) {\n  const result = [];\n  const segments = line.segments;\n\n  for (let i = 0; i < segments.length; i++) {\n    const sub = _boundSegment(segments[i], line.points, bounds);\n\n    if (sub.length) {\n      result.push(...sub);\n    }\n  }\n\n  return result;\n}\n\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  let start = 0;\n  let end = count - 1;\n\n  if (loop && !spanGaps) {\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n\n  while (start < count && points[start].skip) {\n    start++;\n  }\n\n  start %= count;\n\n  if (loop) {\n    end += start;\n  }\n\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n\n  end %= count;\n  return {\n    start,\n    end\n  };\n}\n\nfunction solidSegments(points, start, max, loop) {\n  const count = points.length;\n  const result = [];\n  let last = start;\n  let prev = points[start];\n  let end;\n\n  for (end = start + 1; end <= max; ++end) {\n    const cur = points[end % count];\n\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({\n          start: start % count,\n          end: (end - 1) % count,\n          loop\n        });\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n\n      if (prev.skip) {\n        start = end;\n      }\n    }\n\n    prev = cur;\n  }\n\n  if (last !== null) {\n    result.push({\n      start: start % count,\n      end: last % count,\n      loop\n    });\n  }\n\n  return result;\n}\n\nfunction _computeSegments(line, segmentOptions) {\n  const points = line.points;\n  const spanGaps = line.options.spanGaps;\n  const count = points.length;\n\n  if (!count) {\n    return [];\n  }\n\n  const loop = !!line._loop;\n  const {\n    start,\n    end\n  } = findStartAndEnd(points, count, loop, spanGaps);\n\n  if (spanGaps === true) {\n    return splitByStyles(line, [{\n      start,\n      end,\n      loop\n    }], points, segmentOptions);\n  }\n\n  const max = end < start ? end + count : end;\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n\nfunction splitByStyles(line, segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n\n  return doSplitByStyles(line, segments, points, segmentOptions);\n}\n\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\n  const chartContext = line._chart.getContext();\n\n  const baseStyle = readStyle(line.options);\n  const {\n    _datasetIndex: datasetIndex,\n    options: {\n      spanGaps\n    }\n  } = line;\n  const count = points.length;\n  const result = [];\n  let prevStyle = baseStyle;\n  let start = segments[0].start;\n  let i = start;\n\n  function addStyle(s, e, l, st) {\n    const dir = spanGaps ? -1 : 1;\n\n    if (s === e) {\n      return;\n    }\n\n    s += count;\n\n    while (points[s % count].skip) {\n      s -= dir;\n    }\n\n    while (points[e % count].skip) {\n      e += dir;\n    }\n\n    if (s % count !== e % count) {\n      result.push({\n        start: s % count,\n        end: e % count,\n        loop: l,\n        style: st\n      });\n      prevStyle = st;\n      start = e % count;\n    }\n  }\n\n  for (const segment of segments) {\n    start = spanGaps ? start : segment.start;\n    let prev = points[start % count];\n    let style;\n\n    for (i = start + 1; i <= segment.end; i++) {\n      const pt = points[i % count];\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n        type: 'segment',\n        p0: prev,\n        p1: pt,\n        p0DataIndex: (i - 1) % count,\n        p1DataIndex: i % count,\n        datasetIndex\n      })));\n\n      if (styleChanged(style, prevStyle)) {\n        addStyle(start, i - 1, segment.loop, prevStyle);\n      }\n\n      prev = pt;\n      prevStyle = style;\n    }\n\n    if (start < i - 1) {\n      addStyle(start, i - 1, segment.loop, prevStyle);\n    }\n  }\n\n  return result;\n}\n\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\n\nfunction styleChanged(style, prevStyle) {\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvZGlzdC9jaHVua3MvaGVscGVycy5zZWdtZW50Lm1qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsSUFBVCxHQUFnQixDQUFFOztBQUNsQixNQUFNQyxHQUFHLEdBQUksWUFBVztFQUN0QixJQUFJQyxFQUFFLEdBQUcsQ0FBVDtFQUNBLE9BQU8sWUFBVztJQUNoQixPQUFPQSxFQUFFLEVBQVQ7RUFDRCxDQUZEO0FBR0QsQ0FMWSxFQUFiOztBQU1BLFNBQVNDLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQThCO0VBQzVCLE9BQU9BLEtBQUssS0FBSyxJQUFWLElBQWtCLE9BQU9BLEtBQVAsS0FBaUIsV0FBMUM7QUFDRDs7QUFDRCxTQUFTQyxPQUFULENBQWlCRCxLQUFqQixFQUF3QjtFQUN0QixJQUFJRSxLQUFLLENBQUNELE9BQU4sSUFBaUJDLEtBQUssQ0FBQ0QsT0FBTixDQUFjRCxLQUFkLENBQXJCLEVBQTJDO0lBQ3pDLE9BQU8sSUFBUDtFQUNEOztFQUNELE1BQU1HLElBQUksR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JQLEtBQS9CLENBQWI7O0VBQ0EsSUFBSUcsSUFBSSxDQUFDSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsTUFBcUIsU0FBckIsSUFBa0NMLElBQUksQ0FBQ0ssS0FBTCxDQUFXLENBQUMsQ0FBWixNQUFtQixRQUF6RCxFQUFtRTtJQUNqRSxPQUFPLElBQVA7RUFDRDs7RUFDRCxPQUFPLEtBQVA7QUFDRDs7QUFDRCxTQUFTQyxRQUFULENBQWtCVCxLQUFsQixFQUF5QjtF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O1FBQ2xDQyxRQUFRLENBQUN2MEIsS0FBRCxFQUFRaEksQ0FBQyxHQUFHLENBQVosRUFBZXU2QixPQUFPLENBQUM5RyxJQUF2QixFQUE2QjZJLFNBQTdCLENBQVI7TUFDRDs7TUFDRHpJLElBQUksR0FBR1YsRUFBUDtNQUNBbUosU0FBUyxHQUFHbGEsS0FBWjtJQUNEOztJQUNELElBQUlwYSxLQUFLLEdBQUdoSSxDQUFDLEdBQUcsQ0FBaEIsRUFBbUI7TUFDakJ1OEIsUUFBUSxDQUFDdjBCLEtBQUQsRUFBUWhJLENBQUMsR0FBRyxDQUFaLEVBQWV1NkIsT0FBTyxDQUFDOUcsSUFBdkIsRUFBNkI2SSxTQUE3QixDQUFSO0lBQ0Q7RUFDRjs7RUFDRCxPQUFPMzJCLE1BQVA7QUFDRDs7QUFDRCxTQUFTeTJCLFNBQVQsQ0FBbUI3NkIsT0FBbkIsRUFBNEI7RUFDMUIsT0FBTztJQUNMaWdCLGVBQWUsRUFBRWpnQixPQUFPLENBQUNpZ0IsZUFEcEI7SUFFTHNiLGNBQWMsRUFBRXY3QixPQUFPLENBQUN1N0IsY0FGbkI7SUFHTEMsVUFBVSxFQUFFeDdCLE9BQU8sQ0FBQ3c3QixVQUhmO0lBSUxDLGdCQUFnQixFQUFFejdCLE9BQU8sQ0FBQ3k3QixnQkFKckI7SUFLTEMsZUFBZSxFQUFFMTdCLE9BQU8sQ0FBQzA3QixlQUxwQjtJQU1McFYsV0FBVyxFQUFFdG1CLE9BQU8sQ0FBQ3NtQixXQU5oQjtJQU9McEcsV0FBVyxFQUFFbGdCLE9BQU8sQ0FBQ2tnQjtFQVBoQixDQUFQO0FBU0Q7O0FBQ0QsU0FBU29iLFlBQVQsQ0FBc0J6YSxLQUF0QixFQUE2QmthLFNBQTdCLEVBQXdDO0VBQ3RDLE9BQU9BLFNBQVMsSUFBSTdELElBQUksQ0FBQ0MsU0FBTCxDQUFldFcsS0FBZixNQUEwQnFXLElBQUksQ0FBQ0MsU0FBTCxDQUFlNEQsU0FBZixDQUE5QztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NodW5rcy9oZWxwZXJzLnNlZ21lbnQubWpzPzlhZDciXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDaGFydC5qcyB2My45LjFcbiAqIGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnXG4gKiAoYykgMjAyMiBDaGFydC5qcyBDb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG5mdW5jdGlvbiBub29wKCkge31cbmNvbnN0IHVpZCA9IChmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpZCsrO1xuICB9O1xufSgpKTtcbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWYodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh0eXBlLnNsaWNlKDAsIDcpID09PSAnW29iamVjdCcgJiYgdHlwZS5zbGljZSgtNikgPT09ICdBcnJheV0nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuY29uc3QgaXNOdW1iZXJGaW5pdGUgPSAodmFsdWUpID0+ICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSAmJiBpc0Zpbml0ZSgrdmFsdWUpO1xuZnVuY3Rpb24gZmluaXRlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgcmV0dXJuIGlzTnVtYmVyRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuZnVuY3Rpb24gdmFsdWVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xufVxuY29uc3QgdG9QZXJjZW50YWdlID0gKHZhbHVlLCBkaW1lbnNpb24pID0+XG4gIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/XG4gICAgcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDBcbiAgICA6IHZhbHVlIC8gZGltZW5zaW9uO1xuY29uc3QgdG9EaW1lbnNpb24gPSAodmFsdWUsIGRpbWVuc2lvbikgPT5cbiAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID9cbiAgICBwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMCAqIGRpbWVuc2lvblxuICAgIDogK3ZhbHVlO1xuZnVuY3Rpb24gY2FsbGJhY2soZm4sIGFyZ3MsIHRoaXNBcmcpIHtcbiAgaWYgKGZuICYmIHR5cGVvZiBmbi5jYWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG59XG5mdW5jdGlvbiBlYWNoKGxvb3BhYmxlLCBmbiwgdGhpc0FyZywgcmV2ZXJzZSkge1xuICBsZXQgaSwgbGVuLCBrZXlzO1xuICBpZiAoaXNBcnJheShsb29wYWJsZSkpIHtcbiAgICBsZW4gPSBsb29wYWJsZS5sZW5ndGg7XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVbaV0sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxvb3BhYmxlKSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyhsb29wYWJsZSk7XG4gICAgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2tleXNbaV1dLCBrZXlzW2ldKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIF9lbGVtZW50c0VxdWFsKGEwLCBhMSkge1xuICBsZXQgaSwgaWxlbiwgdjAsIHYxO1xuICBpZiAoIWEwIHx8ICFhMSB8fCBhMC5sZW5ndGggIT09IGExLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGkgPSAwLCBpbGVuID0gYTAubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgdjAgPSBhMFtpXTtcbiAgICB2MSA9IGExW2ldO1xuICAgIGlmICh2MC5kYXRhc2V0SW5kZXggIT09IHYxLmRhdGFzZXRJbmRleCB8fCB2MC5pbmRleCAhPT0gdjEuaW5kZXgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBjbG9uZSQxKHNvdXJjZSkge1xuICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgcmV0dXJuIHNvdXJjZS5tYXAoY2xvbmUkMSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIGNvbnN0IGtsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgayA9IDA7XG4gICAgZm9yICg7IGsgPCBrbGVuOyArK2spIHtcbiAgICAgIHRhcmdldFtrZXlzW2tdXSA9IGNsb25lJDEoc291cmNlW2tleXNba11dKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICByZXR1cm4gc291cmNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcbiAgcmV0dXJuIFsnX19wcm90b19fJywgJ3Byb3RvdHlwZScsICdjb25zdHJ1Y3RvciddLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG59XG5mdW5jdGlvbiBfbWVyZ2VyKGtleSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICBjb25zdCBzdmFsID0gc291cmNlW2tleV07XG4gIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgIG1lcmdlKHR2YWwsIHN2YWwsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldFtrZXldID0gY2xvbmUkMShzdmFsKTtcbiAgfVxufVxuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc291cmNlcyA9IGlzQXJyYXkoc291cmNlKSA/IHNvdXJjZSA6IFtzb3VyY2VdO1xuICBjb25zdCBpbGVuID0gc291cmNlcy5sZW5ndGg7XG4gIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IG1lcmdlciA9IG9wdGlvbnMubWVyZ2VyIHx8IF9tZXJnZXI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgc291cmNlID0gc291cmNlc1tpXTtcbiAgICBpZiAoIWlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICBmb3IgKGxldCBrID0gMCwga2xlbiA9IGtleXMubGVuZ3RoOyBrIDwga2xlbjsgKytrKSB7XG4gICAgICBtZXJnZXIoa2V5c1trXSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gbWVyZ2VJZih0YXJnZXQsIHNvdXJjZSkge1xuICByZXR1cm4gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIHttZXJnZXI6IF9tZXJnZXJJZn0pO1xufVxuZnVuY3Rpb24gX21lcmdlcklmKGtleSwgdGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdHZhbCA9IHRhcmdldFtrZXldO1xuICBjb25zdCBzdmFsID0gc291cmNlW2tleV07XG4gIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgIG1lcmdlSWYodHZhbCwgc3ZhbCk7XG4gIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IGNsb25lJDEoc3ZhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9kZXByZWNhdGVkKHNjb3BlLCB2YWx1ZSwgcHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oc2NvcGUgKyAnOiBcIicgKyBwcmV2aW91cyArXG5cdFx0XHQnXCIgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBcIicgKyBjdXJyZW50ICsgJ1wiIGluc3RlYWQnKTtcbiAgfVxufVxuY29uc3Qga2V5UmVzb2x2ZXJzID0ge1xuICAnJzogdiA9PiB2LFxuICB4OiBvID0+IG8ueCxcbiAgeTogbyA9PiBvLnlcbn07XG5mdW5jdGlvbiByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KSB7XG4gIGNvbnN0IHJlc29sdmVyID0ga2V5UmVzb2x2ZXJzW2tleV0gfHwgKGtleVJlc29sdmVyc1trZXldID0gX2dldEtleVJlc29sdmVyKGtleSkpO1xuICByZXR1cm4gcmVzb2x2ZXIob2JqKTtcbn1cbmZ1bmN0aW9uIF9nZXRLZXlSZXNvbHZlcihrZXkpIHtcbiAgY29uc3Qga2V5cyA9IF9zcGxpdEtleShrZXkpO1xuICByZXR1cm4gb2JqID0+IHtcbiAgICBmb3IgKGNvbnN0IGsgb2Yga2V5cykge1xuICAgICAgaWYgKGsgPT09ICcnKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgb2JqID0gb2JqICYmIG9ialtrXTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbn1cbmZ1bmN0aW9uIF9zcGxpdEtleShrZXkpIHtcbiAgY29uc3QgcGFydHMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgY29uc3Qga2V5cyA9IFtdO1xuICBsZXQgdG1wID0gJyc7XG4gIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgIHRtcCArPSBwYXJ0O1xuICAgIGlmICh0bXAuZW5kc1dpdGgoJ1xcXFwnKSkge1xuICAgICAgdG1wID0gdG1wLnNsaWNlKDAsIC0xKSArICcuJztcbiAgICB9IGVsc2Uge1xuICAgICAga2V5cy5wdXNoKHRtcCk7XG4gICAgICB0bXAgPSAnJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiBfY2FwaXRhbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbmNvbnN0IGRlZmluZWQgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG5jb25zdCBzZXRzRXF1YWwgPSAoYSwgYikgPT4ge1xuICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCBpdGVtIG9mIGEpIHtcbiAgICBpZiAoIWIuaGFzKGl0ZW0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmZ1bmN0aW9uIF9pc0NsaWNrRXZlbnQoZSkge1xuICByZXR1cm4gZS50eXBlID09PSAnbW91c2V1cCcgfHwgZS50eXBlID09PSAnY2xpY2snIHx8IGUudHlwZSA9PT0gJ2NvbnRleHRtZW51Jztcbn1cblxuY29uc3QgUEkgPSBNYXRoLlBJO1xuY29uc3QgVEFVID0gMiAqIFBJO1xuY29uc3QgUElUQVUgPSBUQVUgKyBQSTtcbmNvbnN0IElORklOSVRZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuY29uc3QgUkFEX1BFUl9ERUcgPSBQSSAvIDE4MDtcbmNvbnN0IEhBTEZfUEkgPSBQSSAvIDI7XG5jb25zdCBRVUFSVEVSX1BJID0gUEkgLyA0O1xuY29uc3QgVFdPX1RISVJEU19QSSA9IFBJICogMiAvIDM7XG5jb25zdCBsb2cxMCA9IE1hdGgubG9nMTA7XG5jb25zdCBzaWduID0gTWF0aC5zaWduO1xuZnVuY3Rpb24gbmljZU51bShyYW5nZSkge1xuICBjb25zdCByb3VuZGVkUmFuZ2UgPSBNYXRoLnJvdW5kKHJhbmdlKTtcbiAgcmFuZ2UgPSBhbG1vc3RFcXVhbHMocmFuZ2UsIHJvdW5kZWRSYW5nZSwgcmFuZ2UgLyAxMDAwKSA/IHJvdW5kZWRSYW5nZSA6IHJhbmdlO1xuICBjb25zdCBuaWNlUmFuZ2UgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChyYW5nZSkpKTtcbiAgY29uc3QgZnJhY3Rpb24gPSByYW5nZSAvIG5pY2VSYW5nZTtcbiAgY29uc3QgbmljZUZyYWN0aW9uID0gZnJhY3Rpb24gPD0gMSA/IDEgOiBmcmFjdGlvbiA8PSAyID8gMiA6IGZyYWN0aW9uIDw9IDUgPyA1IDogMTA7XG4gIHJldHVybiBuaWNlRnJhY3Rpb24gKiBuaWNlUmFuZ2U7XG59XG5mdW5jdGlvbiBfZmFjdG9yaXplKHZhbHVlKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0KHZhbHVlKTtcbiAgbGV0IGk7XG4gIGZvciAoaSA9IDE7IGkgPCBzcXJ0OyBpKyspIHtcbiAgICBpZiAodmFsdWUgJSBpID09PSAwKSB7XG4gICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlIC8gaSk7XG4gICAgfVxuICB9XG4gIGlmIChzcXJ0ID09PSAoc3FydCB8IDApKSB7XG4gICAgcmVzdWx0LnB1c2goc3FydCk7XG4gIH1cbiAgcmVzdWx0LnNvcnQoKGEsIGIpID0+IGEgLSBiKS5wb3AoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKG4pIHtcbiAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbmZ1bmN0aW9uIGFsbW9zdEVxdWFscyh4LCB5LCBlcHNpbG9uKSB7XG4gIHJldHVybiBNYXRoLmFicyh4IC0geSkgPCBlcHNpbG9uO1xufVxuZnVuY3Rpb24gYWxtb3N0V2hvbGUoeCwgZXBzaWxvbikge1xuICBjb25zdCByb3VuZGVkID0gTWF0aC5yb3VuZCh4KTtcbiAgcmV0dXJuICgocm91bmRlZCAtIGVwc2lsb24pIDw9IHgpICYmICgocm91bmRlZCArIGVwc2lsb24pID49IHgpO1xufVxuZnVuY3Rpb24gX3NldE1pbkFuZE1heEJ5S2V5KGFycmF5LCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgIHZhbHVlID0gYXJyYXlbaV1bcHJvcGVydHldO1xuICAgIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgICB0YXJnZXQubWluID0gTWF0aC5taW4odGFyZ2V0Lm1pbiwgdmFsdWUpO1xuICAgICAgdGFyZ2V0Lm1heCA9IE1hdGgubWF4KHRhcmdldC5tYXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRvUmFkaWFucyhkZWdyZWVzKSB7XG4gIHJldHVybiBkZWdyZWVzICogKFBJIC8gMTgwKTtcbn1cbmZ1bmN0aW9uIHRvRGVncmVlcyhyYWRpYW5zKSB7XG4gIHJldHVybiByYWRpYW5zICogKDE4MCAvIFBJKTtcbn1cbmZ1bmN0aW9uIF9kZWNpbWFsUGxhY2VzKHgpIHtcbiAgaWYgKCFpc051bWJlckZpbml0ZSh4KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgZSA9IDE7XG4gIGxldCBwID0gMDtcbiAgd2hpbGUgKE1hdGgucm91bmQoeCAqIGUpIC8gZSAhPT0geCkge1xuICAgIGUgKj0gMTA7XG4gICAgcCsrO1xuICB9XG4gIHJldHVybiBwO1xufVxuZnVuY3Rpb24gZ2V0QW5nbGVGcm9tUG9pbnQoY2VudHJlUG9pbnQsIGFuZ2xlUG9pbnQpIHtcbiAgY29uc3QgZGlzdGFuY2VGcm9tWENlbnRlciA9IGFuZ2xlUG9pbnQueCAtIGNlbnRyZVBvaW50Lng7XG4gIGNvbnN0IGRpc3RhbmNlRnJvbVlDZW50ZXIgPSBhbmdsZVBvaW50LnkgLSBjZW50cmVQb2ludC55O1xuICBjb25zdCByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG4gIGxldCBhbmdsZSA9IE1hdGguYXRhbjIoZGlzdGFuY2VGcm9tWUNlbnRlciwgZGlzdGFuY2VGcm9tWENlbnRlcik7XG4gIGlmIChhbmdsZSA8ICgtMC41ICogUEkpKSB7XG4gICAgYW5nbGUgKz0gVEFVO1xuICB9XG4gIHJldHVybiB7XG4gICAgYW5nbGUsXG4gICAgZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuICB9O1xufVxuZnVuY3Rpb24gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKHB0MSwgcHQyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocHQyLnggLSBwdDEueCwgMikgKyBNYXRoLnBvdyhwdDIueSAtIHB0MS55LCAyKSk7XG59XG5mdW5jdGlvbiBfYW5nbGVEaWZmKGEsIGIpIHtcbiAgcmV0dXJuIChhIC0gYiArIFBJVEFVKSAlIFRBVSAtIFBJO1xufVxuZnVuY3Rpb24gX25vcm1hbGl6ZUFuZ2xlKGEpIHtcbiAgcmV0dXJuIChhICUgVEFVICsgVEFVKSAlIFRBVTtcbn1cbmZ1bmN0aW9uIF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0LCBlbmQsIHNhbWVBbmdsZUlzRnVsbENpcmNsZSkge1xuICBjb25zdCBhID0gX25vcm1hbGl6ZUFuZ2xlKGFuZ2xlKTtcbiAgY29uc3QgcyA9IF9ub3JtYWxpemVBbmdsZShzdGFydCk7XG4gIGNvbnN0IGUgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgY29uc3QgYW5nbGVUb1N0YXJ0ID0gX25vcm1hbGl6ZUFuZ2xlKHMgLSBhKTtcbiAgY29uc3QgYW5nbGVUb0VuZCA9IF9ub3JtYWxpemVBbmdsZShlIC0gYSk7XG4gIGNvbnN0IHN0YXJ0VG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gcyk7XG4gIGNvbnN0IGVuZFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIGUpO1xuICByZXR1cm4gYSA9PT0gcyB8fCBhID09PSBlIHx8IChzYW1lQW5nbGVJc0Z1bGxDaXJjbGUgJiYgcyA9PT0gZSlcbiAgICB8fCAoYW5nbGVUb1N0YXJ0ID4gYW5nbGVUb0VuZCAmJiBzdGFydFRvQW5nbGUgPCBlbmRUb0FuZ2xlKTtcbn1cbmZ1bmN0aW9uIF9saW1pdFZhbHVlKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHZhbHVlKSk7XG59XG5mdW5jdGlvbiBfaW50MTZSYW5nZSh2YWx1ZSkge1xuICByZXR1cm4gX2xpbWl0VmFsdWUodmFsdWUsIC0zMjc2OCwgMzI3NjcpO1xufVxuZnVuY3Rpb24gX2lzQmV0d2Vlbih2YWx1ZSwgc3RhcnQsIGVuZCwgZXBzaWxvbiA9IDFlLTYpIHtcbiAgcmV0dXJuIHZhbHVlID49IE1hdGgubWluKHN0YXJ0LCBlbmQpIC0gZXBzaWxvbiAmJiB2YWx1ZSA8PSBNYXRoLm1heChzdGFydCwgZW5kKSArIGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIF9sb29rdXAodGFibGUsIHZhbHVlLCBjbXApIHtcbiAgY21wID0gY21wIHx8ICgoaW5kZXgpID0+IHRhYmxlW2luZGV4XSA8IHZhbHVlKTtcbiAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgbGV0IGxvID0gMDtcbiAgbGV0IG1pZDtcbiAgd2hpbGUgKGhpIC0gbG8gPiAxKSB7XG4gICAgbWlkID0gKGxvICsgaGkpID4+IDE7XG4gICAgaWYgKGNtcChtaWQpKSB7XG4gICAgICBsbyA9IG1pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaGkgPSBtaWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB7bG8sIGhpfTtcbn1cbmNvbnN0IF9sb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSwgbGFzdCkgPT5cbiAgX2xvb2t1cCh0YWJsZSwgdmFsdWUsIGxhc3RcbiAgICA/IGluZGV4ID0+IHRhYmxlW2luZGV4XVtrZXldIDw9IHZhbHVlXG4gICAgOiBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA8IHZhbHVlKTtcbmNvbnN0IF9ybG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpID0+XG4gIF9sb29rdXAodGFibGUsIHZhbHVlLCBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA+PSB2YWx1ZSk7XG5mdW5jdGlvbiBfZmlsdGVyQmV0d2Vlbih2YWx1ZXMsIG1pbiwgbWF4KSB7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSB2YWx1ZXMubGVuZ3RoO1xuICB3aGlsZSAoc3RhcnQgPCBlbmQgJiYgdmFsdWVzW3N0YXJ0XSA8IG1pbikge1xuICAgIHN0YXJ0Kys7XG4gIH1cbiAgd2hpbGUgKGVuZCA+IHN0YXJ0ICYmIHZhbHVlc1tlbmQgLSAxXSA+IG1heCkge1xuICAgIGVuZC0tO1xuICB9XG4gIHJldHVybiBzdGFydCA+IDAgfHwgZW5kIDwgdmFsdWVzLmxlbmd0aFxuICAgID8gdmFsdWVzLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgOiB2YWx1ZXM7XG59XG5jb25zdCBhcnJheUV2ZW50cyA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXTtcbmZ1bmN0aW9uIGxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuICBpZiAoYXJyYXkuX2NoYXJ0anMpIHtcbiAgICBhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZToge1xuICAgICAgbGlzdGVuZXJzOiBbbGlzdGVuZXJdXG4gICAgfVxuICB9KTtcbiAgYXJyYXlFdmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ19vbkRhdGEnICsgX2NhcGl0YWxpemUoa2V5KTtcbiAgICBjb25zdCBiYXNlID0gYXJyYXlba2V5XTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdFttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvYmplY3RbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gIGNvbnN0IHN0dWIgPSBhcnJheS5fY2hhcnRqcztcbiAgaWYgKCFzdHViKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBkZWxldGUgYXJyYXlba2V5XTtcbiAgfSk7XG4gIGRlbGV0ZSBhcnJheS5fY2hhcnRqcztcbn1cbmZ1bmN0aW9uIF9hcnJheVVuaXF1ZShpdGVtcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGxldCBpLCBpbGVuO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgc2V0LmFkZChpdGVtc1tpXSk7XG4gIH1cbiAgaWYgKHNldC5zaXplID09PSBpbGVuKSB7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5cbmZ1bmN0aW9uIGZvbnRTdHJpbmcocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcbiAgcmV0dXJuIGZvbnRTdHlsZSArICcgJyArIHBpeGVsU2l6ZSArICdweCAnICsgZm9udEZhbWlseTtcbn1cbmNvbnN0IHJlcXVlc3RBbmltRnJhbWUgPSAoZnVuY3Rpb24oKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbn0oKSk7XG5mdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcsIHVwZGF0ZUZuKSB7XG4gIGNvbnN0IHVwZGF0ZUFyZ3MgPSB1cGRhdGVGbiB8fCAoKGFyZ3MpID0+IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpKTtcbiAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgbGV0IGFyZ3MgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLnJlc3QpIHtcbiAgICBhcmdzID0gdXBkYXRlQXJncyhyZXN0KTtcbiAgICBpZiAoIXRpY2tpbmcpIHtcbiAgICAgIHRpY2tpbmcgPSB0cnVlO1xuICAgICAgcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCkgPT4ge1xuICAgICAgICB0aWNraW5nID0gZmFsc2U7XG4gICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIGRlbGF5KSB7XG4gIGxldCB0aW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGlmIChkZWxheSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZm4sIGRlbGF5LCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBkZWxheTtcbiAgfTtcbn1cbmNvbnN0IF90b0xlZnRSaWdodENlbnRlciA9IChhbGlnbikgPT4gYWxpZ24gPT09ICdzdGFydCcgPyAnbGVmdCcgOiBhbGlnbiA9PT0gJ2VuZCcgPyAncmlnaHQnIDogJ2NlbnRlcic7XG5jb25zdCBfYWxpZ25TdGFydEVuZCA9IChhbGlnbiwgc3RhcnQsIGVuZCkgPT4gYWxpZ24gPT09ICdzdGFydCcgPyBzdGFydCA6IGFsaWduID09PSAnZW5kJyA/IGVuZCA6IChzdGFydCArIGVuZCkgLyAyO1xuY29uc3QgX3RleHRYID0gKGFsaWduLCBsZWZ0LCByaWdodCwgcnRsKSA9PiB7XG4gIGNvbnN0IGNoZWNrID0gcnRsID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgcmV0dXJuIGFsaWduID09PSBjaGVjayA/IHJpZ2h0IDogYWxpZ24gPT09ICdjZW50ZXInID8gKGxlZnQgKyByaWdodCkgLyAyIDogbGVmdDtcbn07XG5mdW5jdGlvbiBfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyhtZXRhLCBwb2ludHMsIGFuaW1hdGlvbnNEaXNhYmxlZCkge1xuICBjb25zdCBwb2ludENvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGNvdW50ID0gcG9pbnRDb3VudDtcbiAgaWYgKG1ldGEuX3NvcnRlZCkge1xuICAgIGNvbnN0IHtpU2NhbGUsIF9wYXJzZWR9ID0gbWV0YTtcbiAgICBjb25zdCBheGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3Qge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoTWF0aC5taW4oXG4gICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBpU2NhbGUuYXhpcywgbWluKS5sbyxcbiAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gcG9pbnRDb3VudCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1pbikpLmxvKSxcbiAgICAgIDAsIHBvaW50Q291bnQgLSAxKTtcbiAgICB9XG4gICAgaWYgKG1heERlZmluZWQpIHtcbiAgICAgIGNvdW50ID0gX2xpbWl0VmFsdWUoTWF0aC5tYXgoXG4gICAgICAgIF9sb29rdXBCeUtleShfcGFyc2VkLCBpU2NhbGUuYXhpcywgbWF4LCB0cnVlKS5oaSArIDEsXG4gICAgICAgIGFuaW1hdGlvbnNEaXNhYmxlZCA/IDAgOiBfbG9va3VwQnlLZXkocG9pbnRzLCBheGlzLCBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShtYXgpLCB0cnVlKS5oaSArIDEpLFxuICAgICAgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge3N0YXJ0LCBjb3VudH07XG59XG5mdW5jdGlvbiBfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpIHtcbiAgY29uc3Qge3hTY2FsZSwgeVNjYWxlLCBfc2NhbGVSYW5nZXN9ID0gbWV0YTtcbiAgY29uc3QgbmV3UmFuZ2VzID0ge1xuICAgIHhtaW46IHhTY2FsZS5taW4sXG4gICAgeG1heDogeFNjYWxlLm1heCxcbiAgICB5bWluOiB5U2NhbGUubWluLFxuICAgIHltYXg6IHlTY2FsZS5tYXhcbiAgfTtcbiAgaWYgKCFfc2NhbGVSYW5nZXMpIHtcbiAgICBtZXRhLl9zY2FsZVJhbmdlcyA9IG5ld1JhbmdlcztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBjaGFuZ2VkID0gX3NjYWxlUmFuZ2VzLnhtaW4gIT09IHhTY2FsZS5taW5cblx0XHR8fCBfc2NhbGVSYW5nZXMueG1heCAhPT0geFNjYWxlLm1heFxuXHRcdHx8IF9zY2FsZVJhbmdlcy55bWluICE9PSB5U2NhbGUubWluXG5cdFx0fHwgX3NjYWxlUmFuZ2VzLnltYXggIT09IHlTY2FsZS5tYXg7XG4gIE9iamVjdC5hc3NpZ24oX3NjYWxlUmFuZ2VzLCBuZXdSYW5nZXMpO1xuICByZXR1cm4gY2hhbmdlZDtcbn1cblxuY29uc3QgYXRFZGdlID0gKHQpID0+IHQgPT09IDAgfHwgdCA9PT0gMTtcbmNvbnN0IGVsYXN0aWNJbiA9ICh0LCBzLCBwKSA9PiAtKE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgLSBzKSAqIFRBVSAvIHApKTtcbmNvbnN0IGVsYXN0aWNPdXQgPSAodCwgcywgcCkgPT4gTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkgKyAxO1xuY29uc3QgZWZmZWN0cyA9IHtcbiAgbGluZWFyOiB0ID0+IHQsXG4gIGVhc2VJblF1YWQ6IHQgPT4gdCAqIHQsXG4gIGVhc2VPdXRRdWFkOiB0ID0+IC10ICogKHQgLSAyKSxcbiAgZWFzZUluT3V0UXVhZDogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdFxuICAgIDogLTAuNSAqICgoLS10KSAqICh0IC0gMikgLSAxKSxcbiAgZWFzZUluQ3ViaWM6IHQgPT4gdCAqIHQgKiB0LFxuICBlYXNlT3V0Q3ViaWM6IHQgPT4gKHQgLT0gMSkgKiB0ICogdCArIDEsXG4gIGVhc2VJbk91dEN1YmljOiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0ICogdFxuICAgIDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKyAyKSxcbiAgZWFzZUluUXVhcnQ6IHQgPT4gdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1YXJ0OiB0ID0+IC0oKHQgLT0gMSkgKiB0ICogdCAqIHQgLSAxKSxcbiAgZWFzZUluT3V0UXVhcnQ6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHQgKiB0ICogdFxuICAgIDogLTAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpLFxuICBlYXNlSW5RdWludDogdCA9PiB0ICogdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1aW50OiB0ID0+ICh0IC09IDEpICogdCAqIHQgKiB0ICogdCArIDEsXG4gIGVhc2VJbk91dFF1aW50OiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0XG4gICAgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMiksXG4gIGVhc2VJblNpbmU6IHQgPT4gLU1hdGguY29zKHQgKiBIQUxGX1BJKSArIDEsXG4gIGVhc2VPdXRTaW5lOiB0ID0+IE1hdGguc2luKHQgKiBIQUxGX1BJKSxcbiAgZWFzZUluT3V0U2luZTogdCA9PiAtMC41ICogKE1hdGguY29zKFBJICogdCkgLSAxKSxcbiAgZWFzZUluRXhwbzogdCA9PiAodCA9PT0gMCkgPyAwIDogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSxcbiAgZWFzZU91dEV4cG86IHQgPT4gKHQgPT09IDEpID8gMSA6IC1NYXRoLnBvdygyLCAtMTAgKiB0KSArIDEsXG4gIGVhc2VJbk91dEV4cG86IHQgPT4gYXRFZGdlKHQpID8gdCA6IHQgPCAwLjVcbiAgICA/IDAuNSAqIE1hdGgucG93KDIsIDEwICogKHQgKiAyIC0gMSkpXG4gICAgOiAwLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqICh0ICogMiAtIDEpKSArIDIpLFxuICBlYXNlSW5DaXJjOiB0ID0+ICh0ID49IDEpID8gdCA6IC0oTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKSxcbiAgZWFzZU91dENpcmM6IHQgPT4gTWF0aC5zcXJ0KDEgLSAodCAtPSAxKSAqIHQpLFxuICBlYXNlSW5PdXRDaXJjOiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKVxuICAgIDogMC41ICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpLFxuICBlYXNlSW5FbGFzdGljOiB0ID0+IGF0RWRnZSh0KSA/IHQgOiBlbGFzdGljSW4odCwgMC4wNzUsIDAuMyksXG4gIGVhc2VPdXRFbGFzdGljOiB0ID0+IGF0RWRnZSh0KSA/IHQgOiBlbGFzdGljT3V0KHQsIDAuMDc1LCAwLjMpLFxuICBlYXNlSW5PdXRFbGFzdGljKHQpIHtcbiAgICBjb25zdCBzID0gMC4xMTI1O1xuICAgIGNvbnN0IHAgPSAwLjQ1O1xuICAgIHJldHVybiBhdEVkZ2UodCkgPyB0IDpcbiAgICAgIHQgPCAwLjVcbiAgICAgICAgPyAwLjUgKiBlbGFzdGljSW4odCAqIDIsIHMsIHApXG4gICAgICAgIDogMC41ICsgMC41ICogZWxhc3RpY091dCh0ICogMiAtIDEsIHMsIHApO1xuICB9LFxuICBlYXNlSW5CYWNrKHQpIHtcbiAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgfSxcbiAgZWFzZU91dEJhY2sodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiAodCAtPSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gIH0sXG4gIGVhc2VJbk91dEJhY2sodCkge1xuICAgIGxldCBzID0gMS43MDE1ODtcbiAgICBpZiAoKHQgLz0gMC41KSA8IDEpIHtcbiAgICAgIHJldHVybiAwLjUgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpO1xuICAgIH1cbiAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgKyBzKSArIDIpO1xuICB9LFxuICBlYXNlSW5Cb3VuY2U6IHQgPT4gMSAtIGVmZmVjdHMuZWFzZU91dEJvdW5jZSgxIC0gdCksXG4gIGVhc2VPdXRCb3VuY2UodCkge1xuICAgIGNvbnN0IG0gPSA3LjU2MjU7XG4gICAgY29uc3QgZCA9IDIuNzU7XG4gICAgaWYgKHQgPCAoMSAvIGQpKSB7XG4gICAgICByZXR1cm4gbSAqIHQgKiB0O1xuICAgIH1cbiAgICBpZiAodCA8ICgyIC8gZCkpIHtcbiAgICAgIHJldHVybiBtICogKHQgLT0gKDEuNSAvIGQpKSAqIHQgKyAwLjc1O1xuICAgIH1cbiAgICBpZiAodCA8ICgyLjUgLyBkKSkge1xuICAgICAgcmV0dXJuIG0gKiAodCAtPSAoMi4yNSAvIGQpKSAqIHQgKyAwLjkzNzU7XG4gICAgfVxuICAgIHJldHVybiBtICogKHQgLT0gKDIuNjI1IC8gZCkpICogdCArIDAuOTg0Mzc1O1xuICB9LFxuICBlYXNlSW5PdXRCb3VuY2U6IHQgPT4gKHQgPCAwLjUpXG4gICAgPyBlZmZlY3RzLmVhc2VJbkJvdW5jZSh0ICogMikgKiAwLjVcbiAgICA6IGVmZmVjdHMuZWFzZU91dEJvdW5jZSh0ICogMiAtIDEpICogMC41ICsgMC41LFxufTtcblxuLyohXG4gKiBAa3Vya2xlL2NvbG9yIHYwLjIuMVxuICogaHR0cHM6Ly9naXRodWIuY29tL2t1cmtsZS9jb2xvciNyZWFkbWVcbiAqIChjKSAyMDIyIEp1a2thIEt1cmtlbGFcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG5mdW5jdGlvbiByb3VuZCh2KSB7XG4gIHJldHVybiB2ICsgMC41IHwgMDtcbn1cbmNvbnN0IGxpbSA9ICh2LCBsLCBoKSA9PiBNYXRoLm1heChNYXRoLm1pbih2LCBoKSwgbCk7XG5mdW5jdGlvbiBwMmIodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAyLjU1KSwgMCwgMjU1KTtcbn1cbmZ1bmN0aW9uIG4yYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDI1NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBiMm4odikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgLyAyLjU1KSAvIDEwMCwgMCwgMSk7XG59XG5mdW5jdGlvbiBuMnAodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAxMDApLCAwLCAxMDApO1xufVxuY29uc3QgbWFwJDEgPSB7MDogMCwgMTogMSwgMjogMiwgMzogMywgNDogNCwgNTogNSwgNjogNiwgNzogNywgODogOCwgOTogOSwgQTogMTAsIEI6IDExLCBDOiAxMiwgRDogMTMsIEU6IDE0LCBGOiAxNSwgYTogMTAsIGI6IDExLCBjOiAxMiwgZDogMTMsIGU6IDE0LCBmOiAxNX07XG5jb25zdCBoZXggPSBbLi4uJzAxMjM0NTY3ODlBQkNERUYnXTtcbmNvbnN0IGgxID0gYiA9PiBoZXhbYiAmIDB4Rl07XG5jb25zdCBoMiA9IGIgPT4gaGV4WyhiICYgMHhGMCkgPj4gNF0gKyBoZXhbYiAmIDB4Rl07XG5jb25zdCBlcSA9IGIgPT4gKChiICYgMHhGMCkgPj4gNCkgPT09IChiICYgMHhGKTtcbmNvbnN0IGlzU2hvcnQgPSB2ID0+IGVxKHYucikgJiYgZXEodi5nKSAmJiBlcSh2LmIpICYmIGVxKHYuYSk7XG5mdW5jdGlvbiBoZXhQYXJzZShzdHIpIHtcbiAgdmFyIGxlbiA9IHN0ci5sZW5ndGg7XG4gIHZhciByZXQ7XG4gIGlmIChzdHJbMF0gPT09ICcjJykge1xuICAgIGlmIChsZW4gPT09IDQgfHwgbGVuID09PSA1KSB7XG4gICAgICByZXQgPSB7XG4gICAgICAgIHI6IDI1NSAmIG1hcCQxW3N0clsxXV0gKiAxNyxcbiAgICAgICAgZzogMjU1ICYgbWFwJDFbc3RyWzJdXSAqIDE3LFxuICAgICAgICBiOiAyNTUgJiBtYXAkMVtzdHJbM11dICogMTcsXG4gICAgICAgIGE6IGxlbiA9PT0gNSA/IG1hcCQxW3N0cls0XV0gKiAxNyA6IDI1NVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gNyB8fCBsZW4gPT09IDkpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogbWFwJDFbc3RyWzFdXSA8PCA0IHwgbWFwJDFbc3RyWzJdXSxcbiAgICAgICAgZzogbWFwJDFbc3RyWzNdXSA8PCA0IHwgbWFwJDFbc3RyWzRdXSxcbiAgICAgICAgYjogbWFwJDFbc3RyWzVdXSA8PCA0IHwgbWFwJDFbc3RyWzZdXSxcbiAgICAgICAgYTogbGVuID09PSA5ID8gKG1hcCQxW3N0cls3XV0gPDwgNCB8IG1hcCQxW3N0cls4XV0pIDogMjU1XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuY29uc3QgYWxwaGEgPSAoYSwgZikgPT4gYSA8IDI1NSA/IGYoYSkgOiAnJztcbmZ1bmN0aW9uIGhleFN0cmluZyh2KSB7XG4gIHZhciBmID0gaXNTaG9ydCh2KSA/IGgxIDogaDI7XG4gIHJldHVybiB2XG4gICAgPyAnIycgKyBmKHYucikgKyBmKHYuZykgKyBmKHYuYikgKyBhbHBoYSh2LmEsIGYpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5jb25zdCBIVUVfUkUgPSAvXihoc2xhP3xod2J8aHN2KVxcKFxccyooWy0rLmVcXGRdKykoPzpkZWcpP1tcXHMsXSsoWy0rLmVcXGRdKyklW1xccyxdKyhbLSsuZVxcZF0rKSUoPzpbXFxzLF0rKFstKy5lXFxkXSspKCUpPyk/XFxzKlxcKSQvO1xuZnVuY3Rpb24gaHNsMnJnYm4oaCwgcywgbCkge1xuICBjb25zdCBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuICByZXR1cm4gW2YoMCksIGYoOCksIGYoNCldO1xufVxuZnVuY3Rpb24gaHN2MnJnYm4oaCwgcywgdikge1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyA2MCkgJSA2KSA9PiB2IC0gdiAqIHMgKiBNYXRoLm1heChNYXRoLm1pbihrLCA0IC0gaywgMSksIDApO1xuICByZXR1cm4gW2YoNSksIGYoMyksIGYoMSldO1xufVxuZnVuY3Rpb24gaHdiMnJnYm4oaCwgdywgYikge1xuICBjb25zdCByZ2IgPSBoc2wycmdibihoLCAxLCAwLjUpO1xuICBsZXQgaTtcbiAgaWYgKHcgKyBiID4gMSkge1xuICAgIGkgPSAxIC8gKHcgKyBiKTtcbiAgICB3ICo9IGk7XG4gICAgYiAqPSBpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICByZ2JbaV0gKj0gMSAtIHcgLSBiO1xuICAgIHJnYltpXSArPSB3O1xuICB9XG4gIHJldHVybiByZ2I7XG59XG5mdW5jdGlvbiBodWVWYWx1ZShyLCBnLCBiLCBkLCBtYXgpIHtcbiAgaWYgKHIgPT09IG1heCkge1xuICAgIHJldHVybiAoKGcgLSBiKSAvIGQpICsgKGcgPCBiID8gNiA6IDApO1xuICB9XG4gIGlmIChnID09PSBtYXgpIHtcbiAgICByZXR1cm4gKGIgLSByKSAvIGQgKyAyO1xuICB9XG4gIHJldHVybiAociAtIGcpIC8gZCArIDQ7XG59XG5mdW5jdGlvbiByZ2IyaHNsKHYpIHtcbiAgY29uc3QgcmFuZ2UgPSAyNTU7XG4gIGNvbnN0IHIgPSB2LnIgLyByYW5nZTtcbiAgY29uc3QgZyA9IHYuZyAvIHJhbmdlO1xuICBjb25zdCBiID0gdi5iIC8gcmFuZ2U7XG4gIGNvbnN0IG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICBjb25zdCBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgY29uc3QgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgbGV0IGgsIHMsIGQ7XG4gIGlmIChtYXggIT09IG1pbikge1xuICAgIGQgPSBtYXggLSBtaW47XG4gICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgIGggPSBodWVWYWx1ZShyLCBnLCBiLCBkLCBtYXgpO1xuICAgIGggPSBoICogNjAgKyAwLjU7XG4gIH1cbiAgcmV0dXJuIFtoIHwgMCwgcyB8fCAwLCBsXTtcbn1cbmZ1bmN0aW9uIGNhbGxuKGYsIGEsIGIsIGMpIHtcbiAgcmV0dXJuIChcbiAgICBBcnJheS5pc0FycmF5KGEpXG4gICAgICA/IGYoYVswXSwgYVsxXSwgYVsyXSlcbiAgICAgIDogZihhLCBiLCBjKVxuICApLm1hcChuMmIpO1xufVxuZnVuY3Rpb24gaHNsMnJnYihoLCBzLCBsKSB7XG4gIHJldHVybiBjYWxsbihoc2wycmdibiwgaCwgcywgbCk7XG59XG5mdW5jdGlvbiBod2IycmdiKGgsIHcsIGIpIHtcbiAgcmV0dXJuIGNhbGxuKGh3YjJyZ2JuLCBoLCB3LCBiKTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2IoaCwgcywgdikge1xuICByZXR1cm4gY2FsbG4oaHN2MnJnYm4sIGgsIHMsIHYpO1xufVxuZnVuY3Rpb24gaHVlKGgpIHtcbiAgcmV0dXJuIChoICUgMzYwICsgMzYwKSAlIDM2MDtcbn1cbmZ1bmN0aW9uIGh1ZVBhcnNlKHN0cikge1xuICBjb25zdCBtID0gSFVFX1JFLmV4ZWMoc3RyKTtcbiAgbGV0IGEgPSAyNTU7XG4gIGxldCB2O1xuICBpZiAoIW0pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1bNV0gIT09IHYpIHtcbiAgICBhID0gbVs2XSA/IHAyYigrbVs1XSkgOiBuMmIoK21bNV0pO1xuICB9XG4gIGNvbnN0IGggPSBodWUoK21bMl0pO1xuICBjb25zdCBwMSA9ICttWzNdIC8gMTAwO1xuICBjb25zdCBwMiA9ICttWzRdIC8gMTAwO1xuICBpZiAobVsxXSA9PT0gJ2h3YicpIHtcbiAgICB2ID0gaHdiMnJnYihoLCBwMSwgcDIpO1xuICB9IGVsc2UgaWYgKG1bMV0gPT09ICdoc3YnKSB7XG4gICAgdiA9IGhzdjJyZ2IoaCwgcDEsIHAyKTtcbiAgfSBlbHNlIHtcbiAgICB2ID0gaHNsMnJnYihoLCBwMSwgcDIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgcjogdlswXSxcbiAgICBnOiB2WzFdLFxuICAgIGI6IHZbMl0sXG4gICAgYTogYVxuICB9O1xufVxuZnVuY3Rpb24gcm90YXRlKHYsIGRlZykge1xuICB2YXIgaCA9IHJnYjJoc2wodik7XG4gIGhbMF0gPSBodWUoaFswXSArIGRlZyk7XG4gIGggPSBoc2wycmdiKGgpO1xuICB2LnIgPSBoWzBdO1xuICB2LmcgPSBoWzFdO1xuICB2LmIgPSBoWzJdO1xufVxuZnVuY3Rpb24gaHNsU3RyaW5nKHYpIHtcbiAgaWYgKCF2KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGEgPSByZ2IyaHNsKHYpO1xuICBjb25zdCBoID0gYVswXTtcbiAgY29uc3QgcyA9IG4ycChhWzFdKTtcbiAgY29uc3QgbCA9IG4ycChhWzJdKTtcbiAgcmV0dXJuIHYuYSA8IDI1NVxuICAgID8gYGhzbGEoJHtofSwgJHtzfSUsICR7bH0lLCAke2Iybih2LmEpfSlgXG4gICAgOiBgaHNsKCR7aH0sICR7c30lLCAke2x9JSlgO1xufVxuY29uc3QgbWFwID0ge1xuICB4OiAnZGFyaycsXG4gIFo6ICdsaWdodCcsXG4gIFk6ICdyZScsXG4gIFg6ICdibHUnLFxuICBXOiAnZ3InLFxuICBWOiAnbWVkaXVtJyxcbiAgVTogJ3NsYXRlJyxcbiAgQTogJ2VlJyxcbiAgVDogJ29sJyxcbiAgUzogJ29yJyxcbiAgQjogJ3JhJyxcbiAgQzogJ2xhdGVnJyxcbiAgRDogJ2lnaHRzJyxcbiAgUjogJ2luJyxcbiAgUTogJ3R1cnF1b2lzJyxcbiAgRTogJ2hpJyxcbiAgUDogJ3JvJyxcbiAgTzogJ2FsJyxcbiAgTjogJ2xlJyxcbiAgTTogJ2RlJyxcbiAgTDogJ3llbGxvJyxcbiAgRjogJ2VuJyxcbiAgSzogJ2NoJyxcbiAgRzogJ2Fya3MnLFxuICBIOiAnZWEnLFxuICBJOiAnaWdodGcnLFxuICBKOiAnd2gnXG59O1xuY29uc3QgbmFtZXMkMSA9IHtcbiAgT2ljZVhlOiAnZjBmOGZmJyxcbiAgYW50aXF1ZXdFdGU6ICdmYWViZDcnLFxuICBhcXVhOiAnZmZmZicsXG4gIGFxdWFtYXJSZTogJzdmZmZkNCcsXG4gIGF6dVk6ICdmMGZmZmYnLFxuICBiZWlnZTogJ2Y1ZjVkYycsXG4gIGJpc3F1ZTogJ2ZmZTRjNCcsXG4gIGJsYWNrOiAnMCcsXG4gIGJsYW5LZWRPbW9uZDogJ2ZmZWJjZCcsXG4gIFhlOiAnZmYnLFxuICBYZXZpVGV0OiAnOGEyYmUyJyxcbiAgYlB3bjogJ2E1MmEyYScsXG4gIGJ1cmx5d29vZDogJ2RlYjg4NycsXG4gIGNhTXRYZTogJzVmOWVhMCcsXG4gIEthcnRZdXNlOiAnN2ZmZjAwJyxcbiAgS29jVGF0ZTogJ2QyNjkxZScsXG4gIGNTTzogJ2ZmN2Y1MCcsXG4gIGNTbmZsb3dlclhlOiAnNjQ5NWVkJyxcbiAgY1Nuc2lsazogJ2ZmZjhkYycsXG4gIGNyaW1zb246ICdkYzE0M2MnLFxuICBjeWFuOiAnZmZmZicsXG4gIHhYZTogJzhiJyxcbiAgeGN5YW46ICc4YjhiJyxcbiAgeGdUTW5QZDogJ2I4ODYwYicsXG4gIHhXYXk6ICdhOWE5YTknLFxuICB4Z1lGOiAnNjQwMCcsXG4gIHhnWXk6ICdhOWE5YTknLFxuICB4a2hha2k6ICdiZGI3NmInLFxuICB4bWFnRnRhOiAnOGIwMDhiJyxcbiAgeFRpdmVnWUY6ICc1NTZiMmYnLFxuICB4U2FuZ2U6ICdmZjhjMDAnLFxuICB4U2NFZDogJzk5MzJjYycsXG4gIHhZZDogJzhiMDAwMCcsXG4gIHhzT21vbjogJ2U5OTY3YScsXG4gIHhzSGdZRjogJzhmYmM4ZicsXG4gIHhVWGU6ICc0ODNkOGInLFxuICB4VVdheTogJzJmNGY0ZicsXG4gIHhVZ1l5OiAnMmY0ZjRmJyxcbiAgeFFlOiAnY2VkMScsXG4gIHh2aVRldDogJzk0MDBkMycsXG4gIGRBcHBSazogJ2ZmMTQ5MycsXG4gIGRBcHNreVhlOiAnYmZmZicsXG4gIGRpbVdheTogJzY5Njk2OScsXG4gIGRpbWdZeTogJzY5Njk2OScsXG4gIGRvZGdlclhlOiAnMWU5MGZmJyxcbiAgZmlZYnJpY2s6ICdiMjIyMjInLFxuICBmbFNPd0V0ZTogJ2ZmZmFmMCcsXG4gIGZvWXN0V0FuOiAnMjI4YjIyJyxcbiAgZnVLc2lhOiAnZmYwMGZmJyxcbiAgZ2FSc2JTbzogJ2RjZGNkYycsXG4gIGdob3N0d0V0ZTogJ2Y4ZjhmZicsXG4gIGdUZDogJ2ZmZDcwMCcsXG4gIGdUTW5QZDogJ2RhYTUyMCcsXG4gIFdheTogJzgwODA4MCcsXG4gIGdZRjogJzgwMDAnLFxuICBnWUZMdzogJ2FkZmYyZicsXG4gIGdZeTogJzgwODA4MCcsXG4gIGhvbmV5TXc6ICdmMGZmZjAnLFxuICBob3RwUms6ICdmZjY5YjQnLFxuICBSZGlhbllkOiAnY2Q1YzVjJyxcbiAgUmRpZ286ICc0YjAwODInLFxuICBpdlN5OiAnZmZmZmYwJyxcbiAga2hha2k6ICdmMGU2OGMnLFxuICBsYXZGTXI6ICdlNmU2ZmEnLFxuICBsYXZGTXJYc2g6ICdmZmYwZjUnLFxuICBsYXduZ1lGOiAnN2NmYzAwJyxcbiAgTm1vbmNFZmZvbjogJ2ZmZmFjZCcsXG4gIFpYZTogJ2FkZDhlNicsXG4gIFpjU086ICdmMDgwODAnLFxuICBaY3lhbjogJ2UwZmZmZicsXG4gIFpnVE1uUGRMdzogJ2ZhZmFkMicsXG4gIFpXYXk6ICdkM2QzZDMnLFxuICBaZ1lGOiAnOTBlZTkwJyxcbiAgWmdZeTogJ2QzZDNkMycsXG4gIFpwUms6ICdmZmI2YzEnLFxuICBac09tb246ICdmZmEwN2EnLFxuICBac0hnWUY6ICcyMGIyYWEnLFxuICBac2t5WGU6ICc4N2NlZmEnLFxuICBaVVdheTogJzc3ODg5OScsXG4gIFpVZ1l5OiAnNzc4ODk5JyxcbiAgWnN0QWxYZTogJ2IwYzRkZScsXG4gIFpMdzogJ2ZmZmZlMCcsXG4gIGxpbWU6ICdmZjAwJyxcbiAgbGltZWdZRjogJzMyY2QzMicsXG4gIGxSRjogJ2ZhZjBlNicsXG4gIG1hZ0Z0YTogJ2ZmMDBmZicsXG4gIG1hUG9uOiAnODAwMDAwJyxcbiAgVmFxdWFtYXJSZTogJzY2Y2RhYScsXG4gIFZYZTogJ2NkJyxcbiAgVlNjRWQ6ICdiYTU1ZDMnLFxuICBWcHVycE46ICc5MzcwZGInLFxuICBWc0hnWUY6ICczY2IzNzEnLFxuICBWVVhlOiAnN2I2OGVlJyxcbiAgVnNwclJnZ1lGOiAnZmE5YScsXG4gIFZRZTogJzQ4ZDFjYycsXG4gIFZ2aVRldFlkOiAnYzcxNTg1JyxcbiAgbWlkbmlnaHRYZTogJzE5MTk3MCcsXG4gIG1SdGNZYW06ICdmNWZmZmEnLFxuICBtaXN0eVBzZTogJ2ZmZTRlMScsXG4gIG1vY2Nhc1I6ICdmZmU0YjUnLFxuICBuYXZham93RXRlOiAnZmZkZWFkJyxcbiAgbmF2eTogJzgwJyxcbiAgVGRsYWNlOiAnZmRmNWU2JyxcbiAgVGl2ZTogJzgwODAwMCcsXG4gIFRpdmVkQmI6ICc2YjhlMjMnLFxuICBTYW5nZTogJ2ZmYTUwMCcsXG4gIFNhbmdlWWQ6ICdmZjQ1MDAnLFxuICBTY0VkOiAnZGE3MGQ2JyxcbiAgcE9lZ1RNblBkOiAnZWVlOGFhJyxcbiAgcE9lZ1lGOiAnOThmYjk4JyxcbiAgcE9lUWU6ICdhZmVlZWUnLFxuICBwT2V2aVRldFlkOiAnZGI3MDkzJyxcbiAgcGFwYXlhd0VwOiAnZmZlZmQ1JyxcbiAgcEhLcHVmZjogJ2ZmZGFiOScsXG4gIHBlcnU6ICdjZDg1M2YnLFxuICBwUms6ICdmZmMwY2InLFxuICBwbHVtOiAnZGRhMGRkJyxcbiAgcG93TXJYZTogJ2IwZTBlNicsXG4gIHB1cnBOOiAnODAwMDgwJyxcbiAgWWJlY2NhcHVycE46ICc2NjMzOTknLFxuICBZZDogJ2ZmMDAwMCcsXG4gIFBzeWJyb3duOiAnYmM4ZjhmJyxcbiAgUHlPWGU6ICc0MTY5ZTEnLFxuICBzYWRkTmJQd246ICc4YjQ1MTMnLFxuICBzT21vbjogJ2ZhODA3MicsXG4gIHNhbmR5YlB3bjogJ2Y0YTQ2MCcsXG4gIHNIZ1lGOiAnMmU4YjU3JyxcbiAgc0hzaGVsbDogJ2ZmZjVlZScsXG4gIHNpRm5hOiAnYTA1MjJkJyxcbiAgc2lsdmVyOiAnYzBjMGMwJyxcbiAgc2t5WGU6ICc4N2NlZWInLFxuICBVWGU6ICc2YTVhY2QnLFxuICBVV2F5OiAnNzA4MDkwJyxcbiAgVWdZeTogJzcwODA5MCcsXG4gIHNub3c6ICdmZmZhZmEnLFxuICBzcHJSZ2dZRjogJ2ZmN2YnLFxuICBzdEFsWGU6ICc0NjgyYjQnLFxuICB0YW46ICdkMmI0OGMnLFxuICB0ZU86ICc4MDgwJyxcbiAgdEVzdE46ICdkOGJmZDgnLFxuICB0b21hdG86ICdmZjYzNDcnLFxuICBRZTogJzQwZTBkMCcsXG4gIHZpVGV0OiAnZWU4MmVlJyxcbiAgSkh0OiAnZjVkZWIzJyxcbiAgd0V0ZTogJ2ZmZmZmZicsXG4gIHdFdGVzbW9rZTogJ2Y1ZjVmNScsXG4gIEx3OiAnZmZmZjAwJyxcbiAgTHdnWUY6ICc5YWNkMzInXG59O1xuZnVuY3Rpb24gdW5wYWNrKCkge1xuICBjb25zdCB1bnBhY2tlZCA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmFtZXMkMSk7XG4gIGNvbnN0IHRrZXlzID0gT2JqZWN0LmtleXMobWFwKTtcbiAgbGV0IGksIGosIGssIG9rLCBuaztcbiAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBvayA9IG5rID0ga2V5c1tpXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgdGtleXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGsgPSB0a2V5c1tqXTtcbiAgICAgIG5rID0gbmsucmVwbGFjZShrLCBtYXBba10pO1xuICAgIH1cbiAgICBrID0gcGFyc2VJbnQobmFtZXMkMVtva10sIDE2KTtcbiAgICB1bnBhY2tlZFtua10gPSBbayA+PiAxNiAmIDB4RkYsIGsgPj4gOCAmIDB4RkYsIGsgJiAweEZGXTtcbiAgfVxuICByZXR1cm4gdW5wYWNrZWQ7XG59XG5sZXQgbmFtZXM7XG5mdW5jdGlvbiBuYW1lUGFyc2Uoc3RyKSB7XG4gIGlmICghbmFtZXMpIHtcbiAgICBuYW1lcyA9IHVucGFjaygpO1xuICAgIG5hbWVzLnRyYW5zcGFyZW50ID0gWzAsIDAsIDAsIDBdO1xuICB9XG4gIGNvbnN0IGEgPSBuYW1lc1tzdHIudG9Mb3dlckNhc2UoKV07XG4gIHJldHVybiBhICYmIHtcbiAgICByOiBhWzBdLFxuICAgIGc6IGFbMV0sXG4gICAgYjogYVsyXSxcbiAgICBhOiBhLmxlbmd0aCA9PT0gNCA/IGFbM10gOiAyNTVcbiAgfTtcbn1cbmNvbnN0IFJHQl9SRSA9IC9ecmdiYT9cXChcXHMqKFstKy5cXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpPyg/OltcXHMsL10rKFstKy5lXFxkXSspKCUpPyk/XFxzKlxcKSQvO1xuZnVuY3Rpb24gcmdiUGFyc2Uoc3RyKSB7XG4gIGNvbnN0IG0gPSBSR0JfUkUuZXhlYyhzdHIpO1xuICBsZXQgYSA9IDI1NTtcbiAgbGV0IHIsIGcsIGI7XG4gIGlmICghbSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobVs3XSAhPT0gcikge1xuICAgIGNvbnN0IHYgPSArbVs3XTtcbiAgICBhID0gbVs4XSA/IHAyYih2KSA6IGxpbSh2ICogMjU1LCAwLCAyNTUpO1xuICB9XG4gIHIgPSArbVsxXTtcbiAgZyA9ICttWzNdO1xuICBiID0gK21bNV07XG4gIHIgPSAyNTUgJiAobVsyXSA/IHAyYihyKSA6IGxpbShyLCAwLCAyNTUpKTtcbiAgZyA9IDI1NSAmIChtWzRdID8gcDJiKGcpIDogbGltKGcsIDAsIDI1NSkpO1xuICBiID0gMjU1ICYgKG1bNl0gPyBwMmIoYikgOiBsaW0oYiwgMCwgMjU1KSk7XG4gIHJldHVybiB7XG4gICAgcjogcixcbiAgICBnOiBnLFxuICAgIGI6IGIsXG4gICAgYTogYVxuICB9O1xufVxuZnVuY3Rpb24gcmdiU3RyaW5nKHYpIHtcbiAgcmV0dXJuIHYgJiYgKFxuICAgIHYuYSA8IDI1NVxuICAgICAgPyBgcmdiYSgke3Yucn0sICR7di5nfSwgJHt2LmJ9LCAke2Iybih2LmEpfSlgXG4gICAgICA6IGByZ2IoJHt2LnJ9LCAke3YuZ30sICR7di5ifSlgXG4gICk7XG59XG5jb25zdCB0byA9IHYgPT4gdiA8PSAwLjAwMzEzMDggPyB2ICogMTIuOTIgOiBNYXRoLnBvdyh2LCAxLjAgLyAyLjQpICogMS4wNTUgLSAwLjA1NTtcbmNvbnN0IGZyb20gPSB2ID0+IHYgPD0gMC4wNDA0NSA/IHYgLyAxMi45MiA6IE1hdGgucG93KCh2ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShyZ2IxLCByZ2IyLCB0KSB7XG4gIGNvbnN0IHIgPSBmcm9tKGIybihyZ2IxLnIpKTtcbiAgY29uc3QgZyA9IGZyb20oYjJuKHJnYjEuZykpO1xuICBjb25zdCBiID0gZnJvbShiMm4ocmdiMS5iKSk7XG4gIHJldHVybiB7XG4gICAgcjogbjJiKHRvKHIgKyB0ICogKGZyb20oYjJuKHJnYjIucikpIC0gcikpKSxcbiAgICBnOiBuMmIodG8oZyArIHQgKiAoZnJvbShiMm4ocmdiMi5nKSkgLSBnKSkpLFxuICAgIGI6IG4yYih0byhiICsgdCAqIChmcm9tKGIybihyZ2IyLmIpKSAtIGIpKSksXG4gICAgYTogcmdiMS5hICsgdCAqIChyZ2IyLmEgLSByZ2IxLmEpXG4gIH07XG59XG5mdW5jdGlvbiBtb2RIU0wodiwgaSwgcmF0aW8pIHtcbiAgaWYgKHYpIHtcbiAgICBsZXQgdG1wID0gcmdiMmhzbCh2KTtcbiAgICB0bXBbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0bXBbaV0gKyB0bXBbaV0gKiByYXRpbywgaSA9PT0gMCA/IDM2MCA6IDEpKTtcbiAgICB0bXAgPSBoc2wycmdiKHRtcCk7XG4gICAgdi5yID0gdG1wWzBdO1xuICAgIHYuZyA9IHRtcFsxXTtcbiAgICB2LmIgPSB0bXBbMl07XG4gIH1cbn1cbmZ1bmN0aW9uIGNsb25lKHYsIHByb3RvKSB7XG4gIHJldHVybiB2ID8gT2JqZWN0LmFzc2lnbihwcm90byB8fCB7fSwgdikgOiB2O1xufVxuZnVuY3Rpb24gZnJvbU9iamVjdChpbnB1dCkge1xuICB2YXIgdiA9IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID49IDMpIHtcbiAgICAgIHYgPSB7cjogaW5wdXRbMF0sIGc6IGlucHV0WzFdLCBiOiBpbnB1dFsyXSwgYTogMjU1fTtcbiAgICAgIGlmIChpbnB1dC5sZW5ndGggPiAzKSB7XG4gICAgICAgIHYuYSA9IG4yYihpbnB1dFszXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHYgPSBjbG9uZShpbnB1dCwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDF9KTtcbiAgICB2LmEgPSBuMmIodi5hKTtcbiAgfVxuICByZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uUGFyc2Uoc3RyKSB7XG4gIGlmIChzdHIuY2hhckF0KDApID09PSAncicpIHtcbiAgICByZXR1cm4gcmdiUGFyc2Uoc3RyKTtcbiAgfVxuICByZXR1cm4gaHVlUGFyc2Uoc3RyKTtcbn1cbmNsYXNzIENvbG9yIHtcbiAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvcikge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuICAgIGxldCB2O1xuICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdiA9IGZyb21PYmplY3QoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHYgPSBoZXhQYXJzZShpbnB1dCkgfHwgbmFtZVBhcnNlKGlucHV0KSB8fCBmdW5jdGlvblBhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdGhpcy5fcmdiID0gdjtcbiAgICB0aGlzLl92YWxpZCA9ICEhdjtcbiAgfVxuICBnZXQgdmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkO1xuICB9XG4gIGdldCByZ2IoKSB7XG4gICAgdmFyIHYgPSBjbG9uZSh0aGlzLl9yZ2IpO1xuICAgIGlmICh2KSB7XG4gICAgICB2LmEgPSBiMm4odi5hKTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cbiAgc2V0IHJnYihvYmopIHtcbiAgICB0aGlzLl9yZ2IgPSBmcm9tT2JqZWN0KG9iaik7XG4gIH1cbiAgcmdiU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IHJnYlN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhleFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoZXhTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBoc2xTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gaHNsU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgbWl4KGNvbG9yLCB3ZWlnaHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbnN0IGMxID0gdGhpcy5yZ2I7XG4gICAgICBjb25zdCBjMiA9IGNvbG9yLnJnYjtcbiAgICAgIGxldCB3MjtcbiAgICAgIGNvbnN0IHAgPSB3ZWlnaHQgPT09IHcyID8gMC41IDogd2VpZ2h0O1xuICAgICAgY29uc3QgdyA9IDIgKiBwIC0gMTtcbiAgICAgIGNvbnN0IGEgPSBjMS5hIC0gYzIuYTtcbiAgICAgIGNvbnN0IHcxID0gKCh3ICogYSA9PT0gLTEgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuICAgICAgdzIgPSAxIC0gdzE7XG4gICAgICBjMS5yID0gMHhGRiAmIHcxICogYzEuciArIHcyICogYzIuciArIDAuNTtcbiAgICAgIGMxLmcgPSAweEZGICYgdzEgKiBjMS5nICsgdzIgKiBjMi5nICsgMC41O1xuICAgICAgYzEuYiA9IDB4RkYgJiB3MSAqIGMxLmIgKyB3MiAqIGMyLmIgKyAwLjU7XG4gICAgICBjMS5hID0gcCAqIGMxLmEgKyAoMSAtIHApICogYzIuYTtcbiAgICAgIHRoaXMucmdiID0gYzE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGludGVycG9sYXRlKGNvbG9yLCB0KSB7XG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICB0aGlzLl9yZ2IgPSBpbnRlcnBvbGF0ZSh0aGlzLl9yZ2IsIGNvbG9yLl9yZ2IsIHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IENvbG9yKHRoaXMucmdiKTtcbiAgfVxuICBhbHBoYShhKSB7XG4gICAgdGhpcy5fcmdiLmEgPSBuMmIoYSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXJlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxIC0gcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ3JleXNjYWxlKCkge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICBjb25zdCB2YWwgPSByb3VuZChyZ2IuciAqIDAuMyArIHJnYi5nICogMC41OSArIHJnYi5iICogMC4xMSk7XG4gICAgcmdiLnIgPSByZ2IuZyA9IHJnYi5iID0gdmFsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG9wYXF1ZXIocmF0aW8pIHtcbiAgICBjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG4gICAgcmdiLmEgKj0gMSArIHJhdGlvO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIG5lZ2F0ZSgpIHtcbiAgICBjb25zdCB2ID0gdGhpcy5fcmdiO1xuICAgIHYuciA9IDI1NSAtIHYucjtcbiAgICB2LmcgPSAyNTUgLSB2Lmc7XG4gICAgdi5iID0gMjU1IC0gdi5iO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGxpZ2h0ZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCByYXRpbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZGFya2VuKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMiwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzYXR1cmF0ZShyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDEsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkZXNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgLXJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByb3RhdGUoZGVnKSB7XG4gICAgcm90YXRlKHRoaXMuX3JnYiwgZGVnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuZnVuY3Rpb24gaW5kZXhfZXNtKGlucHV0KSB7XG4gIHJldHVybiBuZXcgQ29sb3IoaW5wdXQpO1xufVxuXG5mdW5jdGlvbiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgdHlwZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdbb2JqZWN0IENhbnZhc1BhdHRlcm5dJyB8fCB0eXBlID09PSAnW29iamVjdCBDYW52YXNHcmFkaWVudF0nO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbG9yKHZhbHVlKSB7XG4gIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSA/IHZhbHVlIDogaW5kZXhfZXNtKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldEhvdmVyQ29sb3IodmFsdWUpIHtcbiAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpXG4gICAgPyB2YWx1ZVxuICAgIDogaW5kZXhfZXNtKHZhbHVlKS5zYXR1cmF0ZSgwLjUpLmRhcmtlbigwLjEpLmhleFN0cmluZygpO1xufVxuXG5jb25zdCBvdmVycmlkZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gZ2V0U2NvcGUkMShub2RlLCBrZXkpIHtcbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gIGZvciAobGV0IGkgPSAwLCBuID0ga2V5cy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBjb25zdCBrID0ga2V5c1tpXTtcbiAgICBub2RlID0gbm9kZVtrXSB8fCAobm9kZVtrXSA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gc2V0KHJvb3QsIHNjb3BlLCB2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiBzY29wZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCBzY29wZSksIHZhbHVlcyk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlKGdldFNjb3BlJDEocm9vdCwgJycpLCBzY29wZSk7XG59XG5jbGFzcyBEZWZhdWx0cyB7XG4gIGNvbnN0cnVjdG9yKF9kZXNjcmlwdG9ycykge1xuICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgdGhpcy5ib3JkZXJDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgIHRoaXMuY29sb3IgPSAnIzY2Nic7XG4gICAgdGhpcy5kYXRhc2V0cyA9IHt9O1xuICAgIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyA9IChjb250ZXh0KSA9PiBjb250ZXh0LmNoYXJ0LnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICB0aGlzLmVsZW1lbnRzID0ge307XG4gICAgdGhpcy5ldmVudHMgPSBbXG4gICAgICAnbW91c2Vtb3ZlJyxcbiAgICAgICdtb3VzZW91dCcsXG4gICAgICAnY2xpY2snLFxuICAgICAgJ3RvdWNoc3RhcnQnLFxuICAgICAgJ3RvdWNobW92ZSdcbiAgICBdO1xuICAgIHRoaXMuZm9udCA9IHtcbiAgICAgIGZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuICAgICAgc2l6ZTogMTIsXG4gICAgICBzdHlsZTogJ25vcm1hbCcsXG4gICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICB3ZWlnaHQ6IG51bGxcbiAgICB9O1xuICAgIHRoaXMuaG92ZXIgPSB7fTtcbiAgICB0aGlzLmhvdmVyQmFja2dyb3VuZENvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcik7XG4gICAgdGhpcy5ob3ZlckJvcmRlckNvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKTtcbiAgICB0aGlzLmhvdmVyQ29sb3IgPSAoY3R4LCBvcHRpb25zKSA9PiBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuY29sb3IpO1xuICAgIHRoaXMuaW5kZXhBeGlzID0gJ3gnO1xuICAgIHRoaXMuaW50ZXJhY3Rpb24gPSB7XG4gICAgICBtb2RlOiAnbmVhcmVzdCcsXG4gICAgICBpbnRlcnNlY3Q6IHRydWUsXG4gICAgICBpbmNsdWRlSW52aXNpYmxlOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5tYWludGFpbkFzcGVjdFJhdGlvID0gdHJ1ZTtcbiAgICB0aGlzLm9uSG92ZXIgPSBudWxsO1xuICAgIHRoaXMub25DbGljayA9IG51bGw7XG4gICAgdGhpcy5wYXJzaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnBsdWdpbnMgPSB7fTtcbiAgICB0aGlzLnJlc3BvbnNpdmUgPSB0cnVlO1xuICAgIHRoaXMuc2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zY2FsZXMgPSB7fTtcbiAgICB0aGlzLnNob3dMaW5lID0gdHJ1ZTtcbiAgICB0aGlzLmRyYXdBY3RpdmVFbGVtZW50c09uVG9wID0gdHJ1ZTtcbiAgICB0aGlzLmRlc2NyaWJlKF9kZXNjcmlwdG9ycyk7XG4gIH1cbiAgc2V0KHNjb3BlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gc2V0KHRoaXMsIHNjb3BlLCB2YWx1ZXMpO1xuICB9XG4gIGdldChzY29wZSkge1xuICAgIHJldHVybiBnZXRTY29wZSQxKHRoaXMsIHNjb3BlKTtcbiAgfVxuICBkZXNjcmliZShzY29wZSwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIHNldChkZXNjcmlwdG9ycywgc2NvcGUsIHZhbHVlcyk7XG4gIH1cbiAgb3ZlcnJpZGUoc2NvcGUsIHZhbHVlcykge1xuICAgIHJldHVybiBzZXQob3ZlcnJpZGVzLCBzY29wZSwgdmFsdWVzKTtcbiAgfVxuICByb3V0ZShzY29wZSwgbmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpIHtcbiAgICBjb25zdCBzY29wZU9iamVjdCA9IGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICAgIGNvbnN0IHRhcmdldFNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCB0YXJnZXRTY29wZSk7XG4gICAgY29uc3QgcHJpdmF0ZU5hbWUgPSAnXycgKyBuYW1lO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNjb3BlT2JqZWN0LCB7XG4gICAgICBbcHJpdmF0ZU5hbWVdOiB7XG4gICAgICAgIHZhbHVlOiBzY29wZU9iamVjdFtuYW1lXSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBbbmFtZV06IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIGNvbnN0IGxvY2FsID0gdGhpc1twcml2YXRlTmFtZV07XG4gICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0U2NvcGVPYmplY3RbdGFyZ2V0TmFtZV07XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGxvY2FsKSkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRhcmdldCwgbG9jYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWVPckRlZmF1bHQobG9jYWwsIHRhcmdldCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHRoaXNbcHJpdmF0ZU5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxudmFyIGRlZmF1bHRzID0gbmV3IERlZmF1bHRzKHtcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiAhbmFtZS5zdGFydHNXaXRoKCdvbicpLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2V2ZW50cycsXG4gIGhvdmVyOiB7XG4gICAgX2ZhbGxiYWNrOiAnaW50ZXJhY3Rpb24nXG4gIH0sXG4gIGludGVyYWN0aW9uOiB7XG4gICAgX3NjcmlwdGFibGU6IGZhbHNlLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICB9XG59KTtcblxuZnVuY3Rpb24gdG9Gb250U3RyaW5nKGZvbnQpIHtcbiAgaWYgKCFmb250IHx8IGlzTnVsbE9yVW5kZWYoZm9udC5zaXplKSB8fCBpc051bGxPclVuZGVmKGZvbnQuZmFtaWx5KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAoZm9udC5zdHlsZSA/IGZvbnQuc3R5bGUgKyAnICcgOiAnJylcblx0XHQrIChmb250LndlaWdodCA/IGZvbnQud2VpZ2h0ICsgJyAnIDogJycpXG5cdFx0KyBmb250LnNpemUgKyAncHggJ1xuXHRcdCsgZm9udC5mYW1pbHk7XG59XG5mdW5jdGlvbiBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgc3RyaW5nKSB7XG4gIGxldCB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ107XG4gIGlmICghdGV4dFdpZHRoKSB7XG4gICAgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddID0gY3R4Lm1lYXN1cmVUZXh0KHN0cmluZykud2lkdGg7XG4gICAgZ2MucHVzaChzdHJpbmcpO1xuICB9XG4gIGlmICh0ZXh0V2lkdGggPiBsb25nZXN0KSB7XG4gICAgbG9uZ2VzdCA9IHRleHRXaWR0aDtcbiAgfVxuICByZXR1cm4gbG9uZ2VzdDtcbn1cbmZ1bmN0aW9uIF9sb25nZXN0VGV4dChjdHgsIGZvbnQsIGFycmF5T2ZUaGluZ3MsIGNhY2hlKSB7XG4gIGNhY2hlID0gY2FjaGUgfHwge307XG4gIGxldCBkYXRhID0gY2FjaGUuZGF0YSA9IGNhY2hlLmRhdGEgfHwge307XG4gIGxldCBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgfHwgW107XG4gIGlmIChjYWNoZS5mb250ICE9PSBmb250KSB7XG4gICAgZGF0YSA9IGNhY2hlLmRhdGEgPSB7fTtcbiAgICBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gW107XG4gICAgY2FjaGUuZm9udCA9IGZvbnQ7XG4gIH1cbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmZvbnQgPSBmb250O1xuICBsZXQgbG9uZ2VzdCA9IDA7XG4gIGNvbnN0IGlsZW4gPSBhcnJheU9mVGhpbmdzLmxlbmd0aDtcbiAgbGV0IGksIGosIGpsZW4sIHRoaW5nLCBuZXN0ZWRUaGluZztcbiAgZm9yIChpID0gMDsgaSA8IGlsZW47IGkrKykge1xuICAgIHRoaW5nID0gYXJyYXlPZlRoaW5nc1tpXTtcbiAgICBpZiAodGhpbmcgIT09IHVuZGVmaW5lZCAmJiB0aGluZyAhPT0gbnVsbCAmJiBpc0FycmF5KHRoaW5nKSAhPT0gdHJ1ZSkge1xuICAgICAgbG9uZ2VzdCA9IF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCB0aGluZyk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHRoaW5nKSkge1xuICAgICAgZm9yIChqID0gMCwgamxlbiA9IHRoaW5nLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuICAgICAgICBuZXN0ZWRUaGluZyA9IHRoaW5nW2pdO1xuICAgICAgICBpZiAobmVzdGVkVGhpbmcgIT09IHVuZGVmaW5lZCAmJiBuZXN0ZWRUaGluZyAhPT0gbnVsbCAmJiAhaXNBcnJheShuZXN0ZWRUaGluZykpIHtcbiAgICAgICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIG5lc3RlZFRoaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjdHgucmVzdG9yZSgpO1xuICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gIGlmIChnY0xlbiA+IGFycmF5T2ZUaGluZ3MubGVuZ3RoKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGdjTGVuOyBpKyspIHtcbiAgICAgIGRlbGV0ZSBkYXRhW2djW2ldXTtcbiAgICB9XG4gICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgfVxuICByZXR1cm4gbG9uZ2VzdDtcbn1cbmZ1bmN0aW9uIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgd2lkdGgpIHtcbiAgY29uc3QgZGV2aWNlUGl4ZWxSYXRpbyA9IGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvO1xuICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAhPT0gMCA/IE1hdGgubWF4KHdpZHRoIC8gMiwgMC41KSA6IDA7XG4gIHJldHVybiBNYXRoLnJvdW5kKChwaXhlbCAtIGhhbGZXaWR0aCkgKiBkZXZpY2VQaXhlbFJhdGlvKSAvIGRldmljZVBpeGVsUmF0aW8gKyBoYWxmV2lkdGg7XG59XG5mdW5jdGlvbiBjbGVhckNhbnZhcyhjYW52YXMsIGN0eCkge1xuICBjdHggPSBjdHggfHwgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5yZXNldFRyYW5zZm9ybSgpO1xuICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnQoY3R4LCBvcHRpb25zLCB4LCB5KSB7XG4gIGRyYXdQb2ludExlZ2VuZChjdHgsIG9wdGlvbnMsIHgsIHksIG51bGwpO1xufVxuZnVuY3Rpb24gZHJhd1BvaW50TGVnZW5kKGN0eCwgb3B0aW9ucywgeCwgeSwgdykge1xuICBsZXQgdHlwZSwgeE9mZnNldCwgeU9mZnNldCwgc2l6ZSwgY29ybmVyUmFkaXVzLCB3aWR0aDtcbiAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnBvaW50U3R5bGU7XG4gIGNvbnN0IHJvdGF0aW9uID0gb3B0aW9ucy5yb3RhdGlvbjtcbiAgY29uc3QgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG4gIGxldCByYWQgPSAocm90YXRpb24gfHwgMCkgKiBSQURfUEVSX0RFRztcbiAgaWYgKHN0eWxlICYmIHR5cGVvZiBzdHlsZSA9PT0gJ29iamVjdCcpIHtcbiAgICB0eXBlID0gc3R5bGUudG9TdHJpbmcoKTtcbiAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgSFRNTEltYWdlRWxlbWVudF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XScpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgY3R4LnJvdGF0ZShyYWQpO1xuICAgICAgY3R4LmRyYXdJbWFnZShzdHlsZSwgLXN0eWxlLndpZHRoIC8gMiwgLXN0eWxlLmhlaWdodCAvIDIsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGlzTmFOKHJhZGl1cykgfHwgcmFkaXVzIDw9IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBzd2l0Y2ggKHN0eWxlKSB7XG4gIGRlZmF1bHQ6XG4gICAgaWYgKHcpIHtcbiAgICAgIGN0eC5lbGxpcHNlKHgsIHksIHcgLyAyLCByYWRpdXMsIDAsIDAsIFRBVSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBUQVUpO1xuICAgIH1cbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3RyaWFuZ2xlJzpcbiAgICBjdHgubW92ZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3JlY3RSb3VuZGVkJzpcbiAgICBjb3JuZXJSYWRpdXMgPSByYWRpdXMgKiAwLjUxNjtcbiAgICBzaXplID0gcmFkaXVzIC0gY29ybmVyUmFkaXVzO1xuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICBjdHguYXJjKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBQSSwgcmFkIC0gSEFMRl9QSSk7XG4gICAgY3R4LmFyYyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gSEFMRl9QSSwgcmFkKTtcbiAgICBjdHguYXJjKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQsIHJhZCArIEhBTEZfUEkpO1xuICAgIGN0eC5hcmMoeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCArIEhBTEZfUEksIHJhZCArIFBJKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3JlY3QnOlxuICAgIGlmICghcm90YXRpb24pIHtcbiAgICAgIHNpemUgPSBNYXRoLlNRUlQxXzIgKiByYWRpdXM7XG4gICAgICB3aWR0aCA9IHcgPyB3IC8gMiA6IHNpemU7XG4gICAgICBjdHgucmVjdCh4IC0gd2lkdGgsIHkgLSBzaXplLCAyICogd2lkdGgsIDIgKiBzaXplKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgY2FzZSAncmVjdFJvdCc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAnY3Jvc3NSb3QnOlxuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICBjYXNlICdjcm9zcyc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlICdzdGFyJzpcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlICdsaW5lJzpcbiAgICB4T2Zmc2V0ID0gdyA/IHcgLyAyIDogTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlICdkYXNoJzpcbiAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguY29zKHJhZCkgKiByYWRpdXMsIHkgKyBNYXRoLnNpbihyYWQpICogcmFkaXVzKTtcbiAgICBicmVhaztcbiAgfVxuICBjdHguZmlsbCgpO1xuICBpZiAob3B0aW9ucy5ib3JkZXJXaWR0aCA+IDApIHtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9pc1BvaW50SW5BcmVhKHBvaW50LCBhcmVhLCBtYXJnaW4pIHtcbiAgbWFyZ2luID0gbWFyZ2luIHx8IDAuNTtcbiAgcmV0dXJuICFhcmVhIHx8IChwb2ludCAmJiBwb2ludC54ID4gYXJlYS5sZWZ0IC0gbWFyZ2luICYmIHBvaW50LnggPCBhcmVhLnJpZ2h0ICsgbWFyZ2luICYmXG5cdFx0cG9pbnQueSA+IGFyZWEudG9wIC0gbWFyZ2luICYmIHBvaW50LnkgPCBhcmVhLmJvdHRvbSArIG1hcmdpbik7XG59XG5mdW5jdGlvbiBjbGlwQXJlYShjdHgsIGFyZWEpIHtcbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgucmVjdChhcmVhLmxlZnQsIGFyZWEudG9wLCBhcmVhLnJpZ2h0IC0gYXJlYS5sZWZ0LCBhcmVhLmJvdHRvbSAtIGFyZWEudG9wKTtcbiAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIHVuY2xpcEFyZWEoY3R4KSB7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBfc3RlcHBlZExpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXAsIG1vZGUpIHtcbiAgaWYgKCFwcmV2aW91cykge1xuICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gIH1cbiAgaWYgKG1vZGUgPT09ICdtaWRkbGUnKSB7XG4gICAgY29uc3QgbWlkcG9pbnQgPSAocHJldmlvdXMueCArIHRhcmdldC54KSAvIDIuMDtcbiAgICBjdHgubGluZVRvKG1pZHBvaW50LCBwcmV2aW91cy55KTtcbiAgICBjdHgubGluZVRvKG1pZHBvaW50LCB0YXJnZXQueSk7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2FmdGVyJyAhPT0gISFmbGlwKSB7XG4gICAgY3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgcHJldmlvdXMueSk7XG4gIH1cbiAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gX2JlemllckN1cnZlVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG4gIGlmICghcHJldmlvdXMpIHtcbiAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICB9XG4gIGN0eC5iZXppZXJDdXJ2ZVRvKFxuICAgIGZsaXAgPyBwcmV2aW91cy5jcDF4IDogcHJldmlvdXMuY3AyeCxcbiAgICBmbGlwID8gcHJldmlvdXMuY3AxeSA6IHByZXZpb3VzLmNwMnksXG4gICAgZmxpcCA/IHRhcmdldC5jcDJ4IDogdGFyZ2V0LmNwMXgsXG4gICAgZmxpcCA/IHRhcmdldC5jcDJ5IDogdGFyZ2V0LmNwMXksXG4gICAgdGFyZ2V0LngsXG4gICAgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gcmVuZGVyVGV4dChjdHgsIHRleHQsIHgsIHksIGZvbnQsIG9wdHMgPSB7fSkge1xuICBjb25zdCBsaW5lcyA9IGlzQXJyYXkodGV4dCkgPyB0ZXh0IDogW3RleHRdO1xuICBjb25zdCBzdHJva2UgPSBvcHRzLnN0cm9rZVdpZHRoID4gMCAmJiBvcHRzLnN0cm9rZUNvbG9yICE9PSAnJztcbiAgbGV0IGksIGxpbmU7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5mb250ID0gZm9udC5zdHJpbmc7XG4gIHNldFJlbmRlck9wdHMoY3R4LCBvcHRzKTtcbiAgZm9yIChpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgbGluZSA9IGxpbmVzW2ldO1xuICAgIGlmIChzdHJva2UpIHtcbiAgICAgIGlmIChvcHRzLnN0cm9rZUNvbG9yKSB7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuc3Ryb2tlQ29sb3I7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5zdHJva2VXaWR0aCkpIHtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdHMuc3Ryb2tlV2lkdGg7XG4gICAgICB9XG4gICAgICBjdHguc3Ryb2tlVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICB9XG4gICAgY3R4LmZpbGxUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgIGRlY29yYXRlVGV4dChjdHgsIHgsIHksIGxpbmUsIG9wdHMpO1xuICAgIHkgKz0gZm9udC5saW5lSGVpZ2h0O1xuICB9XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cykge1xuICBpZiAob3B0cy50cmFuc2xhdGlvbikge1xuICAgIGN0eC50cmFuc2xhdGUob3B0cy50cmFuc2xhdGlvblswXSwgb3B0cy50cmFuc2xhdGlvblsxXSk7XG4gIH1cbiAgaWYgKCFpc051bGxPclVuZGVmKG9wdHMucm90YXRpb24pKSB7XG4gICAgY3R4LnJvdGF0ZShvcHRzLnJvdGF0aW9uKTtcbiAgfVxuICBpZiAob3B0cy5jb2xvcikge1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9yO1xuICB9XG4gIGlmIChvcHRzLnRleHRBbGlnbikge1xuICAgIGN0eC50ZXh0QWxpZ24gPSBvcHRzLnRleHRBbGlnbjtcbiAgfVxuICBpZiAob3B0cy50ZXh0QmFzZWxpbmUpIHtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gb3B0cy50ZXh0QmFzZWxpbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlY29yYXRlVGV4dChjdHgsIHgsIHksIGxpbmUsIG9wdHMpIHtcbiAgaWYgKG9wdHMuc3RyaWtldGhyb3VnaCB8fCBvcHRzLnVuZGVybGluZSkge1xuICAgIGNvbnN0IG1ldHJpY3MgPSBjdHgubWVhc3VyZVRleHQobGluZSk7XG4gICAgY29uc3QgbGVmdCA9IHggLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94TGVmdDtcbiAgICBjb25zdCByaWdodCA9IHggKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94UmlnaHQ7XG4gICAgY29uc3QgdG9wID0geSAtIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQ7XG4gICAgY29uc3QgYm90dG9tID0geSArIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50O1xuICAgIGNvbnN0IHlEZWNvcmF0aW9uID0gb3B0cy5zdHJpa2V0aHJvdWdoID8gKHRvcCArIGJvdHRvbSkgLyAyIDogYm90dG9tO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGU7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLmRlY29yYXRpb25XaWR0aCB8fCAyO1xuICAgIGN0eC5tb3ZlVG8obGVmdCwgeURlY29yYXRpb24pO1xuICAgIGN0eC5saW5lVG8ocmlnaHQsIHlEZWNvcmF0aW9uKTtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHJlY3QpIHtcbiAgY29uc3Qge3gsIHksIHcsIGgsIHJhZGl1c30gPSByZWN0O1xuICBjdHguYXJjKHggKyByYWRpdXMudG9wTGVmdCwgeSArIHJhZGl1cy50b3BMZWZ0LCByYWRpdXMudG9wTGVmdCwgLUhBTEZfUEksIFBJLCB0cnVlKTtcbiAgY3R4LmxpbmVUbyh4LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0KTtcbiAgY3R4LmFyYyh4ICsgcmFkaXVzLmJvdHRvbUxlZnQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbUxlZnQsIHJhZGl1cy5ib3R0b21MZWZ0LCBQSSwgSEFMRl9QSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoKTtcbiAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy5ib3R0b21SaWdodCwgeSArIGggLSByYWRpdXMuYm90dG9tUmlnaHQsIHJhZGl1cy5ib3R0b21SaWdodCwgSEFMRl9QSSwgMCwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHcsIHkgKyByYWRpdXMudG9wUmlnaHQpO1xuICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLnRvcFJpZ2h0LCB5ICsgcmFkaXVzLnRvcFJpZ2h0LCByYWRpdXMudG9wUmlnaHQsIDAsIC1IQUxGX1BJLCB0cnVlKTtcbiAgY3R4LmxpbmVUbyh4ICsgcmFkaXVzLnRvcExlZnQsIHkpO1xufVxuXG5jb25zdCBMSU5FX0hFSUdIVCA9IG5ldyBSZWdFeHAoL14obm9ybWFsfChcXGQrKD86XFwuXFxkKyk/KShweHxlbXwlKT8pJC8pO1xuY29uc3QgRk9OVF9TVFlMRSA9IG5ldyBSZWdFeHAoL14obm9ybWFsfGl0YWxpY3xpbml0aWFsfGluaGVyaXR8dW5zZXR8KG9ibGlxdWUoIC0/WzAtOV0/WzAtOV1kZWcpPykpJC8pO1xuZnVuY3Rpb24gdG9MaW5lSGVpZ2h0KHZhbHVlLCBzaXplKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSAoJycgKyB2YWx1ZSkubWF0Y2goTElORV9IRUlHSFQpO1xuICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlc1sxXSA9PT0gJ25vcm1hbCcpIHtcbiAgICByZXR1cm4gc2l6ZSAqIDEuMjtcbiAgfVxuICB2YWx1ZSA9ICttYXRjaGVzWzJdO1xuICBzd2l0Y2ggKG1hdGNoZXNbM10pIHtcbiAgY2FzZSAncHgnOlxuICAgIHJldHVybiB2YWx1ZTtcbiAgY2FzZSAnJSc6XG4gICAgdmFsdWUgLz0gMTAwO1xuICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzaXplICogdmFsdWU7XG59XG5jb25zdCBudW1iZXJPclplcm8gPSB2ID0+ICt2IHx8IDA7XG5mdW5jdGlvbiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgcHJvcHMpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGNvbnN0IG9ialByb3BzID0gaXNPYmplY3QocHJvcHMpO1xuICBjb25zdCBrZXlzID0gb2JqUHJvcHMgPyBPYmplY3Qua2V5cyhwcm9wcykgOiBwcm9wcztcbiAgY29uc3QgcmVhZCA9IGlzT2JqZWN0KHZhbHVlKVxuICAgID8gb2JqUHJvcHNcbiAgICAgID8gcHJvcCA9PiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZVtwcm9wXSwgdmFsdWVbcHJvcHNbcHJvcF1dKVxuICAgICAgOiBwcm9wID0+IHZhbHVlW3Byb3BdXG4gICAgOiAoKSA9PiB2YWx1ZTtcbiAgZm9yIChjb25zdCBwcm9wIG9mIGtleXMpIHtcbiAgICByZXRbcHJvcF0gPSBudW1iZXJPclplcm8ocmVhZChwcm9wKSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHRvVFJCTCh2YWx1ZSkge1xuICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHt0b3A6ICd5JywgcmlnaHQ6ICd4JywgYm90dG9tOiAneScsIGxlZnQ6ICd4J30pO1xufVxuZnVuY3Rpb24gdG9UUkJMQ29ybmVycyh2YWx1ZSkge1xuICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIFsndG9wTGVmdCcsICd0b3BSaWdodCcsICdib3R0b21MZWZ0JywgJ2JvdHRvbVJpZ2h0J10pO1xufVxuZnVuY3Rpb24gdG9QYWRkaW5nKHZhbHVlKSB7XG4gIGNvbnN0IG9iaiA9IHRvVFJCTCh2YWx1ZSk7XG4gIG9iai53aWR0aCA9IG9iai5sZWZ0ICsgb2JqLnJpZ2h0O1xuICBvYmouaGVpZ2h0ID0gb2JqLnRvcCArIG9iai5ib3R0b207XG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiB0b0ZvbnQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZhbGxiYWNrID0gZmFsbGJhY2sgfHwgZGVmYXVsdHMuZm9udDtcbiAgbGV0IHNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnNpemUsIGZhbGxiYWNrLnNpemUpO1xuICBpZiAodHlwZW9mIHNpemUgPT09ICdzdHJpbmcnKSB7XG4gICAgc2l6ZSA9IHBhcnNlSW50KHNpemUsIDEwKTtcbiAgfVxuICBsZXQgc3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnN0eWxlLCBmYWxsYmFjay5zdHlsZSk7XG4gIGlmIChzdHlsZSAmJiAhKCcnICsgc3R5bGUpLm1hdGNoKEZPTlRfU1RZTEUpKSB7XG4gICAgY29uc29sZS53YXJuKCdJbnZhbGlkIGZvbnQgc3R5bGUgc3BlY2lmaWVkOiBcIicgKyBzdHlsZSArICdcIicpO1xuICAgIHN0eWxlID0gJyc7XG4gIH1cbiAgY29uc3QgZm9udCA9IHtcbiAgICBmYW1pbHk6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZmFtaWx5LCBmYWxsYmFjay5mYW1pbHkpLFxuICAgIGxpbmVIZWlnaHQ6IHRvTGluZUhlaWdodCh2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmxpbmVIZWlnaHQsIGZhbGxiYWNrLmxpbmVIZWlnaHQpLCBzaXplKSxcbiAgICBzaXplLFxuICAgIHN0eWxlLFxuICAgIHdlaWdodDogdmFsdWVPckRlZmF1bHQob3B0aW9ucy53ZWlnaHQsIGZhbGxiYWNrLndlaWdodCksXG4gICAgc3RyaW5nOiAnJ1xuICB9O1xuICBmb250LnN0cmluZyA9IHRvRm9udFN0cmluZyhmb250KTtcbiAgcmV0dXJuIGZvbnQ7XG59XG5mdW5jdGlvbiByZXNvbHZlKGlucHV0cywgY29udGV4dCwgaW5kZXgsIGluZm8pIHtcbiAgbGV0IGNhY2hlYWJsZSA9IHRydWU7XG4gIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGlucHV0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICB2YWx1ZSA9IGlucHV0c1tpXTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlKGNvbnRleHQpO1xuICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlW2luZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGluZm8gJiYgIWNhY2hlYWJsZSkge1xuICAgICAgICBpbmZvLmNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX2FkZEdyYWNlKG1pbm1heCwgZ3JhY2UsIGJlZ2luQXRaZXJvKSB7XG4gIGNvbnN0IHttaW4sIG1heH0gPSBtaW5tYXg7XG4gIGNvbnN0IGNoYW5nZSA9IHRvRGltZW5zaW9uKGdyYWNlLCAobWF4IC0gbWluKSAvIDIpO1xuICBjb25zdCBrZWVwWmVybyA9ICh2YWx1ZSwgYWRkKSA9PiBiZWdpbkF0WmVybyAmJiB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSArIGFkZDtcbiAgcmV0dXJuIHtcbiAgICBtaW46IGtlZXBaZXJvKG1pbiwgLU1hdGguYWJzKGNoYW5nZSkpLFxuICAgIG1heDoga2VlcFplcm8obWF4LCBjaGFuZ2UpXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0KHBhcmVudENvbnRleHQsIGNvbnRleHQpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShwYXJlbnRDb250ZXh0KSwgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzID0gWycnXSwgcm9vdFNjb3BlcyA9IHNjb3BlcywgZmFsbGJhY2ssIGdldFRhcmdldCA9ICgpID0+IHNjb3Blc1swXSkge1xuICBpZiAoIWRlZmluZWQoZmFsbGJhY2spKSB7XG4gICAgZmFsbGJhY2sgPSBfcmVzb2x2ZSgnX2ZhbGxiYWNrJywgc2NvcGVzKTtcbiAgfVxuICBjb25zdCBjYWNoZSA9IHtcbiAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ09iamVjdCcsXG4gICAgX2NhY2hlYWJsZTogdHJ1ZSxcbiAgICBfc2NvcGVzOiBzY29wZXMsXG4gICAgX3Jvb3RTY29wZXM6IHJvb3RTY29wZXMsXG4gICAgX2ZhbGxiYWNrOiBmYWxsYmFjayxcbiAgICBfZ2V0VGFyZ2V0OiBnZXRUYXJnZXQsXG4gICAgb3ZlcnJpZGU6IChzY29wZSkgPT4gX2NyZWF0ZVJlc29sdmVyKFtzY29wZSwgLi4uc2NvcGVzXSwgcHJlZml4ZXMsIHJvb3RTY29wZXMsIGZhbGxiYWNrKSxcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICBkZWxldGUgc2NvcGVzWzBdW3Byb3BdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsXG4gICAgICAgICgpID0+IF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHRhcmdldCkpO1xuICAgIH0sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5fc2NvcGVzWzBdLCBwcm9wKTtcbiAgICB9LFxuICAgIGdldFByb3RvdHlwZU9mKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yoc2NvcGVzWzBdKTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpLmluY2x1ZGVzKHByb3ApO1xuICAgIH0sXG4gICAgb3duS2V5cyh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0YXJnZXQuX3N0b3JhZ2UgfHwgKHRhcmdldC5fc3RvcmFnZSA9IGdldFRhcmdldCgpKTtcbiAgICAgIHRhcmdldFtwcm9wXSA9IHN0b3JhZ2VbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gX2F0dGFjaENvbnRleHQocHJveHksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgY29uc3QgY2FjaGUgPSB7XG4gICAgX2NhY2hlYWJsZTogZmFsc2UsXG4gICAgX3Byb3h5OiBwcm94eSxcbiAgICBfY29udGV4dDogY29udGV4dCxcbiAgICBfc3ViUHJveHk6IHN1YlByb3h5LFxuICAgIF9zdGFjazogbmV3IFNldCgpLFxuICAgIF9kZXNjcmlwdG9yczogX2Rlc2NyaXB0b3JzKHByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgIHNldENvbnRleHQ6IChjdHgpID0+IF9hdHRhY2hDb250ZXh0KHByb3h5LCBjdHgsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgIG92ZXJyaWRlOiAoc2NvcGUpID0+IF9hdHRhY2hDb250ZXh0KHByb3h5Lm92ZXJyaWRlKHNjb3BlKSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cylcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIGRlbGV0ZSBwcm94eVtwcm9wXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCxcbiAgICAgICAgKCkgPT4gX3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSk7XG4gICAgfSxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0Ll9kZXNjcmlwdG9ycy5hbGxLZXlzXG4gICAgICAgID8gUmVmbGVjdC5oYXMocHJveHksIHByb3ApID8ge2VudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0gOiB1bmRlZmluZWRcbiAgICAgICAgOiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm94eSwgcHJvcCk7XG4gICAgfSxcbiAgICBnZXRQcm90b3R5cGVPZigpIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHByb3h5KTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCk7XG4gICAgfSxcbiAgICBvd25LZXlzKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwcm94eSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgcHJveHlbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gX2Rlc2NyaXB0b3JzKHByb3h5LCBkZWZhdWx0cyA9IHtzY3JpcHRhYmxlOiB0cnVlLCBpbmRleGFibGU6IHRydWV9KSB7XG4gIGNvbnN0IHtfc2NyaXB0YWJsZSA9IGRlZmF1bHRzLnNjcmlwdGFibGUsIF9pbmRleGFibGUgPSBkZWZhdWx0cy5pbmRleGFibGUsIF9hbGxLZXlzID0gZGVmYXVsdHMuYWxsS2V5c30gPSBwcm94eTtcbiAgcmV0dXJuIHtcbiAgICBhbGxLZXlzOiBfYWxsS2V5cyxcbiAgICBzY3JpcHRhYmxlOiBfc2NyaXB0YWJsZSxcbiAgICBpbmRleGFibGU6IF9pbmRleGFibGUsXG4gICAgaXNTY3JpcHRhYmxlOiBpc0Z1bmN0aW9uKF9zY3JpcHRhYmxlKSA/IF9zY3JpcHRhYmxlIDogKCkgPT4gX3NjcmlwdGFibGUsXG4gICAgaXNJbmRleGFibGU6IGlzRnVuY3Rpb24oX2luZGV4YWJsZSkgPyBfaW5kZXhhYmxlIDogKCkgPT4gX2luZGV4YWJsZVxuICB9O1xufVxuY29uc3QgcmVhZEtleSA9IChwcmVmaXgsIG5hbWUpID0+IHByZWZpeCA/IHByZWZpeCArIF9jYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbmNvbnN0IG5lZWRzU3ViUmVzb2x2ZXIgPSAocHJvcCwgdmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSAmJiBwcm9wICE9PSAnYWRhcHRlcnMnICYmXG4gIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBudWxsIHx8IHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xuZnVuY3Rpb24gX2NhY2hlZCh0YXJnZXQsIHByb3AsIHJlc29sdmUpIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3ApKSB7XG4gICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IHJlc29sdmUoKTtcbiAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICBjb25zdCB7X3Byb3h5LCBfY29udGV4dCwgX3N1YlByb3h5LCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzfSA9IHRhcmdldDtcbiAgbGV0IHZhbHVlID0gX3Byb3h5W3Byb3BdO1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgJiYgZGVzY3JpcHRvcnMuaXNTY3JpcHRhYmxlKHByb3ApKSB7XG4gICAgdmFsdWUgPSBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgdmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICB2YWx1ZSA9IF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgZGVzY3JpcHRvcnMuaXNJbmRleGFibGUpO1xuICB9XG4gIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgIHZhbHVlID0gX2F0dGFjaENvbnRleHQodmFsdWUsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9zdGFja30gPSB0YXJnZXQ7XG4gIGlmIChfc3RhY2suaGFzKHByb3ApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZWN1cnNpb24gZGV0ZWN0ZWQ6ICcgKyBBcnJheS5mcm9tKF9zdGFjaykuam9pbignLT4nKSArICctPicgKyBwcm9wKTtcbiAgfVxuICBfc3RhY2suYWRkKHByb3ApO1xuICB2YWx1ZSA9IHZhbHVlKF9jb250ZXh0LCBfc3ViUHJveHkgfHwgcmVjZWl2ZXIpO1xuICBfc3RhY2suZGVsZXRlKHByb3ApO1xuICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IGNyZWF0ZVN1YlJlc29sdmVyKF9wcm94eS5fc2NvcGVzLCBfcHJveHksIHByb3AsIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZUFycmF5KHByb3AsIHZhbHVlLCB0YXJnZXQsIGlzSW5kZXhhYmxlKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9kZXNjcmlwdG9yczogZGVzY3JpcHRvcnN9ID0gdGFyZ2V0O1xuICBpZiAoZGVmaW5lZChfY29udGV4dC5pbmRleCkgJiYgaXNJbmRleGFibGUocHJvcCkpIHtcbiAgICB2YWx1ZSA9IHZhbHVlW19jb250ZXh0LmluZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZVswXSkpIHtcbiAgICBjb25zdCBhcnIgPSB2YWx1ZTtcbiAgICBjb25zdCBzY29wZXMgPSBfcHJveHkuX3Njb3Blcy5maWx0ZXIocyA9PiBzICE9PSBhcnIpO1xuICAgIHZhbHVlID0gW107XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgICAgY29uc3QgcmVzb2x2ZXIgPSBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIF9wcm94eSwgcHJvcCwgaXRlbSk7XG4gICAgICB2YWx1ZS5wdXNoKF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUZhbGxiYWNrKGZhbGxiYWNrLCBwcm9wLCB2YWx1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjayhwcm9wLCB2YWx1ZSkgOiBmYWxsYmFjaztcbn1cbmNvbnN0IGdldFNjb3BlID0gKGtleSwgcGFyZW50KSA9PiBrZXkgPT09IHRydWUgPyBwYXJlbnRcbiAgOiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyA/IHJlc29sdmVPYmplY3RLZXkocGFyZW50LCBrZXkpIDogdW5kZWZpbmVkO1xuZnVuY3Rpb24gYWRkU2NvcGVzKHNldCwgcGFyZW50U2NvcGVzLCBrZXksIHBhcmVudEZhbGxiYWNrLCB2YWx1ZSkge1xuICBmb3IgKGNvbnN0IHBhcmVudCBvZiBwYXJlbnRTY29wZXMpIHtcbiAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKGtleSwgcGFyZW50KTtcbiAgICBpZiAoc2NvcGUpIHtcbiAgICAgIHNldC5hZGQoc2NvcGUpO1xuICAgICAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2soc2NvcGUuX2ZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0ga2V5ICYmIGZhbGxiYWNrICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzY29wZSA9PT0gZmFsc2UgJiYgZGVmaW5lZChwYXJlbnRGYWxsYmFjaykgJiYga2V5ICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN1YlJlc29sdmVyKHBhcmVudFNjb3BlcywgcmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHJvb3RTY29wZXMgPSByZXNvbHZlci5fcm9vdFNjb3BlcztcbiAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2socmVzb2x2ZXIuX2ZhbGxiYWNrLCBwcm9wLCB2YWx1ZSk7XG4gIGNvbnN0IGFsbFNjb3BlcyA9IFsuLi5wYXJlbnRTY29wZXMsIC4uLnJvb3RTY29wZXNdO1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIHNldC5hZGQodmFsdWUpO1xuICBsZXQga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgcHJvcCwgZmFsbGJhY2sgfHwgcHJvcCwgdmFsdWUpO1xuICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0gcHJvcCkge1xuICAgIGtleSA9IGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfY3JlYXRlUmVzb2x2ZXIoQXJyYXkuZnJvbShzZXQpLCBbJyddLCByb290U2NvcGVzLCBmYWxsYmFjayxcbiAgICAoKSA9PiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSk7XG59XG5mdW5jdGlvbiBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBrZXksIGZhbGxiYWNrLCBpdGVtKSB7XG4gIHdoaWxlIChrZXkpIHtcbiAgICBrZXkgPSBhZGRTY29wZXMoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pO1xuICB9XG4gIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHBhcmVudCA9IHJlc29sdmVyLl9nZXRUYXJnZXQoKTtcbiAgaWYgKCEocHJvcCBpbiBwYXJlbnQpKSB7XG4gICAgcGFyZW50W3Byb3BdID0ge307XG4gIH1cbiAgY29uc3QgdGFyZ2V0ID0gcGFyZW50W3Byb3BdO1xuICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgcHJveHkpIHtcbiAgbGV0IHZhbHVlO1xuICBmb3IgKGNvbnN0IHByZWZpeCBvZiBwcmVmaXhlcykge1xuICAgIHZhbHVlID0gX3Jlc29sdmUocmVhZEtleShwcmVmaXgsIHByb3ApLCBzY29wZXMpO1xuICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpXG4gICAgICAgID8gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBwcm94eSwgcHJvcCwgdmFsdWUpXG4gICAgICAgIDogdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfcmVzb2x2ZShrZXksIHNjb3Blcykge1xuICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcykge1xuICAgIGlmICghc2NvcGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHNjb3BlW2tleV07XG4gICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpIHtcbiAgbGV0IGtleXMgPSB0YXJnZXQuX2tleXM7XG4gIGlmICgha2V5cykge1xuICAgIGtleXMgPSB0YXJnZXQuX2tleXMgPSByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXModGFyZ2V0Ll9zY29wZXMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHNjb3Blcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NvcGUpLmZpbHRlcihrID0+ICFrLnN0YXJ0c1dpdGgoJ18nKSkpIHtcbiAgICAgIHNldC5hZGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cbmZ1bmN0aW9uIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgY29uc3Qge2lTY2FsZX0gPSBtZXRhO1xuICBjb25zdCB7a2V5ID0gJ3InfSA9IHRoaXMuX3BhcnNpbmc7XG4gIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgaXRlbSA9IGRhdGFbaW5kZXhdO1xuICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgIHI6IGlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIGtleSksIGluZGV4KVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHBhcnNlZDtcbn1cblxuY29uc3QgRVBTSUxPTiA9IE51bWJlci5FUFNJTE9OIHx8IDFlLTE0O1xuY29uc3QgZ2V0UG9pbnQgPSAocG9pbnRzLCBpKSA9PiBpIDwgcG9pbnRzLmxlbmd0aCAmJiAhcG9pbnRzW2ldLnNraXAgJiYgcG9pbnRzW2ldO1xuY29uc3QgZ2V0VmFsdWVBeGlzID0gKGluZGV4QXhpcykgPT4gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZShmaXJzdFBvaW50LCBtaWRkbGVQb2ludCwgYWZ0ZXJQb2ludCwgdCkge1xuICBjb25zdCBwcmV2aW91cyA9IGZpcnN0UG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogZmlyc3RQb2ludDtcbiAgY29uc3QgY3VycmVudCA9IG1pZGRsZVBvaW50O1xuICBjb25zdCBuZXh0ID0gYWZ0ZXJQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBhZnRlclBvaW50O1xuICBjb25zdCBkMDEgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMoY3VycmVudCwgcHJldmlvdXMpO1xuICBjb25zdCBkMTIgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMobmV4dCwgY3VycmVudCk7XG4gIGxldCBzMDEgPSBkMDEgLyAoZDAxICsgZDEyKTtcbiAgbGV0IHMxMiA9IGQxMiAvIChkMDEgKyBkMTIpO1xuICBzMDEgPSBpc05hTihzMDEpID8gMCA6IHMwMTtcbiAgczEyID0gaXNOYU4oczEyKSA/IDAgOiBzMTI7XG4gIGNvbnN0IGZhID0gdCAqIHMwMTtcbiAgY29uc3QgZmIgPSB0ICogczEyO1xuICByZXR1cm4ge1xuICAgIHByZXZpb3VzOiB7XG4gICAgICB4OiBjdXJyZW50LnggLSBmYSAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgIHk6IGN1cnJlbnQueSAtIGZhICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgfSxcbiAgICBuZXh0OiB7XG4gICAgICB4OiBjdXJyZW50LnggKyBmYiAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgIHk6IGN1cnJlbnQueSArIGZiICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKSB7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBhbHBoYUssIGJldGFLLCB0YXVLLCBzcXVhcmVkTWFnbml0dWRlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW4gLSAxOyArK2kpIHtcbiAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICBpZiAoIXBvaW50Q3VycmVudCB8fCAhcG9pbnRBZnRlcikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbG1vc3RFcXVhbHMoZGVsdGFLW2ldLCAwLCBFUFNJTE9OKSkge1xuICAgICAgbUtbaV0gPSBtS1tpICsgMV0gPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGFscGhhSyA9IG1LW2ldIC8gZGVsdGFLW2ldO1xuICAgIGJldGFLID0gbUtbaSArIDFdIC8gZGVsdGFLW2ldO1xuICAgIHNxdWFyZWRNYWduaXR1ZGUgPSBNYXRoLnBvdyhhbHBoYUssIDIpICsgTWF0aC5wb3coYmV0YUssIDIpO1xuICAgIGlmIChzcXVhcmVkTWFnbml0dWRlIDw9IDkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0YXVLID0gMyAvIE1hdGguc3FydChzcXVhcmVkTWFnbml0dWRlKTtcbiAgICBtS1tpXSA9IGFscGhhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gICAgbUtbaSArIDFdID0gYmV0YUsgKiB0YXVLICogZGVsdGFLW2ldO1xuICB9XG59XG5mdW5jdGlvbiBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgZGVsdGEsIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSkge1xuICAgIHBvaW50QmVmb3JlID0gcG9pbnRDdXJyZW50O1xuICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgIGlmICghcG9pbnRDdXJyZW50KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgaVBpeGVsID0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgY29uc3QgdlBpeGVsID0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc107XG4gICAgaWYgKHBvaW50QmVmb3JlKSB7XG4gICAgICBkZWx0YSA9IChpUGl4ZWwgLSBwb2ludEJlZm9yZVtpbmRleEF4aXNdKSAvIDM7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMSR7aW5kZXhBeGlzfWBdID0gaVBpeGVsIC0gZGVsdGE7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMSR7dmFsdWVBeGlzfWBdID0gdlBpeGVsIC0gZGVsdGEgKiBtS1tpXTtcbiAgICB9XG4gICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgIGRlbHRhID0gKHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIGlQaXhlbCkgLyAzO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDIke2luZGV4QXhpc31gXSA9IGlQaXhlbCArIGRlbHRhO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDIke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCArIGRlbHRhICogbUtbaV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCBkZWx0YUsgPSBBcnJheShwb2ludHNMZW4pLmZpbGwoMCk7XG4gIGNvbnN0IG1LID0gQXJyYXkocG9pbnRzTGVuKTtcbiAgbGV0IGksIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG4gICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgY29uc3Qgc2xvcGVEZWx0YSA9IHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIHBvaW50Q3VycmVudFtpbmRleEF4aXNdO1xuICAgICAgZGVsdGFLW2ldID0gc2xvcGVEZWx0YSAhPT0gMCA/IChwb2ludEFmdGVyW3ZhbHVlQXhpc10gLSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXSkgLyBzbG9wZURlbHRhIDogMDtcbiAgICB9XG4gICAgbUtbaV0gPSAhcG9pbnRCZWZvcmUgPyBkZWx0YUtbaV1cbiAgICAgIDogIXBvaW50QWZ0ZXIgPyBkZWx0YUtbaSAtIDFdXG4gICAgICA6IChzaWduKGRlbHRhS1tpIC0gMV0pICE9PSBzaWduKGRlbHRhS1tpXSkpID8gMFxuICAgICAgOiAoZGVsdGFLW2kgLSAxXSArIGRlbHRhS1tpXSkgLyAyO1xuICB9XG4gIG1vbm90b25lQWRqdXN0KHBvaW50cywgZGVsdGFLLCBtSyk7XG4gIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMpO1xufVxuZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4ocHQsIG1heCksIG1pbik7XG59XG5mdW5jdGlvbiBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKSB7XG4gIGxldCBpLCBpbGVuLCBwb2ludCwgaW5BcmVhLCBpbkFyZWFQcmV2O1xuICBsZXQgaW5BcmVhTmV4dCA9IF9pc1BvaW50SW5BcmVhKHBvaW50c1swXSwgYXJlYSk7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgaW5BcmVhUHJldiA9IGluQXJlYTtcbiAgICBpbkFyZWEgPSBpbkFyZWFOZXh0O1xuICAgIGluQXJlYU5leHQgPSBpIDwgaWxlbiAtIDEgJiYgX2lzUG9pbnRJbkFyZWEocG9pbnRzW2kgKyAxXSwgYXJlYSk7XG4gICAgaWYgKCFpbkFyZWEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICBpZiAoaW5BcmVhUHJldikge1xuICAgICAgcG9pbnQuY3AxeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgcG9pbnQuY3AxeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgICBpZiAoaW5BcmVhTmV4dCkge1xuICAgICAgcG9pbnQuY3AyeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgcG9pbnQuY3AyeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMocG9pbnRzLCBvcHRpb25zLCBhcmVhLCBsb29wLCBpbmRleEF4aXMpIHtcbiAgbGV0IGksIGlsZW4sIHBvaW50LCBjb250cm9sUG9pbnRzO1xuICBpZiAob3B0aW9ucy5zcGFuR2Fwcykge1xuICAgIHBvaW50cyA9IHBvaW50cy5maWx0ZXIoKHB0KSA9PiAhcHQuc2tpcCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMpO1xuICB9IGVsc2Uge1xuICAgIGxldCBwcmV2ID0gbG9vcCA/IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0gOiBwb2ludHNbMF07XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29udHJvbFBvaW50cyA9IHNwbGluZUN1cnZlKFxuICAgICAgICBwcmV2LFxuICAgICAgICBwb2ludCxcbiAgICAgICAgcG9pbnRzW01hdGgubWluKGkgKyAxLCBpbGVuIC0gKGxvb3AgPyAwIDogMSkpICUgaWxlbl0sXG4gICAgICAgIG9wdGlvbnMudGVuc2lvblxuICAgICAgKTtcbiAgICAgIHBvaW50LmNwMXggPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLng7XG4gICAgICBwb2ludC5jcDF5ID0gY29udHJvbFBvaW50cy5wcmV2aW91cy55O1xuICAgICAgcG9pbnQuY3AyeCA9IGNvbnRyb2xQb2ludHMubmV4dC54O1xuICAgICAgcG9pbnQuY3AyeSA9IGNvbnRyb2xQb2ludHMubmV4dC55O1xuICAgICAgcHJldiA9IHBvaW50O1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5jYXBCZXppZXJQb2ludHMpIHtcbiAgICBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaXNEb21TdXBwb3J0ZWQoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuZnVuY3Rpb24gX2dldFBhcmVudE5vZGUoZG9tTm9kZSkge1xuICBsZXQgcGFyZW50ID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50ICYmIHBhcmVudC50b1N0cmluZygpID09PSAnW29iamVjdCBTaGFkb3dSb290XScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQuaG9zdDtcbiAgfVxuICByZXR1cm4gcGFyZW50O1xufVxuZnVuY3Rpb24gcGFyc2VNYXhTdHlsZShzdHlsZVZhbHVlLCBub2RlLCBwYXJlbnRQcm9wZXJ0eSkge1xuICBsZXQgdmFsdWVJblBpeGVscztcbiAgaWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlSW5QaXhlbHMgPSBwYXJzZUludChzdHlsZVZhbHVlLCAxMCk7XG4gICAgaWYgKHN0eWxlVmFsdWUuaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgdmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZUluUGl4ZWxzID0gc3R5bGVWYWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWVJblBpeGVscztcbn1cbmNvbnN0IGdldENvbXB1dGVkU3R5bGUgPSAoZWxlbWVudCkgPT4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5mdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xufVxuY29uc3QgcG9zaXRpb25zID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcbmZ1bmN0aW9uIGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZXMsIHN0eWxlLCBzdWZmaXgpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHN1ZmZpeCA9IHN1ZmZpeCA/ICctJyArIHN1ZmZpeCA6ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uc1tpXTtcbiAgICByZXN1bHRbcG9zXSA9IHBhcnNlRmxvYXQoc3R5bGVzW3N0eWxlICsgJy0nICsgcG9zICsgc3VmZml4XSkgfHwgMDtcbiAgfVxuICByZXN1bHQud2lkdGggPSByZXN1bHQubGVmdCArIHJlc3VsdC5yaWdodDtcbiAgcmVzdWx0LmhlaWdodCA9IHJlc3VsdC50b3AgKyByZXN1bHQuYm90dG9tO1xuICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgdXNlT2Zmc2V0UG9zID0gKHgsIHksIHRhcmdldCkgPT4gKHggPiAwIHx8IHkgPiAwKSAmJiAoIXRhcmdldCB8fCAhdGFyZ2V0LnNoYWRvd1Jvb3QpO1xuZnVuY3Rpb24gZ2V0Q2FudmFzUG9zaXRpb24oZSwgY2FudmFzKSB7XG4gIGNvbnN0IHRvdWNoZXMgPSBlLnRvdWNoZXM7XG4gIGNvbnN0IHNvdXJjZSA9IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPyB0b3VjaGVzWzBdIDogZTtcbiAgY29uc3Qge29mZnNldFgsIG9mZnNldFl9ID0gc291cmNlO1xuICBsZXQgYm94ID0gZmFsc2U7XG4gIGxldCB4LCB5O1xuICBpZiAodXNlT2Zmc2V0UG9zKG9mZnNldFgsIG9mZnNldFksIGUudGFyZ2V0KSkge1xuICAgIHggPSBvZmZzZXRYO1xuICAgIHkgPSBvZmZzZXRZO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgeCA9IHNvdXJjZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgIHkgPSBzb3VyY2UuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgIGJveCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHt4LCB5LCBib3h9O1xufVxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVQb3NpdGlvbihldnQsIGNoYXJ0KSB7XG4gIGlmICgnbmF0aXZlJyBpbiBldnQpIHtcbiAgICByZXR1cm4gZXZ0O1xuICB9XG4gIGNvbnN0IHtjYW52YXMsIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvfSA9IGNoYXJ0O1xuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgY29uc3QgYm9yZGVyQm94ID0gc3R5bGUuYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCc7XG4gIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gIGNvbnN0IHt4LCB5LCBib3h9ID0gZ2V0Q2FudmFzUG9zaXRpb24oZXZ0LCBjYW52YXMpO1xuICBjb25zdCB4T2Zmc2V0ID0gcGFkZGluZ3MubGVmdCArIChib3ggJiYgYm9yZGVycy5sZWZ0KTtcbiAgY29uc3QgeU9mZnNldCA9IHBhZGRpbmdzLnRvcCArIChib3ggJiYgYm9yZGVycy50b3ApO1xuICBsZXQge3dpZHRoLCBoZWlnaHR9ID0gY2hhcnQ7XG4gIGlmIChib3JkZXJCb3gpIHtcbiAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgaGVpZ2h0IC09IHBhZGRpbmdzLmhlaWdodCArIGJvcmRlcnMuaGVpZ2h0O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogTWF0aC5yb3VuZCgoeCAtIHhPZmZzZXQpIC8gd2lkdGggKiBjYW52YXMud2lkdGggLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyksXG4gICAgeTogTWF0aC5yb3VuZCgoeSAtIHlPZmZzZXQpIC8gaGVpZ2h0ICogY2FudmFzLmhlaWdodCAvIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgbGV0IG1heFdpZHRoLCBtYXhIZWlnaHQ7XG4gIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkIHx8IGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lcik7XG4gICAgICBjb25zdCBjb250YWluZXJCb3JkZXIgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhZGRpbmcgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdwYWRkaW5nJyk7XG4gICAgICB3aWR0aCA9IHJlY3Qud2lkdGggLSBjb250YWluZXJQYWRkaW5nLndpZHRoIC0gY29udGFpbmVyQm9yZGVyLndpZHRoO1xuICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQgLSBjb250YWluZXJQYWRkaW5nLmhlaWdodCAtIGNvbnRhaW5lckJvcmRlci5oZWlnaHQ7XG4gICAgICBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4V2lkdGgsIGNvbnRhaW5lciwgJ2NsaWVudFdpZHRoJyk7XG4gICAgICBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heEhlaWdodCwgY29udGFpbmVyLCAnY2xpZW50SGVpZ2h0Jyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIG1heFdpZHRoOiBtYXhXaWR0aCB8fCBJTkZJTklUWSxcbiAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCB8fCBJTkZJTklUWVxuICB9O1xufVxuY29uc3Qgcm91bmQxID0gdiA9PiBNYXRoLnJvdW5kKHYgKiAxMCkgLyAxMDtcbmZ1bmN0aW9uIGdldE1heGltdW1TaXplKGNhbnZhcywgYmJXaWR0aCwgYmJIZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xuICBjb25zdCBtYXJnaW5zID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnbWFyZ2luJyk7XG4gIGNvbnN0IG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhXaWR0aCwgY2FudmFzLCAnY2xpZW50V2lkdGgnKSB8fCBJTkZJTklUWTtcbiAgY29uc3QgbWF4SGVpZ2h0ID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhIZWlnaHQsIGNhbnZhcywgJ2NsaWVudEhlaWdodCcpIHx8IElORklOSVRZO1xuICBjb25zdCBjb250YWluZXJTaXplID0gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0KTtcbiAgbGV0IHt3aWR0aCwgaGVpZ2h0fSA9IGNvbnRhaW5lclNpemU7XG4gIGlmIChzdHlsZS5ib3hTaXppbmcgPT09ICdjb250ZW50LWJveCcpIHtcbiAgICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgY29uc3QgcGFkZGluZ3MgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdwYWRkaW5nJyk7XG4gICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgfVxuICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoIC0gbWFyZ2lucy53aWR0aCk7XG4gIGhlaWdodCA9IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gTWF0aC5mbG9vcih3aWR0aCAvIGFzcGVjdFJhdGlvKSA6IGhlaWdodCAtIG1hcmdpbnMuaGVpZ2h0KTtcbiAgd2lkdGggPSByb3VuZDEoTWF0aC5taW4od2lkdGgsIG1heFdpZHRoLCBjb250YWluZXJTaXplLm1heFdpZHRoKSk7XG4gIGhlaWdodCA9IHJvdW5kMShNYXRoLm1pbihoZWlnaHQsIG1heEhlaWdodCwgY29udGFpbmVyU2l6ZS5tYXhIZWlnaHQpKTtcbiAgaWYgKHdpZHRoICYmICFoZWlnaHQpIHtcbiAgICBoZWlnaHQgPSByb3VuZDEod2lkdGggLyAyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodFxuICB9O1xufVxuZnVuY3Rpb24gcmV0aW5hU2NhbGUoY2hhcnQsIGZvcmNlUmF0aW8sIGZvcmNlU3R5bGUpIHtcbiAgY29uc3QgcGl4ZWxSYXRpbyA9IGZvcmNlUmF0aW8gfHwgMTtcbiAgY29uc3QgZGV2aWNlSGVpZ2h0ID0gTWF0aC5mbG9vcihjaGFydC5oZWlnaHQgKiBwaXhlbFJhdGlvKTtcbiAgY29uc3QgZGV2aWNlV2lkdGggPSBNYXRoLmZsb29yKGNoYXJ0LndpZHRoICogcGl4ZWxSYXRpbyk7XG4gIGNoYXJ0LmhlaWdodCA9IGRldmljZUhlaWdodCAvIHBpeGVsUmF0aW87XG4gIGNoYXJ0LndpZHRoID0gZGV2aWNlV2lkdGggLyBwaXhlbFJhdGlvO1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGlmIChjYW52YXMuc3R5bGUgJiYgKGZvcmNlU3R5bGUgfHwgKCFjYW52YXMuc3R5bGUuaGVpZ2h0ICYmICFjYW52YXMuc3R5bGUud2lkdGgpKSkge1xuICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtjaGFydC5oZWlnaHR9cHhgO1xuICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke2NoYXJ0LndpZHRofXB4YDtcbiAgfVxuICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IHBpeGVsUmF0aW9cbiAgICAgIHx8IGNhbnZhcy5oZWlnaHQgIT09IGRldmljZUhlaWdodFxuICAgICAgfHwgY2FudmFzLndpZHRoICE9PSBkZXZpY2VXaWR0aCkge1xuICAgIGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcbiAgICBjYW52YXMuaGVpZ2h0ID0gZGV2aWNlSGVpZ2h0O1xuICAgIGNhbnZhcy53aWR0aCA9IGRldmljZVdpZHRoO1xuICAgIGNoYXJ0LmN0eC5zZXRUcmFuc2Zvcm0ocGl4ZWxSYXRpbywgMCwgMCwgcGl4ZWxSYXRpbywgMCwgMCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuY29uc3Qgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA9IChmdW5jdGlvbigpIHtcbiAgbGV0IHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgZ2V0IHBhc3NpdmUoKSB7XG4gICAgICAgIHBhc3NpdmVTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuICByZXR1cm4gcGFzc2l2ZVN1cHBvcnRlZDtcbn0oKSk7XG5mdW5jdGlvbiByZWFkVXNlZFNpemUoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgY29uc3QgdmFsdWUgPSBnZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gIGNvbnN0IG1hdGNoZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCgvXihcXGQrKShcXC5cXGQrKT9weCQvKTtcbiAgcmV0dXJuIG1hdGNoZXMgPyArbWF0Y2hlc1sxXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3BvaW50SW5MaW5lKHAxLCBwMiwgdCwgbW9kZSkge1xuICByZXR1cm4ge1xuICAgIHg6IHAxLnggKyB0ICogKHAyLnggLSBwMS54KSxcbiAgICB5OiBwMS55ICsgdCAqIChwMi55IC0gcDEueSlcbiAgfTtcbn1cbmZ1bmN0aW9uIF9zdGVwcGVkSW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgeTogbW9kZSA9PT0gJ21pZGRsZScgPyB0IDwgMC41ID8gcDEueSA6IHAyLnlcbiAgICA6IG1vZGUgPT09ICdhZnRlcicgPyB0IDwgMSA/IHAxLnkgOiBwMi55XG4gICAgOiB0ID4gMCA/IHAyLnkgOiBwMS55XG4gIH07XG59XG5mdW5jdGlvbiBfYmV6aWVySW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgY29uc3QgY3AxID0ge3g6IHAxLmNwMngsIHk6IHAxLmNwMnl9O1xuICBjb25zdCBjcDIgPSB7eDogcDIuY3AxeCwgeTogcDIuY3AxeX07XG4gIGNvbnN0IGEgPSBfcG9pbnRJbkxpbmUocDEsIGNwMSwgdCk7XG4gIGNvbnN0IGIgPSBfcG9pbnRJbkxpbmUoY3AxLCBjcDIsIHQpO1xuICBjb25zdCBjID0gX3BvaW50SW5MaW5lKGNwMiwgcDIsIHQpO1xuICBjb25zdCBkID0gX3BvaW50SW5MaW5lKGEsIGIsIHQpO1xuICBjb25zdCBlID0gX3BvaW50SW5MaW5lKGIsIGMsIHQpO1xuICByZXR1cm4gX3BvaW50SW5MaW5lKGQsIGUsIHQpO1xufVxuXG5jb25zdCBpbnRsQ2FjaGUgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBjYWNoZUtleSA9IGxvY2FsZSArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICBsZXQgZm9ybWF0dGVyID0gaW50bENhY2hlLmdldChjYWNoZUtleSk7XG4gIGlmICghZm9ybWF0dGVyKSB7XG4gICAgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgaW50bENhY2hlLnNldChjYWNoZUtleSwgZm9ybWF0dGVyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0dGVyO1xufVxuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bSwgbG9jYWxlLCBvcHRpb25zKSB7XG4gIHJldHVybiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKS5mb3JtYXQobnVtKTtcbn1cblxuY29uc3QgZ2V0UmlnaHRUb0xlZnRBZGFwdGVyID0gZnVuY3Rpb24ocmVjdFgsIHdpZHRoKSB7XG4gIHJldHVybiB7XG4gICAgeCh4KSB7XG4gICAgICByZXR1cm4gcmVjdFggKyByZWN0WCArIHdpZHRoIC0geDtcbiAgICB9LFxuICAgIHNldFdpZHRoKHcpIHtcbiAgICAgIHdpZHRoID0gdztcbiAgICB9LFxuICAgIHRleHRBbGlnbihhbGlnbikge1xuICAgICAgaWYgKGFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICByZXR1cm4gYWxpZ247XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxpZ24gPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIH0sXG4gICAgeFBsdXMoeCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB4IC0gdmFsdWU7XG4gICAgfSxcbiAgICBsZWZ0Rm9yTHRyKHgsIGl0ZW1XaWR0aCkge1xuICAgICAgcmV0dXJuIHggLSBpdGVtV2lkdGg7XG4gICAgfSxcbiAgfTtcbn07XG5jb25zdCBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB4KHgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH0sXG4gICAgc2V0V2lkdGgodykge1xuICAgIH0sXG4gICAgdGV4dEFsaWduKGFsaWduKSB7XG4gICAgICByZXR1cm4gYWxpZ247XG4gICAgfSxcbiAgICB4UGx1cyh4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHggKyB2YWx1ZTtcbiAgICB9LFxuICAgIGxlZnRGb3JMdHIoeCwgX2l0ZW1XaWR0aCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSxcbiAgfTtcbn07XG5mdW5jdGlvbiBnZXRSdGxBZGFwdGVyKHJ0bCwgcmVjdFgsIHdpZHRoKSB7XG4gIHJldHVybiBydGwgPyBnZXRSaWdodFRvTGVmdEFkYXB0ZXIocmVjdFgsIHdpZHRoKSA6IGdldExlZnRUb1JpZ2h0QWRhcHRlcigpO1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKGN0eCwgZGlyZWN0aW9uKSB7XG4gIGxldCBzdHlsZSwgb3JpZ2luYWw7XG4gIGlmIChkaXJlY3Rpb24gPT09ICdsdHInIHx8IGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICBzdHlsZSA9IGN0eC5jYW52YXMuc3R5bGU7XG4gICAgb3JpZ2luYWwgPSBbXG4gICAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXJlY3Rpb24nKSxcbiAgICAgIHN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoJ2RpcmVjdGlvbicpLFxuICAgIF07XG4gICAgc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIGRpcmVjdGlvbiwgJ2ltcG9ydGFudCcpO1xuICAgIGN0eC5wcmV2VGV4dERpcmVjdGlvbiA9IG9yaWdpbmFsO1xuICB9XG59XG5mdW5jdGlvbiByZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIG9yaWdpbmFsKSB7XG4gIGlmIChvcmlnaW5hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIGN0eC5wcmV2VGV4dERpcmVjdGlvbjtcbiAgICBjdHguY2FudmFzLnN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBvcmlnaW5hbFswXSwgb3JpZ2luYWxbMV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Rm4ocHJvcGVydHkpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnYW5nbGUnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJldHdlZW46IF9hbmdsZUJldHdlZW4sXG4gICAgICBjb21wYXJlOiBfYW5nbGVEaWZmLFxuICAgICAgbm9ybWFsaXplOiBfbm9ybWFsaXplQW5nbGUsXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGJldHdlZW46IF9pc0JldHdlZW4sXG4gICAgY29tcGFyZTogKGEsIGIpID0+IGEgLSBiLFxuICAgIG5vcm1hbGl6ZTogeCA9PiB4XG4gIH07XG59XG5mdW5jdGlvbiBub3JtYWxpemVTZWdtZW50KHtzdGFydCwgZW5kLCBjb3VudCwgbG9vcCwgc3R5bGV9KSB7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgZW5kOiBlbmQgJSBjb3VudCxcbiAgICBsb29wOiBsb29wICYmIChlbmQgLSBzdGFydCArIDEpICUgY291bnQgPT09IDAsXG4gICAgc3R5bGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgY29uc3Qge3Byb3BlcnR5LCBzdGFydDogc3RhcnRCb3VuZCwgZW5kOiBlbmRCb3VuZH0gPSBib3VuZHM7XG4gIGNvbnN0IHtiZXR3ZWVuLCBub3JtYWxpemV9ID0gcHJvcGVydHlGbihwcm9wZXJ0eSk7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IHtzdGFydCwgZW5kLCBsb29wfSA9IHNlZ21lbnQ7XG4gIGxldCBpLCBpbGVuO1xuICBpZiAobG9vcCkge1xuICAgIHN0YXJ0ICs9IGNvdW50O1xuICAgIGVuZCArPSBjb3VudDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGlmICghYmV0d2Vlbihub3JtYWxpemUocG9pbnRzW3N0YXJ0ICUgY291bnRdW3Byb3BlcnR5XSksIHN0YXJ0Qm91bmQsIGVuZEJvdW5kKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN0YXJ0LS07XG4gICAgICBlbmQtLTtcbiAgICB9XG4gICAgc3RhcnQgJT0gY291bnQ7XG4gICAgZW5kICU9IGNvdW50O1xuICB9XG4gIGlmIChlbmQgPCBzdGFydCkge1xuICAgIGVuZCArPSBjb3VudDtcbiAgfVxuICByZXR1cm4ge3N0YXJ0LCBlbmQsIGxvb3AsIHN0eWxlOiBzZWdtZW50LnN0eWxlfTtcbn1cbmZ1bmN0aW9uIF9ib3VuZFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgaWYgKCFib3VuZHMpIHtcbiAgICByZXR1cm4gW3NlZ21lbnRdO1xuICB9XG4gIGNvbnN0IHtwcm9wZXJ0eSwgc3RhcnQ6IHN0YXJ0Qm91bmQsIGVuZDogZW5kQm91bmR9ID0gYm91bmRzO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHtjb21wYXJlLCBiZXR3ZWVuLCBub3JtYWxpemV9ID0gcHJvcGVydHlGbihwcm9wZXJ0eSk7XG4gIGNvbnN0IHtzdGFydCwgZW5kLCBsb29wLCBzdHlsZX0gPSBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGxldCBpbnNpZGUgPSBmYWxzZTtcbiAgbGV0IHN1YlN0YXJ0ID0gbnVsbDtcbiAgbGV0IHZhbHVlLCBwb2ludCwgcHJldlZhbHVlO1xuICBjb25zdCBzdGFydElzQmVmb3JlID0gKCkgPT4gYmV0d2VlbihzdGFydEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKSAmJiBjb21wYXJlKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSkgIT09IDA7XG4gIGNvbnN0IGVuZElzQmVmb3JlID0gKCkgPT4gY29tcGFyZShlbmRCb3VuZCwgdmFsdWUpID09PSAwIHx8IGJldHdlZW4oZW5kQm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpO1xuICBjb25zdCBzaG91bGRTdGFydCA9ICgpID0+IGluc2lkZSB8fCBzdGFydElzQmVmb3JlKCk7XG4gIGNvbnN0IHNob3VsZFN0b3AgPSAoKSA9PiAhaW5zaWRlIHx8IGVuZElzQmVmb3JlKCk7XG4gIGZvciAobGV0IGkgPSBzdGFydCwgcHJldiA9IHN0YXJ0OyBpIDw9IGVuZDsgKytpKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhbHVlID0gbm9ybWFsaXplKHBvaW50W3Byb3BlcnR5XSk7XG4gICAgaWYgKHZhbHVlID09PSBwcmV2VmFsdWUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpbnNpZGUgPSBiZXR3ZWVuKHZhbHVlLCBzdGFydEJvdW5kLCBlbmRCb3VuZCk7XG4gICAgaWYgKHN1YlN0YXJ0ID09PSBudWxsICYmIHNob3VsZFN0YXJ0KCkpIHtcbiAgICAgIHN1YlN0YXJ0ID0gY29tcGFyZSh2YWx1ZSwgc3RhcnRCb3VuZCkgPT09IDAgPyBpIDogcHJldjtcbiAgICB9XG4gICAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsICYmIHNob3VsZFN0b3AoKSkge1xuICAgICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7c3RhcnQ6IHN1YlN0YXJ0LCBlbmQ6IGksIGxvb3AsIGNvdW50LCBzdHlsZX0pKTtcbiAgICAgIHN1YlN0YXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgcHJldiA9IGk7XG4gICAgcHJldlZhbHVlID0gdmFsdWU7XG4gIH1cbiAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsKSB7XG4gICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7c3RhcnQ6IHN1YlN0YXJ0LCBlbmQsIGxvb3AsIGNvdW50LCBzdHlsZX0pKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2JvdW5kU2VnbWVudHMobGluZSwgYm91bmRzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzdWIgPSBfYm91bmRTZWdtZW50KHNlZ21lbnRzW2ldLCBsaW5lLnBvaW50cywgYm91bmRzKTtcbiAgICBpZiAoc3ViLmxlbmd0aCkge1xuICAgICAgcmVzdWx0LnB1c2goLi4uc3ViKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcykge1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgZW5kID0gY291bnQgLSAxO1xuICBpZiAobG9vcCAmJiAhc3BhbkdhcHMpIHtcbiAgICB3aGlsZSAoc3RhcnQgPCBjb3VudCAmJiAhcG9pbnRzW3N0YXJ0XS5za2lwKSB7XG4gICAgICBzdGFydCsrO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoc3RhcnQgPCBjb3VudCAmJiBwb2ludHNbc3RhcnRdLnNraXApIHtcbiAgICBzdGFydCsrO1xuICB9XG4gIHN0YXJ0ICU9IGNvdW50O1xuICBpZiAobG9vcCkge1xuICAgIGVuZCArPSBzdGFydDtcbiAgfVxuICB3aGlsZSAoZW5kID4gc3RhcnQgJiYgcG9pbnRzW2VuZCAlIGNvdW50XS5za2lwKSB7XG4gICAgZW5kLS07XG4gIH1cbiAgZW5kICU9IGNvdW50O1xuICByZXR1cm4ge3N0YXJ0LCBlbmR9O1xufVxuZnVuY3Rpb24gc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGxvb3ApIHtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IGxhc3QgPSBzdGFydDtcbiAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnRdO1xuICBsZXQgZW5kO1xuICBmb3IgKGVuZCA9IHN0YXJ0ICsgMTsgZW5kIDw9IG1heDsgKytlbmQpIHtcbiAgICBjb25zdCBjdXIgPSBwb2ludHNbZW5kICUgY291bnRdO1xuICAgIGlmIChjdXIuc2tpcCB8fCBjdXIuc3RvcCkge1xuICAgICAgaWYgKCFwcmV2LnNraXApIHtcbiAgICAgICAgbG9vcCA9IGZhbHNlO1xuICAgICAgICByZXN1bHQucHVzaCh7c3RhcnQ6IHN0YXJ0ICUgY291bnQsIGVuZDogKGVuZCAtIDEpICUgY291bnQsIGxvb3B9KTtcbiAgICAgICAgc3RhcnQgPSBsYXN0ID0gY3VyLnN0b3AgPyBlbmQgOiBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gZW5kO1xuICAgICAgaWYgKHByZXYuc2tpcCkge1xuICAgICAgICBzdGFydCA9IGVuZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcHJldiA9IGN1cjtcbiAgfVxuICBpZiAobGFzdCAhPT0gbnVsbCkge1xuICAgIHJlc3VsdC5wdXNoKHtzdGFydDogc3RhcnQgJSBjb3VudCwgZW5kOiBsYXN0ICUgY291bnQsIGxvb3B9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2NvbXB1dGVTZWdtZW50cyhsaW5lLCBzZWdtZW50T3B0aW9ucykge1xuICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3Qgc3BhbkdhcHMgPSBsaW5lLm9wdGlvbnMuc3BhbkdhcHM7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgaWYgKCFjb3VudCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBsb29wID0gISFsaW5lLl9sb29wO1xuICBjb25zdCB7c3RhcnQsIGVuZH0gPSBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpO1xuICBpZiAoc3BhbkdhcHMgPT09IHRydWUpIHtcbiAgICByZXR1cm4gc3BsaXRCeVN0eWxlcyhsaW5lLCBbe3N0YXJ0LCBlbmQsIGxvb3B9XSwgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG4gIH1cbiAgY29uc3QgbWF4ID0gZW5kIDwgc3RhcnQgPyBlbmQgKyBjb3VudCA6IGVuZDtcbiAgY29uc3QgY29tcGxldGVMb29wID0gISFsaW5lLl9mdWxsTG9vcCAmJiBzdGFydCA9PT0gMCAmJiBlbmQgPT09IGNvdW50IC0gMTtcbiAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGNvbXBsZXRlTG9vcCksIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuZnVuY3Rpb24gc3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucykge1xuICBpZiAoIXNlZ21lbnRPcHRpb25zIHx8ICFzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0IHx8ICFwb2ludHMpIHtcbiAgICByZXR1cm4gc2VnbWVudHM7XG4gIH1cbiAgcmV0dXJuIGRvU3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG59XG5mdW5jdGlvbiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgY29uc3QgY2hhcnRDb250ZXh0ID0gbGluZS5fY2hhcnQuZ2V0Q29udGV4dCgpO1xuICBjb25zdCBiYXNlU3R5bGUgPSByZWFkU3R5bGUobGluZS5vcHRpb25zKTtcbiAgY29uc3Qge19kYXRhc2V0SW5kZXg6IGRhdGFzZXRJbmRleCwgb3B0aW9uczoge3NwYW5HYXBzfX0gPSBsaW5lO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgcHJldlN0eWxlID0gYmFzZVN0eWxlO1xuICBsZXQgc3RhcnQgPSBzZWdtZW50c1swXS5zdGFydDtcbiAgbGV0IGkgPSBzdGFydDtcbiAgZnVuY3Rpb24gYWRkU3R5bGUocywgZSwgbCwgc3QpIHtcbiAgICBjb25zdCBkaXIgPSBzcGFuR2FwcyA/IC0xIDogMTtcbiAgICBpZiAocyA9PT0gZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzICs9IGNvdW50O1xuICAgIHdoaWxlIChwb2ludHNbcyAlIGNvdW50XS5za2lwKSB7XG4gICAgICBzIC09IGRpcjtcbiAgICB9XG4gICAgd2hpbGUgKHBvaW50c1tlICUgY291bnRdLnNraXApIHtcbiAgICAgIGUgKz0gZGlyO1xuICAgIH1cbiAgICBpZiAocyAlIGNvdW50ICE9PSBlICUgY291bnQpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHtzdGFydDogcyAlIGNvdW50LCBlbmQ6IGUgJSBjb3VudCwgbG9vcDogbCwgc3R5bGU6IHN0fSk7XG4gICAgICBwcmV2U3R5bGUgPSBzdDtcbiAgICAgIHN0YXJ0ID0gZSAlIGNvdW50O1xuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBzdGFydCA9IHNwYW5HYXBzID8gc3RhcnQgOiBzZWdtZW50LnN0YXJ0O1xuICAgIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0ICUgY291bnRdO1xuICAgIGxldCBzdHlsZTtcbiAgICBmb3IgKGkgPSBzdGFydCArIDE7IGkgPD0gc2VnbWVudC5lbmQ7IGkrKykge1xuICAgICAgY29uc3QgcHQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICAgIHN0eWxlID0gcmVhZFN0eWxlKHNlZ21lbnRPcHRpb25zLnNldENvbnRleHQoY3JlYXRlQ29udGV4dChjaGFydENvbnRleHQsIHtcbiAgICAgICAgdHlwZTogJ3NlZ21lbnQnLFxuICAgICAgICBwMDogcHJldixcbiAgICAgICAgcDE6IHB0LFxuICAgICAgICBwMERhdGFJbmRleDogKGkgLSAxKSAlIGNvdW50LFxuICAgICAgICBwMURhdGFJbmRleDogaSAlIGNvdW50LFxuICAgICAgICBkYXRhc2V0SW5kZXhcbiAgICAgIH0pKSk7XG4gICAgICBpZiAoc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpKSB7XG4gICAgICAgIGFkZFN0eWxlKHN0YXJ0LCBpIC0gMSwgc2VnbWVudC5sb29wLCBwcmV2U3R5bGUpO1xuICAgICAgfVxuICAgICAgcHJldiA9IHB0O1xuICAgICAgcHJldlN0eWxlID0gc3R5bGU7XG4gICAgfVxuICAgIGlmIChzdGFydCA8IGkgLSAxKSB7XG4gICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJlYWRTdHlsZShvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICBib3JkZXJDYXBTdHlsZTogb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSxcbiAgICBib3JkZXJEYXNoOiBvcHRpb25zLmJvcmRlckRhc2gsXG4gICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgIGJvcmRlckpvaW5TdHlsZTogb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUsXG4gICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3JcbiAgfTtcbn1cbmZ1bmN0aW9uIHN0eWxlQ2hhbmdlZChzdHlsZSwgcHJldlN0eWxlKSB7XG4gIHJldHVybiBwcmV2U3R5bGUgJiYgSlNPTi5zdHJpbmdpZnkoc3R5bGUpICE9PSBKU09OLnN0cmluZ2lmeShwcmV2U3R5bGUpO1xufVxuXG5leHBvcnQgeyBfaXNQb2ludEluQXJlYSBhcyAkLCBfZmFjdG9yaXplIGFzIEEsIGZpbml0ZU9yRGVmYXVsdCBhcyBCLCBjYWxsYmFjayBhcyBDLCBfYWRkR3JhY2UgYXMgRCwgX2xpbWl0VmFsdWUgYXMgRSwgdG9EZWdyZWVzIGFzIEYsIF9tZWFzdXJlVGV4dCBhcyBHLCBIQUxGX1BJIGFzIEgsIF9pbnQxNlJhbmdlIGFzIEksIF9hbGlnblBpeGVsIGFzIEosIHRvUGFkZGluZyBhcyBLLCBjbGlwQXJlYSBhcyBMLCByZW5kZXJUZXh0IGFzIE0sIHVuY2xpcEFyZWEgYXMgTiwgdG9Gb250IGFzIE8sIFBJIGFzIFAsIGVhY2ggYXMgUSwgX3RvTGVmdFJpZ2h0Q2VudGVyIGFzIFIsIF9hbGlnblN0YXJ0RW5kIGFzIFMsIFRBVSBhcyBULCBvdmVycmlkZXMgYXMgVSwgbWVyZ2UgYXMgViwgX2NhcGl0YWxpemUgYXMgVywgZ2V0UmVsYXRpdmVQb3NpdGlvbiBhcyBYLCBfcmxvb2t1cEJ5S2V5IGFzIFksIF9sb29rdXBCeUtleSBhcyBaLCBfYXJyYXlVbmlxdWUgYXMgXywgcmVzb2x2ZSBhcyBhLCB0b0xpbmVIZWlnaHQgYXMgYSQsIGdldEFuZ2xlRnJvbVBvaW50IGFzIGEwLCBnZXRNYXhpbXVtU2l6ZSBhcyBhMSwgX2dldFBhcmVudE5vZGUgYXMgYTIsIHJlYWRVc2VkU2l6ZSBhcyBhMywgdGhyb3R0bGVkIGFzIGE0LCBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIGFzIGE1LCBfaXNEb21TdXBwb3J0ZWQgYXMgYTYsIGRlc2NyaXB0b3JzIGFzIGE3LCBpc0Z1bmN0aW9uIGFzIGE4LCBfYXR0YWNoQ29udGV4dCBhcyBhOSwgZ2V0UnRsQWRhcHRlciBhcyBhQSwgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uIGFzIGFCLCBfdGV4dFggYXMgYUMsIHJlc3RvcmVUZXh0RGlyZWN0aW9uIGFzIGFELCBkcmF3UG9pbnRMZWdlbmQgYXMgYUUsIG5vb3AgYXMgYUYsIGRpc3RhbmNlQmV0d2VlblBvaW50cyBhcyBhRywgX3NldE1pbkFuZE1heEJ5S2V5IGFzIGFILCBuaWNlTnVtIGFzIGFJLCBhbG1vc3RXaG9sZSBhcyBhSiwgYWxtb3N0RXF1YWxzIGFzIGFLLCBfZGVjaW1hbFBsYWNlcyBhcyBhTCwgX2xvbmdlc3RUZXh0IGFzIGFNLCBfZmlsdGVyQmV0d2VlbiBhcyBhTiwgX2xvb2t1cCBhcyBhTywgaXNQYXR0ZXJuT3JHcmFkaWVudCBhcyBhUCwgZ2V0SG92ZXJDb2xvciBhcyBhUSwgY2xvbmUkMSBhcyBhUiwgX21lcmdlciBhcyBhUywgX21lcmdlcklmIGFzIGFULCBfZGVwcmVjYXRlZCBhcyBhVSwgX3NwbGl0S2V5IGFzIGFWLCB0b0ZvbnRTdHJpbmcgYXMgYVcsIHNwbGluZUN1cnZlIGFzIGFYLCBzcGxpbmVDdXJ2ZU1vbm90b25lIGFzIGFZLCBnZXRTdHlsZSBhcyBhWiwgZm9udFN0cmluZyBhcyBhXywgX2NyZWF0ZVJlc29sdmVyIGFzIGFhLCBfZGVzY3JpcHRvcnMgYXMgYWIsIG1lcmdlSWYgYXMgYWMsIHVpZCBhcyBhZCwgZGVib3VuY2UgYXMgYWUsIHJldGluYVNjYWxlIGFzIGFmLCBjbGVhckNhbnZhcyBhcyBhZywgc2V0c0VxdWFsIGFzIGFoLCBfZWxlbWVudHNFcXVhbCBhcyBhaSwgX2lzQ2xpY2tFdmVudCBhcyBhaiwgX2lzQmV0d2VlbiBhcyBhaywgX3JlYWRWYWx1ZVRvUHJvcHMgYXMgYWwsIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIGFzIGFtLCBfY29tcHV0ZVNlZ21lbnRzIGFzIGFuLCBfYm91bmRTZWdtZW50cyBhcyBhbywgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIGFzIGFwLCBfYmV6aWVySW50ZXJwb2xhdGlvbiBhcyBhcSwgX3BvaW50SW5MaW5lIGFzIGFyLCBfc3RlcHBlZExpbmVUbyBhcyBhcywgX2JlemllckN1cnZlVG8gYXMgYXQsIGRyYXdQb2ludCBhcyBhdSwgYWRkUm91bmRlZFJlY3RQYXRoIGFzIGF2LCB0b1RSQkwgYXMgYXcsIHRvVFJCTENvcm5lcnMgYXMgYXgsIF9ib3VuZFNlZ21lbnQgYXMgYXksIF9ub3JtYWxpemVBbmdsZSBhcyBheiwgaXNBcnJheSBhcyBiLCBQSVRBVSBhcyBiMCwgSU5GSU5JVFkgYXMgYjEsIFJBRF9QRVJfREVHIGFzIGIyLCBRVUFSVEVSX1BJIGFzIGIzLCBUV09fVEhJUkRTX1BJIGFzIGI0LCBfYW5nbGVEaWZmIGFzIGI1LCBjb2xvciBhcyBjLCBkZWZhdWx0cyBhcyBkLCBlZmZlY3RzIGFzIGUsIHJlc29sdmVPYmplY3RLZXkgYXMgZiwgaXNOdW1iZXJGaW5pdGUgYXMgZywgY3JlYXRlQ29udGV4dCBhcyBoLCBpc09iamVjdCBhcyBpLCBkZWZpbmVkIGFzIGosIGlzTnVsbE9yVW5kZWYgYXMgaywgbGlzdGVuQXJyYXlFdmVudHMgYXMgbCwgdG9QZXJjZW50YWdlIGFzIG0sIHRvRGltZW5zaW9uIGFzIG4sIGZvcm1hdE51bWJlciBhcyBvLCBfYW5nbGVCZXR3ZWVuIGFzIHAsIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzIGFzIHEsIHJlcXVlc3RBbmltRnJhbWUgYXMgciwgc2lnbiBhcyBzLCB0b1JhZGlhbnMgYXMgdCwgdW5saXN0ZW5BcnJheUV2ZW50cyBhcyB1LCB2YWx1ZU9yRGVmYXVsdCBhcyB2LCBfc2NhbGVSYW5nZXNDaGFuZ2VkIGFzIHcsIGlzTnVtYmVyIGFzIHgsIF9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSBhcyB5LCBsb2cxMCBhcyB6IH07XG4iXSwibmFtZXMiOlsibm9vcCIsInVpZCIsImlkIiwiaXNOdWxsT3JVbmRlZiIsInZhbHVlIiwiaXNBcnJheSIsIkFycmF5IiwidHlwZSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInNsaWNlIiwiaXNPYmplY3QiLCJpc051bWJlckZpbml0ZSIsIk51bWJlciIsImlzRmluaXRlIiwiZmluaXRlT3JEZWZhdWx0IiwiZGVmYXVsdFZhbHVlIiwidmFsdWVPckRlZmF1bHQiLCJ0b1BlcmNlbnRhZ2UiLCJkaW1lbnNpb24iLCJlbmRzV2l0aCIsInBhcnNlRmxvYXQiLCJ0b0RpbWVuc2lvbiIsImNhbGxiYWNrIiwiZm4iLCJhcmdzIiwidGhpc0FyZyIsImFwcGx5IiwiZWFjaCIsImxvb3BhYmxlIiwicmV2ZXJzZSIsImkiLCJsZW4iLCJrZXlzIiwibGVuZ3RoIiwiX2VsZW1lbnRzRXF1YWwiLCJhMCIsImExIiwiaWxlbiIsInYwIiwidjEiLCJkYXRhc2V0SW5kZXgiLCJpbmRleCIsImNsb25lJDEiLCJzb3VyY2UiLCJtYXAiLCJ0YXJnZXQiLCJjcmVhdGUiLCJrbGVuIiwiayIsImlzVmFsaWRLZXkiLCJrZXkiLCJpbmRleE9mIiwiX21lcmdlciIsIm9wdGlvbnMiLCJ0dmFsIiwic3ZhbCIsIm1lcmdlIiwic291cmNlcyIsIm1lcmdlciIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJoYXNPd25Qcm9wZXJ0eSIsIl9kZXByZWNhdGVkIiwic2NvcGUiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJ1bmRlZmluZWQiLCJjb25zb2xlIiwid2FybiIsImtleVJlc29sdmVycyIsInYiLCJ4IiwibyIsInkiLCJyZXNvbHZlT2JqZWN0S2V5Iiwib2JqIiwicmVzb2x2ZXIiLCJfZ2V0S2V5UmVzb2x2ZXIiLCJfc3BsaXRLZXkiLCJwYXJ0cyIsInNwbGl0IiwidG1wIiwicGFydCIsInB1c2giLCJfY2FwaXRhbGl6ZSIsInN0ciIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiZGVmaW5lZCIsImlzRnVuY3Rpb24iLCJzZXRzRXF1YWwiLCJhIiwiYiIsInNpemUiLCJpdGVtIiwiaGFzIiwiX2lzQ2xpY2tFdmVudCIsImUiLCJQSSIsIk1hdGgiLCJUQVUiLCJQSVRBVSIsIklORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJSQURfUEVSX0RFRyIsIkhBTEZfUEkiLCJRVUFSVEVSX1BJIiwiVFdPX1RISVJEU19QSSIsImxvZzEwIiwic2lnbiIsIm5pY2VOdW0iLCJyYW5nZSIsInJvdW5kZWRSYW5nZSIsInJvdW5kIiwiYWxtb3N0RXF1YWxzIiwibmljZVJhbmdlIiwicG93IiwiZmxvb3IiLCJmcmFjdGlvbiIsIm5pY2VGcmFjdGlvbiIsIl9mYWN0b3JpemUiLCJyZXN1bHQiLCJzcXJ0Iiwic29ydCIsInBvcCIsImlzTnVtYmVyIiwibiIsImlzTmFOIiwiZXBzaWxvbiIsImFicyIsImFsbW9zdFdob2xlIiwicm91bmRlZCIsIl9zZXRNaW5BbmRNYXhCeUtleSIsImFycmF5IiwicHJvcGVydHkiLCJtaW4iLCJtYXgiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwicCIsImdldEFuZ2xlRnJvbVBvaW50IiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsImRpc3RhbmNlRnJvbVlDZW50ZXIiLCJyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIiLCJhbmdsZSIsImF0YW4yIiwiZGlzdGFuY2UiLCJkaXN0YW5jZUJldHdlZW5Qb2ludHMiLCJwdDEiLCJwdDIiLCJfYW5nbGVEaWZmIiwiX25vcm1hbGl6ZUFuZ2xlIiwiX2FuZ2xlQmV0d2VlbiIsInN0YXJ0IiwiZW5kIiwic2FtZUFuZ2xlSXNGdWxsQ2lyY2xlIiwicyIsImFuZ2xlVG9TdGFydCIsImFuZ2xlVG9FbmQiLCJzdGFydFRvQW5nbGUiLCJlbmRUb0FuZ2xlIiwiX2xpbWl0VmFsdWUiLCJfaW50MTZSYW5nZSIsIl9pc0JldHdlZW4iLCJfbG9va3VwIiwidGFibGUiLCJjbXAiLCJoaSIsImxvIiwibWlkIiwiX2xvb2t1cEJ5S2V5IiwibGFzdCIsIl9ybG9va3VwQnlLZXkiLCJfZmlsdGVyQmV0d2VlbiIsInZhbHVlcyIsImFycmF5RXZlbnRzIiwibGlzdGVuQXJyYXlFdmVudHMiLCJsaXN0ZW5lciIsIl9jaGFydGpzIiwibGlzdGVuZXJzIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZm9yRWFjaCIsIm1ldGhvZCIsImJhc2UiLCJyZXMiLCJvYmplY3QiLCJ1bmxpc3RlbkFycmF5RXZlbnRzIiwic3R1YiIsInNwbGljZSIsIl9hcnJheVVuaXF1ZSIsIml0ZW1zIiwic2V0IiwiU2V0IiwiYWRkIiwiZnJvbSIsImZvbnRTdHJpbmciLCJwaXhlbFNpemUiLCJmb250U3R5bGUiLCJmb250RmFtaWx5IiwicmVxdWVzdEFuaW1GcmFtZSIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRocm90dGxlZCIsInVwZGF0ZUZuIiwidXBkYXRlQXJncyIsInRpY2tpbmciLCJyZXN0IiwiZGVib3VuY2UiLCJkZWxheSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiX3RvTGVmdFJpZ2h0Q2VudGVyIiwiYWxpZ24iLCJfYWxpZ25TdGFydEVuZCIsIl90ZXh0WCIsImxlZnQiLCJyaWdodCIsInJ0bCIsImNoZWNrIiwiX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMiLCJtZXRhIiwicG9pbnRzIiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwicG9pbnRDb3VudCIsImNvdW50IiwiX3NvcnRlZCIsImlTY2FsZSIsIl9wYXJzZWQiLCJheGlzIiwibWluRGVmaW5lZCIsIm1heERlZmluZWQiLCJnZXRVc2VyQm91bmRzIiwiZ2V0UGl4ZWxGb3JWYWx1ZSIsIl9zY2FsZVJhbmdlc0NoYW5nZWQiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJfc2NhbGVSYW5nZXMiLCJuZXdSYW5nZXMiLCJ4bWluIiwieG1heCIsInltaW4iLCJ5bWF4IiwiY2hhbmdlZCIsImFzc2lnbiIsImF0RWRnZSIsInQiLCJlbGFzdGljSW4iLCJzaW4iLCJlbGFzdGljT3V0IiwiZWZmZWN0cyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiY29zIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJtIiwiZCIsImVhc2VJbk91dEJvdW5jZSIsImxpbSIsImwiLCJoIiwicDJiIiwibjJiIiwiYjJuIiwibjJwIiwibWFwJDEiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJjIiwiZiIsImhleCIsImgxIiwiaDIiLCJlcSIsImlzU2hvcnQiLCJyIiwiZyIsImhleFBhcnNlIiwicmV0IiwiYWxwaGEiLCJoZXhTdHJpbmciLCJIVUVfUkUiLCJoc2wycmdibiIsImhzdjJyZ2JuIiwiaHdiMnJnYm4iLCJ3IiwicmdiIiwiaHVlVmFsdWUiLCJyZ2IyaHNsIiwiY2FsbG4iLCJoc2wycmdiIiwiaHdiMnJnYiIsImhzdjJyZ2IiLCJodWUiLCJodWVQYXJzZSIsImV4ZWMiLCJwMSIsInAyIiwicm90YXRlIiwiZGVnIiwiaHNsU3RyaW5nIiwiWiIsIlkiLCJYIiwiVyIsIlYiLCJVIiwiVCIsIlMiLCJSIiwiUSIsIlAiLCJPIiwiTiIsIk0iLCJMIiwiSyIsIkciLCJIIiwiSSIsIkoiLCJuYW1lcyQxIiwiT2ljZVhlIiwiYW50aXF1ZXdFdGUiLCJhcXVhIiwiYXF1YW1hclJlIiwiYXp1WSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuS2VkT21vbmQiLCJYZSIsIlhldmlUZXQiLCJiUHduIiwiYnVybHl3b29kIiwiY2FNdFhlIiwiS2FydFl1c2UiLCJLb2NUYXRlIiwiY1NPIiwiY1NuZmxvd2VyWGUiLCJjU25zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJ4WGUiLCJ4Y3lhbiIsInhnVE1uUGQiLCJ4V2F5IiwieGdZRiIsInhnWXkiLCJ4a2hha2kiLCJ4bWFnRnRhIiwieFRpdmVnWUYiLCJ4U2FuZ2UiLCJ4U2NFZCIsInhZZCIsInhzT21vbiIsInhzSGdZRiIsInhVWGUiLCJ4VVdheSIsInhVZ1l5IiwieFFlIiwieHZpVGV0IiwiZEFwcFJrIiwiZEFwc2t5WGUiLCJkaW1XYXkiLCJkaW1nWXkiLCJkb2RnZXJYZSIsImZpWWJyaWNrIiwiZmxTT3dFdGUiLCJmb1lzdFdBbiIsImZ1S3NpYSIsImdhUnNiU28iLCJnaG9zdHdFdGUiLCJnVGQiLCJnVE1uUGQiLCJXYXkiLCJnWUYiLCJnWUZMdyIsImdZeSIsImhvbmV5TXciLCJob3RwUmsiLCJSZGlhbllkIiwiUmRpZ28iLCJpdlN5Iiwia2hha2kiLCJsYXZGTXIiLCJsYXZGTXJYc2giLCJsYXduZ1lGIiwiTm1vbmNFZmZvbiIsIlpYZSIsIlpjU08iLCJaY3lhbiIsIlpnVE1uUGRMdyIsIlpXYXkiLCJaZ1lGIiwiWmdZeSIsIlpwUmsiLCJac09tb24iLCJac0hnWUYiLCJac2t5WGUiLCJaVVdheSIsIlpVZ1l5IiwiWnN0QWxYZSIsIlpMdyIsImxpbWUiLCJsaW1lZ1lGIiwibFJGIiwibWFnRnRhIiwibWFQb24iLCJWYXF1YW1hclJlIiwiVlhlIiwiVlNjRWQiLCJWcHVycE4iLCJWc0hnWUYiLCJWVVhlIiwiVnNwclJnZ1lGIiwiVlFlIiwiVnZpVGV0WWQiLCJtaWRuaWdodFhlIiwibVJ0Y1lhbSIsIm1pc3R5UHNlIiwibW9jY2FzUiIsIm5hdmFqb3dFdGUiLCJuYXZ5IiwiVGRsYWNlIiwiVGl2ZSIsIlRpdmVkQmIiLCJTYW5nZSIsIlNhbmdlWWQiLCJTY0VkIiwicE9lZ1RNblBkIiwicE9lZ1lGIiwicE9lUWUiLCJwT2V2aVRldFlkIiwicGFwYXlhd0VwIiwicEhLcHVmZiIsInBlcnUiLCJwUmsiLCJwbHVtIiwicG93TXJYZSIsInB1cnBOIiwiWWJlY2NhcHVycE4iLCJZZCIsIlBzeWJyb3duIiwiUHlPWGUiLCJzYWRkTmJQd24iLCJzT21vbiIsInNhbmR5YlB3biIsInNIZ1lGIiwic0hzaGVsbCIsInNpRm5hIiwic2lsdmVyIiwic2t5WGUiLCJVWGUiLCJVV2F5IiwiVWdZeSIsInNub3ciLCJzcHJSZ2dZRiIsInN0QWxYZSIsInRhbiIsInRlTyIsInRFc3ROIiwidG9tYXRvIiwiUWUiLCJ2aVRldCIsIkpIdCIsIndFdGUiLCJ3RXRlc21va2UiLCJMdyIsIkx3Z1lGIiwidW5wYWNrIiwidW5wYWNrZWQiLCJ0a2V5cyIsImoiLCJvayIsIm5rIiwicmVwbGFjZSIsInBhcnNlSW50IiwibmFtZXMiLCJuYW1lUGFyc2UiLCJ0cmFuc3BhcmVudCIsInRvTG93ZXJDYXNlIiwiUkdCX1JFIiwicmdiUGFyc2UiLCJyZ2JTdHJpbmciLCJ0byIsImludGVycG9sYXRlIiwicmdiMSIsInJnYjIiLCJtb2RIU0wiLCJyYXRpbyIsImNsb25lIiwicHJvdG8iLCJmcm9tT2JqZWN0IiwiaW5wdXQiLCJmdW5jdGlvblBhcnNlIiwiQ29sb3IiLCJjb25zdHJ1Y3RvciIsIl9yZ2IiLCJfdmFsaWQiLCJ2YWxpZCIsIm1peCIsImNvbG9yIiwid2VpZ2h0IiwiYzEiLCJjMiIsIncyIiwidzEiLCJjbGVhcmVyIiwiZ3JleXNjYWxlIiwidmFsIiwib3BhcXVlciIsIm5lZ2F0ZSIsImxpZ2h0ZW4iLCJkYXJrZW4iLCJzYXR1cmF0ZSIsImRlc2F0dXJhdGUiLCJpbmRleF9lc20iLCJpc1BhdHRlcm5PckdyYWRpZW50IiwiZ2V0SG92ZXJDb2xvciIsIm92ZXJyaWRlcyIsImRlc2NyaXB0b3JzIiwiZ2V0U2NvcGUkMSIsIm5vZGUiLCJyb290IiwiRGVmYXVsdHMiLCJfZGVzY3JpcHRvcnMiLCJhbmltYXRpb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImRhdGFzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImNvbnRleHQiLCJjaGFydCIsInBsYXRmb3JtIiwiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsImVsZW1lbnRzIiwiZXZlbnRzIiwiZm9udCIsImZhbWlseSIsInN0eWxlIiwibGluZUhlaWdodCIsImhvdmVyIiwiaG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJjdHgiLCJob3ZlckJvcmRlckNvbG9yIiwiaG92ZXJDb2xvciIsImluZGV4QXhpcyIsImludGVyYWN0aW9uIiwibW9kZSIsImludGVyc2VjdCIsImluY2x1ZGVJbnZpc2libGUiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwib25Ib3ZlciIsIm9uQ2xpY2siLCJwYXJzaW5nIiwicGx1Z2lucyIsInJlc3BvbnNpdmUiLCJzY2FsZSIsInNjYWxlcyIsInNob3dMaW5lIiwiZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3AiLCJkZXNjcmliZSIsImdldCIsIm92ZXJyaWRlIiwicm91dGUiLCJuYW1lIiwidGFyZ2V0U2NvcGUiLCJ0YXJnZXROYW1lIiwic2NvcGVPYmplY3QiLCJ0YXJnZXRTY29wZU9iamVjdCIsInByaXZhdGVOYW1lIiwiZGVmaW5lUHJvcGVydGllcyIsIndyaXRhYmxlIiwibG9jYWwiLCJkZWZhdWx0cyIsIl9zY3JpcHRhYmxlIiwic3RhcnRzV2l0aCIsIl9pbmRleGFibGUiLCJfZmFsbGJhY2siLCJ0b0ZvbnRTdHJpbmciLCJfbWVhc3VyZVRleHQiLCJkYXRhIiwiZ2MiLCJsb25nZXN0Iiwic3RyaW5nIiwidGV4dFdpZHRoIiwibWVhc3VyZVRleHQiLCJ3aWR0aCIsIl9sb25nZXN0VGV4dCIsImFycmF5T2ZUaGluZ3MiLCJjYWNoZSIsImdhcmJhZ2VDb2xsZWN0Iiwic2F2ZSIsImpsZW4iLCJ0aGluZyIsIm5lc3RlZFRoaW5nIiwicmVzdG9yZSIsImdjTGVuIiwiX2FsaWduUGl4ZWwiLCJwaXhlbCIsImN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIiwiaGFsZldpZHRoIiwiY2xlYXJDYW52YXMiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwicmVzZXRUcmFuc2Zvcm0iLCJjbGVhclJlY3QiLCJoZWlnaHQiLCJkcmF3UG9pbnQiLCJkcmF3UG9pbnRMZWdlbmQiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImNvcm5lclJhZGl1cyIsInBvaW50U3R5bGUiLCJyb3RhdGlvbiIsInJhZGl1cyIsInJhZCIsInRyYW5zbGF0ZSIsImRyYXdJbWFnZSIsImJlZ2luUGF0aCIsImVsbGlwc2UiLCJhcmMiLCJjbG9zZVBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJTUVJUMV8yIiwicmVjdCIsImZpbGwiLCJib3JkZXJXaWR0aCIsInN0cm9rZSIsIl9pc1BvaW50SW5BcmVhIiwicG9pbnQiLCJhcmVhIiwibWFyZ2luIiwidG9wIiwiYm90dG9tIiwiY2xpcEFyZWEiLCJjbGlwIiwidW5jbGlwQXJlYSIsIl9zdGVwcGVkTGluZVRvIiwiZmxpcCIsIm1pZHBvaW50IiwiX2JlemllckN1cnZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiY3AxeCIsImNwMngiLCJjcDF5IiwiY3AyeSIsInJlbmRlclRleHQiLCJ0ZXh0Iiwib3B0cyIsImxpbmVzIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VDb2xvciIsImxpbmUiLCJzZXRSZW5kZXJPcHRzIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJzdHJva2VUZXh0IiwibWF4V2lkdGgiLCJmaWxsVGV4dCIsImRlY29yYXRlVGV4dCIsInRyYW5zbGF0aW9uIiwiZmlsbFN0eWxlIiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwic3RyaWtldGhyb3VnaCIsInVuZGVybGluZSIsIm1ldHJpY3MiLCJhY3R1YWxCb3VuZGluZ0JveExlZnQiLCJhY3R1YWxCb3VuZGluZ0JveFJpZ2h0IiwiYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQiLCJhY3R1YWxCb3VuZGluZ0JveERlc2NlbnQiLCJ5RGVjb3JhdGlvbiIsImRlY29yYXRpb25XaWR0aCIsImFkZFJvdW5kZWRSZWN0UGF0aCIsInRvcExlZnQiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJ0b3BSaWdodCIsIkxJTkVfSEVJR0hUIiwiUmVnRXhwIiwiRk9OVF9TVFlMRSIsInRvTGluZUhlaWdodCIsIm1hdGNoZXMiLCJtYXRjaCIsIm51bWJlck9yWmVybyIsIl9yZWFkVmFsdWVUb1Byb3BzIiwicHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJwcm9wIiwidG9UUkJMIiwidG9UUkJMQ29ybmVycyIsInRvUGFkZGluZyIsInRvRm9udCIsImZhbGxiYWNrIiwicmVzb2x2ZSIsImlucHV0cyIsImluZm8iLCJjYWNoZWFibGUiLCJfYWRkR3JhY2UiLCJtaW5tYXgiLCJncmFjZSIsImJlZ2luQXRaZXJvIiwiY2hhbmdlIiwia2VlcFplcm8iLCJjcmVhdGVDb250ZXh0IiwicGFyZW50Q29udGV4dCIsIl9jcmVhdGVSZXNvbHZlciIsInNjb3BlcyIsInByZWZpeGVzIiwicm9vdFNjb3BlcyIsImdldFRhcmdldCIsIl9yZXNvbHZlIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfY2FjaGVhYmxlIiwiX3Njb3BlcyIsIl9yb290U2NvcGVzIiwiX2dldFRhcmdldCIsIlByb3h5IiwiZGVsZXRlUHJvcGVydHkiLCJfa2V5cyIsIl9jYWNoZWQiLCJfcmVzb2x2ZVdpdGhQcmVmaXhlcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJnZXRQcm90b3R5cGVPZiIsImdldEtleXNGcm9tQWxsU2NvcGVzIiwiaW5jbHVkZXMiLCJvd25LZXlzIiwic3RvcmFnZSIsIl9zdG9yYWdlIiwiX2F0dGFjaENvbnRleHQiLCJwcm94eSIsInN1YlByb3h5IiwiZGVzY3JpcHRvckRlZmF1bHRzIiwiX3Byb3h5IiwiX2NvbnRleHQiLCJfc3ViUHJveHkiLCJfc3RhY2siLCJzZXRDb250ZXh0IiwicmVjZWl2ZXIiLCJfcmVzb2x2ZVdpdGhDb250ZXh0IiwiYWxsS2V5cyIsInNjcmlwdGFibGUiLCJpbmRleGFibGUiLCJfYWxsS2V5cyIsImlzU2NyaXB0YWJsZSIsImlzSW5kZXhhYmxlIiwicmVhZEtleSIsInByZWZpeCIsIm5lZWRzU3ViUmVzb2x2ZXIiLCJfcmVzb2x2ZVNjcmlwdGFibGUiLCJfcmVzb2x2ZUFycmF5IiwiRXJyb3IiLCJqb2luIiwiZGVsZXRlIiwiY3JlYXRlU3ViUmVzb2x2ZXIiLCJhcnIiLCJmaWx0ZXIiLCJyZXNvbHZlRmFsbGJhY2siLCJnZXRTY29wZSIsInBhcmVudCIsImFkZFNjb3BlcyIsInBhcmVudFNjb3BlcyIsInBhcmVudEZhbGxiYWNrIiwiYWxsU2NvcGVzIiwiYWRkU2NvcGVzRnJvbUtleSIsInN1YkdldFRhcmdldCIsInJlc29sdmVLZXlzRnJvbUFsbFNjb3BlcyIsIl9wYXJzZU9iamVjdERhdGFSYWRpYWxTY2FsZSIsIl9wYXJzaW5nIiwicGFyc2VkIiwicGFyc2UiLCJFUFNJTE9OIiwiZ2V0UG9pbnQiLCJza2lwIiwiZ2V0VmFsdWVBeGlzIiwic3BsaW5lQ3VydmUiLCJmaXJzdFBvaW50IiwibWlkZGxlUG9pbnQiLCJhZnRlclBvaW50IiwibmV4dCIsImQwMSIsImQxMiIsInMwMSIsInMxMiIsImZhIiwiZmIiLCJtb25vdG9uZUFkanVzdCIsImRlbHRhSyIsIm1LIiwicG9pbnRzTGVuIiwiYWxwaGFLIiwiYmV0YUsiLCJ0YXVLIiwic3F1YXJlZE1hZ25pdHVkZSIsInBvaW50Q3VycmVudCIsInBvaW50QWZ0ZXIiLCJtb25vdG9uZUNvbXB1dGUiLCJ2YWx1ZUF4aXMiLCJkZWx0YSIsInBvaW50QmVmb3JlIiwiaVBpeGVsIiwidlBpeGVsIiwic3BsaW5lQ3VydmVNb25vdG9uZSIsInNsb3BlRGVsdGEiLCJjYXBDb250cm9sUG9pbnQiLCJwdCIsImNhcEJlemllclBvaW50cyIsImluQXJlYSIsImluQXJlYVByZXYiLCJpbkFyZWFOZXh0IiwiX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMiLCJsb29wIiwiY29udHJvbFBvaW50cyIsInNwYW5HYXBzIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsInByZXYiLCJ0ZW5zaW9uIiwiX2lzRG9tU3VwcG9ydGVkIiwiZG9jdW1lbnQiLCJfZ2V0UGFyZW50Tm9kZSIsImRvbU5vZGUiLCJwYXJlbnROb2RlIiwiaG9zdCIsInBhcnNlTWF4U3R5bGUiLCJzdHlsZVZhbHVlIiwicGFyZW50UHJvcGVydHkiLCJ2YWx1ZUluUGl4ZWxzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImVsZW1lbnQiLCJnZXRTdHlsZSIsImVsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9uZWRTdHlsZSIsInN0eWxlcyIsInN1ZmZpeCIsInBvcyIsInVzZU9mZnNldFBvcyIsInNoYWRvd1Jvb3QiLCJnZXRDYW52YXNQb3NpdGlvbiIsInRvdWNoZXMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJjbGllbnRZIiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImV2dCIsImJvcmRlckJveCIsImJveFNpemluZyIsInBhZGRpbmdzIiwiYm9yZGVycyIsImdldENvbnRhaW5lclNpemUiLCJtYXhIZWlnaHQiLCJjb250YWluZXIiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImNvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyQm9yZGVyIiwiY29udGFpbmVyUGFkZGluZyIsInJvdW5kMSIsImdldE1heGltdW1TaXplIiwiYmJXaWR0aCIsImJiSGVpZ2h0IiwiYXNwZWN0UmF0aW8iLCJtYXJnaW5zIiwiY29udGFpbmVyU2l6ZSIsInJldGluYVNjYWxlIiwiZm9yY2VSYXRpbyIsImZvcmNlU3R5bGUiLCJwaXhlbFJhdGlvIiwiZGV2aWNlSGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJzZXRUcmFuc2Zvcm0iLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZVN1cHBvcnRlZCIsInBhc3NpdmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWRVc2VkU2l6ZSIsIl9wb2ludEluTGluZSIsIl9zdGVwcGVkSW50ZXJwb2xhdGlvbiIsIl9iZXppZXJJbnRlcnBvbGF0aW9uIiwiY3AxIiwiY3AyIiwiaW50bENhY2hlIiwiTWFwIiwiZ2V0TnVtYmVyRm9ybWF0IiwibG9jYWxlIiwiY2FjaGVLZXkiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybWF0dGVyIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImZvcm1hdE51bWJlciIsIm51bSIsImZvcm1hdCIsImdldFJpZ2h0VG9MZWZ0QWRhcHRlciIsInJlY3RYIiwic2V0V2lkdGgiLCJ4UGx1cyIsImxlZnRGb3JMdHIiLCJpdGVtV2lkdGgiLCJnZXRMZWZ0VG9SaWdodEFkYXB0ZXIiLCJfaXRlbVdpZHRoIiwiZ2V0UnRsQWRhcHRlciIsIm92ZXJyaWRlVGV4dERpcmVjdGlvbiIsImRpcmVjdGlvbiIsIm9yaWdpbmFsIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInNldFByb3BlcnR5IiwicHJldlRleHREaXJlY3Rpb24iLCJyZXN0b3JlVGV4dERpcmVjdGlvbiIsInByb3BlcnR5Rm4iLCJiZXR3ZWVuIiwiY29tcGFyZSIsIm5vcm1hbGl6ZSIsIm5vcm1hbGl6ZVNlZ21lbnQiLCJnZXRTZWdtZW50Iiwic2VnbWVudCIsImJvdW5kcyIsInN0YXJ0Qm91bmQiLCJlbmRCb3VuZCIsIl9ib3VuZFNlZ21lbnQiLCJpbnNpZGUiLCJzdWJTdGFydCIsInByZXZWYWx1ZSIsInN0YXJ0SXNCZWZvcmUiLCJlbmRJc0JlZm9yZSIsInNob3VsZFN0YXJ0Iiwic2hvdWxkU3RvcCIsIl9ib3VuZFNlZ21lbnRzIiwic2VnbWVudHMiLCJzdWIiLCJmaW5kU3RhcnRBbmRFbmQiLCJzb2xpZFNlZ21lbnRzIiwiY3VyIiwic3RvcCIsIl9jb21wdXRlU2VnbWVudHMiLCJzZWdtZW50T3B0aW9ucyIsIl9sb29wIiwic3BsaXRCeVN0eWxlcyIsImNvbXBsZXRlTG9vcCIsIl9mdWxsTG9vcCIsImRvU3BsaXRCeVN0eWxlcyIsImNoYXJ0Q29udGV4dCIsIl9jaGFydCIsImJhc2VTdHlsZSIsInJlYWRTdHlsZSIsIl9kYXRhc2V0SW5kZXgiLCJwcmV2U3R5bGUiLCJhZGRTdHlsZSIsInN0IiwiZGlyIiwicDAiLCJwMERhdGFJbmRleCIsInAxRGF0YUluZGV4Iiwic3R5bGVDaGFuZ2VkIiwiYm9yZGVyQ2FwU3R5bGUiLCJib3JkZXJEYXNoIiwiYm9yZGVyRGFzaE9mZnNldCIsImJvcmRlckpvaW5TdHlsZSIsIiQiLCJfIiwiYSQiLCJhMiIsImEzIiwiYTQiLCJhNSIsImE2IiwiYTciLCJhOCIsImE5IiwiYUEiLCJhQiIsImFDIiwiYUQiLCJhRSIsImFGIiwiYUciLCJhSCIsImFJIiwiYUoiLCJhSyIsImFMIiwiYU0iLCJhTiIsImFPIiwiYVAiLCJhUSIsImFSIiwiYVMiLCJhVCIsImFVIiwiYVYiLCJhVyIsImFYIiwiYVkiLCJhWiIsImFfIiwiYWEiLCJhYiIsImFjIiwiYWQiLCJhZSIsImFmIiwiYWciLCJhaCIsImFpIiwiYWoiLCJhayIsImFsIiwiYW0iLCJhbiIsImFvIiwiYXAiLCJhcSIsImFyIiwiYXMiLCJhdCIsImF1IiwiYXYiLCJhdyIsImF4IiwiYXkiLCJheiIsImIwIiwiYjEiLCJiMiIsImIzIiwiYjQiLCJiNSIsInEiLCJ1IiwieiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/chart.js/dist/chunks/helpers.segment.mjs\n"));

/***/ }),

/***/ "./node_modules/react-hook-form/dist/index.esm.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/react-hook-form/dist/index.esm.mjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Controller\": function() { return /* binding */ Controller; },\n/* harmony export */   \"FormProvider\": function() { return /* binding */ FormProvider; },\n/* harmony export */   \"appendErrors\": function() { return /* binding */ appendErrors; },\n/* harmony export */   \"get\": function() { return /* binding */ get; },\n/* harmony export */   \"set\": function() { return /* binding */ set; },\n/* harmony export */   \"useController\": function() { return /* binding */ useController; },\n/* harmony export */   \"useFieldArray\": function() { return /* binding */ useFieldArray; },\n/* harmony export */   \"useForm\": function() { return /* binding */ useForm; },\n/* harmony export */   \"useFormContext\": function() { return /* binding */ useFormContext; },\n/* harmony export */   \"useFormState\": function() { return /* binding */ useFormState; },\n/* harmony export */   \"useWatch\": function() { return /* binding */ useWatch; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nvar isDateObject = value => value instanceof Date;\n\nvar isNullOrUndefined = value => value == null;\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n\nvar getEventValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n\nvar getNodeParentName = name => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = value => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nconst EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nconst HookFormContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\n\nconst useFormContext = () => react__WEBPACK_IMPORTED_MODULE_0__.useContext(HookFormContext);\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\n\n\nconst FormProvider = props => {\n  const {\n    children,\n    ...data\n  } = props;\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(HookFormContext.Provider, {\n    value: data\n  }, children);\n};\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\n  const result = {};\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      }\n    });\n  }\n\n  return result;\n};\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const {\n    name,\n    ...formState\n  } = formStateData;\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\n\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName ? name === signalName : !name || !signalName || name === signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n  const _props = react__WEBPACK_IMPORTED_MODULE_0__.useRef(props);\n\n  _props.current = props;\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const tearDown = subscription => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription = !props.disabled && _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\n\n\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name,\n    exact\n  } = props || {};\n  const [formState, updateFormState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(control._formState);\n\n  const _localProxyFormState = react__WEBPACK_IMPORTED_MODULE_0__.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n\n  const _name = react__WEBPACK_IMPORTED_MODULE_0__.useRef(name);\n\n  const _mounted = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\n\n  _name.current = name;\n  const callback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(value => _mounted.current && shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current) && updateFormState({ ...control._formState,\n    ...value\n  }), [control, exact]);\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    _mounted.current = true;\n    return () => {\n      _mounted.current = false;\n    };\n  }, []);\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\n\nvar isString = value => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\n  const isArray = Array.isArray(names);\n\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n\n  if (isArray) {\n    return names.map(fieldName => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar objectHasFunction = data => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\n\n\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact\n  } = props || {};\n\n  const _name = react__WEBPACK_IMPORTED_MODULE_0__.useRef(name);\n\n  _name.current = name;\n  const callback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(formState => {\n    if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n      const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\n      updateValue(isUndefined(_name.current) || isObject(fieldValues) && !objectHasFunction(fieldValues) ? { ...fieldValues\n      } : Array.isArray(fieldValues) ? [...fieldValues] : isUndefined(fieldValues) ? defaultValue : fieldValues);\n    }\n  }, [control, exact, defaultValue]);\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback\n  });\n  const [value, updateValue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\n\n\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n    exact: true\n  });\n  const formState = useFormState({\n    control,\n    name\n  });\n\n  const _registerProps = react__WEBPACK_IMPORTED_MODULE_0__.useRef(control.register(name, { ...props.rules,\n    value\n  }));\n\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    const updateMounted = (name, value) => {\n      const field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n\n      (isArrayField ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n  return {\n    field: {\n      name,\n      value,\n      onChange: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(event => {\n        _registerProps.current.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      }, [name]),\n      onBlur: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n        _registerProps.current.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      }, [name, control]),\n      ref: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(elm => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            select: () => elm.select(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }, [name, control._fields])\n    },\n    formState,\n    fieldState: Object.defineProperties({}, {\n      invalid: {\n        enumerable: true,\n        get: () => !!get(formState.errors, name)\n      },\n      isDirty: {\n        enumerable: true,\n        get: () => !!get(formState.dirtyFields, name)\n      },\n      isTouched: {\n        enumerable: true,\n        get: () => !!get(formState.touchedFields, name)\n      },\n      error: {\n        enumerable: true,\n        get: () => get(formState.errors, name)\n      }\n    })\n  };\n}\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\n\n\nconst Controller = props => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? { ...errors[name],\n  types: { ...(errors[name] && errors[name].types ? errors[name].types : {}),\n    [type]: message || true\n  }\n} : {};\n\nvar isKey = value => /^\\w*$/.test(value);\n\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const {\n        _f,\n        ...currentField\n      } = field;\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n\n          break;\n        }\n      } else if (isObject(currentField)) {\n        focusFieldBy(currentField, callback);\n      }\n    }\n  }\n};\n\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some(watchName => name.startsWith(watchName) && /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n  const fieldArrayErrors = compact(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n\nvar isBoolean = value => typeof value === 'boolean';\n\nvar isFileInput = element => element.type === 'file';\n\nvar isMessage = value => isString(value) || react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(value);\n\nvar isRadioInput = element => element.type === 'radio';\n\nvar isRegex = value => value instanceof RegExp;\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n\n  if (!mount || disabled) {\n    return {};\n  }\n\n  const inputRef = refs ? refs[0] : ref;\n\n  const setCustomValidity = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message)\n    };\n  };\n\n  if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)\n      };\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);\n\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && (isString(inputValue) || isFieldArray && Array.isArray(inputValue))) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)\n      };\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = { ...validateError,\n          ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)\n        };\n\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n\n        if (validateError) {\n          validationResult = { ...validateError,\n            ...appendErrorsCurry(key, validateError.message)\n          };\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult\n        };\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n\nfunction append(data, value) {\n  return [...data, ...convertToArrayPayload(value)];\n}\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) && (isArray || isObject(data))) {\n    copy = isArray ? [] : {};\n\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\n\nvar moveArrayAt = (data, from, to) => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n\n  data.splice(to, 0, data.splice(from, 1)[0]);\n  return data;\n};\n\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj) {\n  for (const key in obj) {\n    if (!isUndefined(obj[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && isEmptyArray(objectRef))) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\n\n\nfunction useFieldArray(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = react__WEBPACK_IMPORTED_MODULE_0__.useState(control._getFieldArray(name));\n  const ids = react__WEBPACK_IMPORTED_MODULE_0__.useRef(control._getFieldArray(name).map(generateId));\n\n  const _fieldIds = react__WEBPACK_IMPORTED_MODULE_0__.useRef(fields);\n\n  const _name = react__WEBPACK_IMPORTED_MODULE_0__.useRef(name);\n\n  const _actioned = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n\n  control._names.array.add(name);\n\n  props.rules && control.register(name, props.rules);\n  const callback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(({\n    values,\n    name: fieldArrayName\n  }) => {\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n  useSubscribe({\n    callback,\n    subject: control._subjects.array\n  });\n  const updateValues = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(updatedFieldArrayValues => {\n    _actioned.current = true;\n\n    control._updateFieldArray(name, updatedFieldArrayValues);\n  }, [control, name]);\n\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n    ids.current = append(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, append, {\n      argA: fillEmptyArray(value)\n    });\n  };\n\n  const prepend$1 = (value, options) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prepend(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n      argA: fillEmptyArray(value)\n    });\n  };\n\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index\n    });\n  };\n\n  const insert$1 = (index, value, options) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insert(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    });\n  };\n\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, false);\n  };\n\n  const move = (from, to) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, false);\n  };\n\n  const update = (index, value) => {\n    const updateValue = cloneObject(value);\n    const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n    ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n      argA: index,\n      argB: updateValue\n    }, true, false);\n  };\n\n  const replace = value => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n\n    control._updateFieldArray(name, [...updatedFieldArrayValues], data => data, {}, true, false);\n  };\n\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    control._stateFlags.action = false;\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      if (control._options.resolver) {\n        control._executeSchema([name]).then(result => {\n          const error = get(result.errors, name);\n          const existingError = get(control._formState.errors, name);\n\n          if (existingError ? !error && existingError.type : error && error.type) {\n            error ? set(control._formState.errors, name, error) : unset(control._formState.errors, name);\n\n            control._subjects.state.next({\n              errors: control._formState.errors\n            });\n          }\n        });\n      } else {\n        const field = get(control._fields, name);\n        const validationModeBeforeSubmit = getValidationModes(control._options.mode);\n\n        if ((!validationModeBeforeSubmit.isOnSubmit || control._formState.isSubmitted) && field && field._f) {\n          validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then(error => !isEmptyObject(error) && control._subjects.state.next({\n            errors: updateFieldArrayRootError(control._formState.errors, error, name)\n          }));\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) && control.unregister(name);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(swap, [updateValues, name, control]),\n    move: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(move, [updateValues, name, control]),\n    prepend: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(prepend$1, [updateValues, name, control]),\n    append: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(append$1, [updateValues, name, control]),\n    remove: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(remove, [updateValues, name, control]),\n    insert: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(insert$1, [updateValues, name, control]),\n    update: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(update, [updateValues, name, control]),\n    replace: react__WEBPACK_IMPORTED_MODULE_0__.useCallback(replace, [updateValues, name, control]),\n    fields: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => fields.map((field, index) => ({ ...field,\n      [keyName]: ids.current[index] || generateId()\n    })), [fields, keyName])\n  };\n}\n\nfunction createSubject() {\n  let _observers = [];\n\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = observer => {\n    _observers.push(observer);\n\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter(o => o !== observer);\n      }\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar isHTMLElement = value => {\n  const owner = value ? value.ownerDocument : 0;\n  const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\n  return value instanceof ElementClass;\n};\n\nvar isMultipleSelect = element => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = ref => isHTMLElement(ref) && ref.isConnected;\n\nfunction markFieldsDirty(data, fields = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : { ...markFieldsDirty(data[key])\n          };\n        } else {\n          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, {\n  valueAsNumber,\n  valueAsDate,\n  setValueAs\n}) => isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : value ? +value : value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;\n\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({\n      value\n    }) => value);\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\n\nvar getRuleValue = rule => isUndefined(rule) ? undefined : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;\n\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name\n  };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\n\nfunction createFormControl(props = {}) {\n  let _options = { ...defaultOptions,\n    ...props\n  };\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n\n  let _defaultValues = cloneObject(_options.defaultValues) || {};\n\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce = callback => wait => {\n    clearTimeout(timer);\n    timer = window.setTimeout(callback, wait);\n  };\n\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuiltInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n    if (args && method) {\n      _stateFlags.action = true;\n\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (_proxyFormState.errors && shouldUpdateFieldsAndState && Array.isArray(get(_formState.errors, name))) {\n        const errors = method(get(_formState.errors, name), args.argA, args.argB);\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get(_formState.touchedFields, name))) {\n        const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name, error) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n\n  const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n    const field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n\n    if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {\n      const updatedFormState = { ...fieldState,\n        ...(shouldUpdateValid ? {\n          isValid\n        } : {}),\n        errors: _formState.errors,\n        name\n      };\n      _formState = { ..._formState,\n        ...updatedFormState\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !Object.values(validateFields).some(v => v)) {\n      _subjects.state.next({\n        isValidating: false\n      });\n\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async name => _options.resolver ? await _options.resolver({ ..._formValues\n  }, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n    valid: true\n  }) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const {\n          _f,\n          ...fieldValue\n        } = field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n\n          const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid && (get(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));\n        }\n\n        fieldValue && (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = { ...(_stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n        [names]: defaultValue\n      } : defaultValue)\n    };\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = name => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n\n  const setFieldValue = (name, value, options = {}) => {\n    const field = get(_fields, name);\n    let fieldValue = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n    options.shouldValidate && trigger(name);\n  };\n\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue = (name, value, options = {}) => {\n    const field = get(_fields, name);\n\n    const isFieldArray = _names.array.has(name);\n\n    const cloneValue = cloneObject(value);\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n\n    _subjects.watch.next({\n      name\n    });\n  };\n\n  const onChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const watched = isWatched(name, _names, isBlurEvent);\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next({\n          name,\n          ...(watched ? {} : fieldState)\n        });\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true\n      });\n\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n\n    _subjects.state.next({\n      isValidating: true\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuiltInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({ ...(!isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n        name\n      }),\n      ...(_options.resolver ? {\n        isValid\n      } : {}),\n      errors: _formState.errors,\n      isValidating: false\n    });\n\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n\n  const getValues = fieldNames => {\n    const values = { ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {})\n    };\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n\n  const getFieldState = (name, formState) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name)\n  });\n\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n\n    _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, { ...error,\n      ref\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n\n  const unregister = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({ ..._formState,\n      ...(!options.keepDirty ? {} : {\n        isDirty: _getDirty()\n      })\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n    set(_fields, name, { ...(field || {}),\n      _f: { ...(field && field._f ? field._f : {\n          ref: {\n            name\n          }\n        }),\n        name,\n        mount: true,\n        ...options\n      }\n    });\n\n    _names.mount.add(name);\n\n    field ? disabledIsDefined && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true, options.value);\n    return { ...(disabledIsDefined ? {\n        disabled: options.disabled\n      } : {}),\n      ...(_options.shouldUseNativeValidation ? {\n        required: !!options.required,\n        min: getRuleValue(options.min),\n        max: getRuleValue(options.max),\n        minLength: getRuleValue(options.minLength),\n        maxLength: getRuleValue(options.maxLength),\n        pattern: getRuleValue(options.pattern)\n      } : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (radioOrCheckbox ? refs.find(option => option === fieldRef) : fieldRef === field._f.ref) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: { ...field._f,\n              ...(radioOrCheckbox ? {\n                refs: [...refs.filter(live), fieldRef, ...(!!Array.isArray(get(_defaultValues, name)) ? [{}] : [])],\n                ref: {\n                  type: fieldRef.type,\n                  name\n                }\n              } : {\n                ref: fieldRef\n              })\n            }\n          });\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    };\n  };\n\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n\n    let hasNoPromiseError = true;\n    let fieldValues = cloneObject(_formValues);\n\n    _subjects.state.next({\n      isSubmitting: true\n    });\n\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n\n        await onValid(fieldValues, e);\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors\n          }, e);\n        }\n\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n\n  const resetField = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState\n      });\n    }\n  };\n\n  const _reset = (formValues, keepStateOptions = {}) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = formValues && !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName) ? set(values, fieldName, get(_formValues, fieldName)) : setValue(fieldName, get(values, fieldName));\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n              try {\n                if (isHTMLElement(fieldReference)) {\n                  fieldReference.closest('form').reset();\n                  break;\n                }\n              } catch (_a) {}\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n\n      _subjects.array.next({\n        values\n      });\n\n      _subjects.watch.next({\n        values\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual(formValues, _defaultValues)),\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  };\n\n  const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues) ? formValues(_formValues) : formValues, keepStateOptions);\n\n  const setFocus = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;\n      fieldRef.focus();\n      options.shouldSelect && fieldRef.select();\n    }\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n\n      get _fields() {\n        return _fields;\n      },\n\n      get _formValues() {\n        return _formValues;\n      },\n\n      get _stateFlags() {\n        return _stateFlags;\n      },\n\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n\n      get _defaultValues() {\n        return _defaultValues;\n      },\n\n      get _names() {\n        return _names;\n      },\n\n      set _names(value) {\n        _names = value;\n      },\n\n      get _formState() {\n        return _formState;\n      },\n\n      set _formState(value) {\n        _formState = value;\n      },\n\n      get _options() {\n        return _options;\n      },\n\n      set _options(value) {\n        _options = { ..._options,\n          ...value\n        };\n      }\n\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState\n  };\n}\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\n\n\nfunction useForm(props = {}) {\n  const _formControl = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n\n  const [formState, updateFormState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = { ...createFormControl(props),\n      formState\n    };\n  }\n\n  const control = _formControl.current.control;\n  const callback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(value => {\n    if (shouldRenderFormState(value, control._proxyFormState, true)) {\n      control._formState = { ...control._formState,\n        ...value\n      };\n      updateFormState({ ...control._formState\n      });\n    }\n  }, [control]);\n  useSubscribe({\n    subject: control._subjects.state,\n    callback\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-hook-form/dist/index.esm.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=C%3A%5CUsers%5Cmk448%5CDv_study%5Cfdbs_proto%5CfdbsVer1.0%5Cpages%5Cfictions%5Ccreate.tsx&page=%2Ffictions%2Fcreate!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);