[{"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\auth\\[...nextauth].js":"1","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\client.ts":"2","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\comments.ts":"3","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\index.ts":"4","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\comment.ts":"5","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\fav.ts":"6","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\index.ts":"7","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\userRate.ts":"8","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\files.ts":"9","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\keyword\\[search].ts":"10","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\title\\[search].ts":"11","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\confirm.tsx":"12","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\enter.tsx":"13","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\favs.ts":"14","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\index.tsx":"15","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\index.tsx":"16","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\name\\[slug]\\index.tsx":"17","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\[page].tsx":"18","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\enter.tsx":"19","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\create.tsx":"20","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\index.tsx":"21","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[...params].tsx":"22","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\edit.tsx":"23","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\index.tsx":"24","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\index.tsx":"25","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\edit.tsx":"26","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\index.tsx":"27","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\ranking\\index.tsx":"28","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\index.tsx":"29","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\index.tsx":"30","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\[page].tsx":"31","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\title\\[search].tsx":"32","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\tailwind.tsx":"33","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\_app.tsx":"34","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\button.tsx":"35","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\carousel.tsx":"36","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionList.tsx":"37","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionRadarChart.tsx":"38","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\footer.tsx":"39","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\gnb.tsx":"40","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\input.tsx":"41","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\mdEditor.tsx":"42","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\search.tsx":"43","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\textarea.tsx":"44","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\top.tsx":"45","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\userStat.tsx":"46"},{"size":899,"mtime":1664781237096,"results":"47","hashOfConfig":"48"},{"size":84,"mtime":1664704286063,"results":"49","hashOfConfig":"48"},{"size":1322,"mtime":1664704286065,"results":"50","hashOfConfig":"48"},{"size":8500,"mtime":1664867843326,"results":"51","hashOfConfig":"48"},{"size":1081,"mtime":1664973802704,"results":"52","hashOfConfig":"48"},{"size":1503,"mtime":1664876989389,"results":"53","hashOfConfig":"48"},{"size":7760,"mtime":1664985144086,"results":"54","hashOfConfig":"48"},{"size":9659,"mtime":1664704286072,"results":"55","hashOfConfig":"48"},{"size":862,"mtime":1664704286075,"results":"56","hashOfConfig":"48"},{"size":1687,"mtime":1664704286077,"results":"57","hashOfConfig":"48"},{"size":1416,"mtime":1664704286080,"results":"58","hashOfConfig":"48"},{"size":806,"mtime":1664704286083,"results":"59","hashOfConfig":"48"},{"size":1742,"mtime":1664704286084,"results":"60","hashOfConfig":"48"},{"size":750,"mtime":1664704286086,"results":"61","hashOfConfig":"48"},{"size":870,"mtime":1664704286088,"results":"62","hashOfConfig":"48"},{"size":2005,"mtime":1665033545150,"results":"63","hashOfConfig":"48"},{"size":3018,"mtime":1664779057511,"results":"64","hashOfConfig":"48"},{"size":2007,"mtime":1664805801551,"results":"65","hashOfConfig":"48"},{"size":6784,"mtime":1664858825634,"results":"66","hashOfConfig":"48"},{"size":22018,"mtime":1664866647112,"results":"67","hashOfConfig":"48"},{"size":14838,"mtime":1664876165701,"results":"68","hashOfConfig":"48"},{"size":14067,"mtime":1664876243578,"results":"69","hashOfConfig":"48"},{"size":26142,"mtime":1664984726695,"results":"70","hashOfConfig":"48"},{"size":23496,"mtime":1664990536973,"results":"71","hashOfConfig":"48"},{"size":2035,"mtime":1664779172272,"results":"72","hashOfConfig":"48"},{"size":262,"mtime":1664779131485,"results":"73","hashOfConfig":"48"},{"size":2797,"mtime":1664779130051,"results":"74","hashOfConfig":"48"},{"size":266,"mtime":1664860921561,"results":"75","hashOfConfig":"48"},{"size":1346,"mtime":1664779151639,"results":"76","hashOfConfig":"48"},{"size":2814,"mtime":1664862575049,"results":"77","hashOfConfig":"48"},{"size":2868,"mtime":1665033210534,"results":"78","hashOfConfig":"48"},{"size":878,"mtime":1664806696941,"results":"79","hashOfConfig":"48"},{"size":4299,"mtime":1664847738184,"results":"80","hashOfConfig":"48"},{"size":1111,"mtime":1665027758270,"results":"81","hashOfConfig":"48"},{"size":634,"mtime":1664704236637,"results":"82","hashOfConfig":"48"},{"size":6291,"mtime":1665033057860,"results":"83","hashOfConfig":"48"},{"size":21228,"mtime":1664862477766,"results":"84","hashOfConfig":"48"},{"size":3641,"mtime":1664984346459,"results":"85","hashOfConfig":"48"},{"size":265,"mtime":1664704236628,"results":"86","hashOfConfig":"48"},{"size":3023,"mtime":1665032998177,"results":"87","hashOfConfig":"48"},{"size":6647,"mtime":1664771982757,"results":"88","hashOfConfig":"48"},{"size":607,"mtime":1664777272685,"results":"89","hashOfConfig":"48"},{"size":1672,"mtime":1664774751373,"results":"90","hashOfConfig":"48"},{"size":750,"mtime":1664704236641,"results":"91","hashOfConfig":"48"},{"size":93,"mtime":1664778231793,"results":"92","hashOfConfig":"48"},{"size":8145,"mtime":1664771054766,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c2tlp9",{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\auth\\[...nextauth].js",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\client.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\comments.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\index.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\comment.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\fav.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\index.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\userRate.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\files.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\keyword\\[search].ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\title\\[search].ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\confirm.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\enter.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\favs.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\index.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\index.tsx",["192"],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\name\\[slug]\\index.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\[page].tsx",["193"],"import type {\r\n  GetStaticPaths,\r\n  GetStaticProps,\r\n  GetStaticPropsContext,\r\n  NextPage,\r\n} from \"next\";\r\nimport client from \"@libs/server/client\";\r\nimport { Fiction, Author } from \"@prisma/client\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { authorPageAtom } from \"../../atoms\";\r\nimport { useRouter } from \"next/router\";\r\n\r\n// interface AuthorWithFictions extends Author {\r\n//   fictions: Fiction[];\r\n// }\r\n\r\ninterface AuthorResponse {\r\n  authors: Author[];\r\n  authorsCount: number;\r\n}\r\n\r\ntype Props = {\r\n  authors: Author[];\r\n};\r\n\r\n// interface Params extends ParsedUrlQuery {\r\n//   page: string;\r\n// }\r\n\r\ninterface IParams extends ParsedUrlQuery {\r\n  page: string;\r\n}\r\n\r\nconst AuthorPage: NextPage<AuthorResponse> = ({ authors, authorsCount }) => {\r\n  const [pageIndex, setPageIndex] = useRecoilState(authorPageAtom);\r\n  let router = useRouter();\r\n\r\n  useEffect(() => {\r\n    router.push(`/authors/${pageIndex}`);\r\n  }, [pageIndex]);\r\n\r\n  return (\r\n    <div className=\" mt-12\">\r\n      <FictionList\r\n        data={authors}\r\n        type={\"authors_list\"}\r\n        authorsCount={authorsCount}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport const getStaticProps: GetStaticProps = async (\r\n  ctx: GetStaticPropsContext\r\n) => {\r\n  const { page } = ctx.params as IParams;\r\n  if (!page) {\r\n    return {\r\n      props: {},\r\n    };\r\n  }\r\n\r\n  const authors = await client.author.findMany({\r\n    take: 18,\r\n    skip: (+page - 1) * 18,\r\n    include: {\r\n      fictions: true,\r\n    },\r\n  });\r\n\r\n  const authorsCount = await client.author.count({});\r\n\r\n  return {\r\n    props: {\r\n      authors: JSON.parse(JSON.stringify(authors)),\r\n      authorsCount: JSON.parse(JSON.stringify(authorsCount)),\r\n    },\r\n  };\r\n};\r\n\r\nexport default AuthorPage;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\enter.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\create.tsx",["194"],"import Button from \"@components/button\";\r\nimport FictionRadarChart from \"@components/fictionRadarChart\";\r\nimport Input from \"@components/input\";\r\nimport Textarea from \"@components/textarea\";\r\nimport useMutation from \"@libs/client/useMutation\";\r\nimport { Fiction } from \"@prisma/client\";\r\nimport type { NextPage } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { FieldErrors, useForm } from \"react-hook-form\";\r\nimport Image from \"next/image\";\r\nimport dynamic from \"next/dynamic\";\r\nimport \"@uiw/react-md-editor/markdown-editor.css\";\r\nimport \"@uiw/react-markdown-preview/markdown.css\";\r\n\r\ninterface CreateFictionForm {\r\n  title: string;\r\n  author: string;\r\n  nationality: string;\r\n  genre: string[];\r\n  date: Date[];\r\n  status: number[];\r\n  synopsis: string;\r\n  characters: string;\r\n  currentState: string;\r\n  keywords: string[];\r\n  mcKeywords: string[];\r\n  subKeywords: string[];\r\n  consKeywords: string[];\r\n  original: string;\r\n  platforms: string[];\r\n  thumb?: FileList;\r\n  volume?: number;\r\n  isTranslated?: string;\r\n  relatedTitle?: string;\r\n  relatedAuthor?: string;\r\n  type?: string;\r\n  mediaMix?: string;\r\n  setup?: string;\r\n}\r\n\r\ninterface CreateFictionMutation {\r\n  ok: boolean;\r\n  fiction: Fiction;\r\n}\r\n\r\nconst MDEditor = dynamic(() => import(\"@uiw/react-md-editor\"), {\r\n  ssr: false,\r\n});\r\n\r\nconst Create: NextPage = (props) => {\r\n  const [md, setMd] = useState<string | undefined>(\"# Hello World\");\r\n\r\n  // const handleChange = useCallback((md) => {\r\n  //   setMd(md);\r\n  // }, []);\r\n\r\n  const handleChange = (md: any) => {\r\n    setMd(md);\r\n  };\r\n  ///////////\r\n  // console.log(\"redered\");\r\n  const router = useRouter();\r\n  const [createFiction, { loading, data, error }] =\r\n    useMutation<CreateFictionMutation>(\"/api/fictions\");\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    resetField,\r\n    watch,\r\n    formState: { errors },\r\n    setValue,\r\n  } = useForm<CreateFictionForm>({ mode: \"onBlur\" });\r\n\r\n  const onValid = async (data: CreateFictionForm) => {\r\n    // if (data) console.log(data);\r\n    if (loading) return;\r\n    if (data.thumb && data.thumb.length > 0) {\r\n      const { uploadURL } = await (await fetch(`/api/files`)).json();\r\n      const form = new FormData();\r\n      form.append(\"file\", data.thumb[0], data.title);\r\n      const {\r\n        result: { id },\r\n      } = await (await fetch(uploadURL, { method: \"POST\", body: form })).json();\r\n      createFiction({ ...data, thumbId: id, setup: md }, \"POST\");\r\n    } else {\r\n      createFiction({ ...data, setup: md }, \"POST\");\r\n    }\r\n    return;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data?.ok) {\r\n      router.push(`/fictions/${data.fiction.id}`);\r\n    }\r\n  }, [data, router]);\r\n  const [thumbPreview, setThumbPreview] = useState(\"\");\r\n  const thumb = watch(\"thumb\");\r\n\r\n  useEffect(() => {\r\n    if (thumb && thumb.length > 0) {\r\n      const file = thumb[0];\r\n      setThumbPreview(URL.createObjectURL(file));\r\n    }\r\n  }, [thumb]);\r\n\r\n  const onInvalid = (erros: FieldErrors) => {\r\n    if (loading) return;\r\n  };\r\n\r\n  /// watch state (react-hook-form)\r\n  let wKeywords: string[] = watch().keywords;\r\n  let wKeywords2: string[] = watch().mcKeywords;\r\n  let wKeywords3: string[] = watch().subKeywords;\r\n  let wKeywords4: string[] = watch().consKeywords;\r\n  let wStatus: number[] = watch().status;\r\n  // console.log(watch());\r\n\r\n  const onKeyDown: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords.slice(1).includes(wKeywords[0].trim())) {\r\n        wKeywords[0] = wKeywords[0].trim();\r\n        wKeywords.filter((item) => item !== \" \");\r\n        setValue(\"keywords\", [wKeywords[0], ...wKeywords]);\r\n      }\r\n      // console.log(wKeywords);\r\n      resetField(\"keywords.0\");\r\n    }\r\n  };\r\n  const onKeyDown2: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords2[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords2.slice(1).includes(wKeywords2[0].trim())) {\r\n        wKeywords2[0] = wKeywords2[0].trim();\r\n        wKeywords2.filter((item) => item !== \" \");\r\n        setValue(\"mcKeywords\", [wKeywords2[0], ...wKeywords2]);\r\n      }\r\n      // console.log(wKeywords2);\r\n      resetField(\"mcKeywords.0\");\r\n    }\r\n  };\r\n  const onKeyDown3: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords3[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords3.slice(1).includes(wKeywords3[0].trim())) {\r\n        wKeywords3[0] = wKeywords3[0].trim();\r\n        wKeywords3.filter((item) => item !== \" \");\r\n        setValue(\"subKeywords\", [wKeywords3[0], ...wKeywords3]);\r\n      }\r\n      // console.log(wKeywords3);\r\n      resetField(\"subKeywords.0\");\r\n    }\r\n  };\r\n  const onKeyDown4: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords4[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords4.slice(1).includes(wKeywords4[0].trim())) {\r\n        wKeywords4[0] = wKeywords4[0].trim();\r\n        wKeywords4.filter((item) => item !== \" \");\r\n        setValue(\"consKeywords\", [wKeywords4[0], ...wKeywords4]);\r\n      }\r\n      // console.log(wKeywords4);\r\n      resetField(\"consKeywords.0\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <form className=\" w-[90vw]\" onSubmit={handleSubmit(onValid, onInvalid)}>\r\n          <div className=\" max-w-[1500px]\">\r\n            <div className=\" grid grid-cols-1 sm:grid-cols-5 \">\r\n              <div className=\" bg-white col-span-2 mx-5 mt-7 h-fit border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                <div className=\" min-h-[330px] w-full\">\r\n                  {thumbPreview ? (\r\n                    <label className=\" relative pb-100 w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <Image\r\n                        className=\" object-cover\"\r\n                        src={thumbPreview || \"/\"}\r\n                        layout=\"fill\"\r\n                      />\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  ) : (\r\n                    <label className=\"w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <svg\r\n                        className=\"h-12 w-12\"\r\n                        stroke=\"currentColor\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 48 48\"\r\n                        aria-hidden=\"true\"\r\n                      >\r\n                        <path\r\n                          d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                          strokeWidth={2}\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                        />\r\n                      </svg>\r\n\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  )}\r\n                </div>\r\n                <div className=\" px-4 py-3\">\r\n                  <Input\r\n                    register={register(\"title\", { required: true })}\r\n                    required\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedTitle\", { required: true })}\r\n                    required\r\n                    label=\"RelatedTitle\"\r\n                    name=\"relatedTitle\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"author\", { required: true })}\r\n                    required\r\n                    label=\"Author\"\r\n                    name=\"author\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedAuthor\", { required: true })}\r\n                    required\r\n                    label=\"RelatedAuthor\"\r\n                    name=\"relatedAuthor\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"type\", { required: true })}\r\n                    required\r\n                    label=\"Type\"\r\n                    name=\"type\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"nationality\", { required: true })}\r\n                    required\r\n                    label=\"Nationality\"\r\n                    name=\"nationality\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"genre\")}\r\n                    required\r\n                    label=\"Genre\"\r\n                    name=\"genre\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <div className=\" flex relative items-center justify-between\">\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.0\")}\r\n                        required\r\n                        label=\"StartDate\"\r\n                        name=\"startDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.1\")}\r\n                        required\r\n                        label=\"EndDate\"\r\n                        name=\"endDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <Input\r\n                    register={register(\"original\", { required: true })}\r\n                    required\r\n                    label=\"Original\"\r\n                    name=\"original\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"platforms.0\")}\r\n                    required\r\n                    label=\"Platforms\"\r\n                    name=\"platforms\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"currentState\")}\r\n                    required\r\n                    label=\"CurrentState\"\r\n                    name=\"currentState\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"volume\", { required: true })}\r\n                    required\r\n                    label=\"Volume\"\r\n                    name=\"volume\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"mediaMix\", { required: false })}\r\n                    required\r\n                    label=\"MediaMix\"\r\n                    name=\"mediaMix\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"isTranslated\", { required: false })}\r\n                    required\r\n                    label=\"IsTranslated\"\r\n                    name=\"isTranslated\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\" col-span-3 mx-5 mt-7\">\r\n                <div className=\" grid  sm:grid-cols-1\">\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"keywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords = wKeywords.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"keywords\", wKeywords);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Mc Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"mcKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown2}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords2\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords2 = wKeywords2.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"keywords\", wKeywords2);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Sub Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"subKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown3}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords3\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords3 = wKeywords3.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"subKeywords\", wKeywords3);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Cons Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"consKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown4}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords4\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords4 = wKeywords4.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"consKeywords\", wKeywords4);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" h-max bg-white mb-10 w-full border-[0.5px] border-[#BBBBBB] rounded-md overflow-x-auto\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">graphs and charts</h2>\r\n                    <FictionRadarChart props={wStatus} />\r\n                    <div className=\" grid grid-cols-2 mx-2\">\r\n                      <Input\r\n                        register={register(\"status.0\", {\r\n                          max: 5,\r\n                          min: 0,\r\n                        })}\r\n                        required\r\n                        label=\"오리지널리티\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.1\")}\r\n                        required\r\n                        label=\"필력\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.2\")}\r\n                        required\r\n                        label=\"캐릭터성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.3\")}\r\n                        required\r\n                        label=\"핍진성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.4\")}\r\n                        required\r\n                        label=\"스토리\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.5\")}\r\n                        required\r\n                        label=\"작품성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* <div className=\" h-fit w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md\">\r\n                  <h2 className=\" font-bold pt-1 px-2\"> Comments</h2>\r\n                  <ul></ul>\r\n                </div> */}\r\n              </div>\r\n            </div>\r\n            <div className=\" mx-5 my-7 bg-white px-3 py-3 border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n              <Textarea\r\n                register={register(\"synopsis\")}\r\n                name=\"synopsis\"\r\n                label=\"Synopsis\"\r\n                required\r\n              />\r\n              <Textarea\r\n                register={register(\"characters\")}\r\n                name=\"characters\"\r\n                label=\"Characters\"\r\n                required\r\n              />\r\n              {/* <Textarea\r\n                register={register(\"setup\", { required: false })}\r\n                name=\"setup\"\r\n                label=\"Setup\"\r\n                required\r\n              /> */}\r\n              <div>\r\n                {/* <MdEditor /> */}\r\n                <MDEditor value={md} onChange={handleChange} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Button text={loading ? \"Loading...\" : \"저장\"} />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\index.tsx",["195"],"import {\r\n  Fiction,\r\n  Keyword,\r\n  FictionStat,\r\n  KeywordsOnFictions,\r\n  UserFictionStat,\r\n  Author,\r\n} from \"@prisma/client\";\r\nimport type { NextPage } from \"next\";\r\nimport useSWR from \"swr\";\r\nimport client from \"@libs/server/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom } from \"../../atoms\";\r\n\r\ninterface UserFictionStatWithMore extends UserFictionStat {\r\n  _count: {\r\n    users: number;\r\n  };\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: [FictionStat];\r\n  userFictionStat: UserFictionStatWithMore;\r\n  author: Author;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionsResponse {\r\n  ok: boolean;\r\n  fictions: FictionWithMore[];\r\n  fictionsCount: number;\r\n  keywords: Keyword[];\r\n  categories: string[];\r\n  nationalities: string[];\r\n}\r\n\r\nconst Fictions: NextPage<FictionsResponse> = ({\r\n  keywords,\r\n  categories,\r\n  nationalities,\r\n}) => {\r\n  const [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n  let router = useRouter();\r\n  // console.log(router.query?.keywords);\r\n\r\n  let queryString = `/api/fictions?${\r\n    \"keywords=\" + (router.query?.keywords?.toString().split(\",\") || \"\")\r\n  }${\r\n    \"&nationalities=\" +\r\n    (router.query?.nationalities?.toString().split(\",\") || \"\")\r\n  }${\"&genres=\" + (router.query?.genres?.toString().split(\",\") || \"\")}${\r\n    \"&sorting=\" + (router.query?.sorting || \"\")\r\n  }${\"&page=\" + pageIndex}`;\r\n  // console.log(queryString);\r\n\r\n  let { data, error } = useSWR<FictionsResponse>(queryString);\r\n\r\n  // pageIndex 변경될때마다 router.push\r\n  useEffect(() => {\r\n    if (router.query.params) {\r\n      queryString = `/api/fictions?${\r\n        \"keywords=\" + (router?.query?.params[4]?.toString().split(\",\") || \"\")\r\n      }${\r\n        \"&nationalities=\" +\r\n        (router?.query?.params[0]?.toString().split(\",\") || \"\")\r\n      }${\"&genres=\" + (router?.query?.params[1]?.toString().split(\",\") || \"\")}${\r\n        \"&sorting=\" + (router?.query?.params[2] || \"\")\r\n      }${\"&page=\" + pageIndex}`;\r\n    }\r\n    // console.log(queryString);\r\n    // console.log(data);\r\n    // const genresMany = { genres: Array.from(checkedGenres).join(\",\") } || {};\r\n\r\n    // console.log(genresMany);\r\n\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${\r\n        Array.from(checkedSortings || \"총점\").join(\",\") || \"all\"\r\n      }/${pageIndex}/${Array.from(checkedItems).join(\",\") || \"all\"}`\r\n    );\r\n  }, [pageIndex]);\r\n\r\n  //세부 필터링\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [checkedItems, setCheckedItems] = useState(new Set());\r\n  const [checkedGenres, setCheckedGenres] = useState(new Set());\r\n  const [checkedNationalities, setCheckedNationalities] = useState(new Set());\r\n  const [checkedSortings, setCheckedSortings] = useState(new Set());\r\n  const sortingList = [\r\n    \"총점\",\r\n    \"캐릭터성\",\r\n    \"오리지널리티\",\r\n    \"스토리\",\r\n    \"작품성\",\r\n    \"핍진성\",\r\n    \"필력\",\r\n    \"화수\",\r\n  ];\r\n\r\n  const checkHandler = ({\r\n    currentTarget,\r\n  }: React.MouseEvent<HTMLInputElement>) => {\r\n    setIsChecked(!isChecked);\r\n\r\n    checkedItemHandler(\r\n      currentTarget.parentNode,\r\n      currentTarget.value,\r\n      currentTarget.checked,\r\n      currentTarget.id,\r\n      currentTarget\r\n    );\r\n  };\r\n\r\n  const checkedItemHandler = (\r\n    box: any,\r\n    name: any,\r\n    isChecked: any,\r\n    id: any,\r\n    target: any\r\n  ) => {\r\n    // console.log(name);\r\n    // console.log(checkedItems);\r\n    // 키워드\r\n    if (isChecked && id === \"keyword\") {\r\n      checkedItems.add(name);\r\n      setCheckedItems(checkedItems);\r\n      // box.style.backgroundColor = \"blue\";\r\n      // box.style.color = \"white\";\r\n    } else if (!isChecked && checkedItems.has(name) && id === \"keyword\") {\r\n      checkedItems.delete(name);\r\n      setCheckedItems(checkedItems);\r\n    }\r\n    // 국가\r\n    if (isChecked && id === \"nationality\") {\r\n      checkedNationalities.add(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    } else if (\r\n      !isChecked &&\r\n      checkedNationalities.has(name) &&\r\n      id === \"nationality\"\r\n    ) {\r\n      checkedNationalities.delete(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    }\r\n    // 장르\r\n    if (isChecked && id === \"genre\") {\r\n      checkedGenres.add(name);\r\n      setCheckedGenres(checkedGenres);\r\n    } else if (!isChecked && checkedGenres.has(name) && id === \"genre\") {\r\n      checkedGenres.delete(name);\r\n      setCheckedGenres(checkedGenres);\r\n    }\r\n    // 정렬\r\n    if (isChecked && id === \"sorting\") {\r\n      checkedSortings.clear();\r\n      checkedSortings.add(name);\r\n      setCheckedSortings(checkedSortings);\r\n      // console.log(name);\r\n    } else if (!isChecked && checkedSortings.has(name) && id === \"sorting\") {\r\n      checkedSortings.delete(name);\r\n      setCheckedSortings(checkedSortings);\r\n    }\r\n  };\r\n\r\n  const buttonFlag = useRef(true);\r\n  const rerenderList = () => {\r\n    // console.log(buttonFlag.current);\r\n    if (!buttonFlag.current) {\r\n      alert(\"새로고침은 5초마다 한번씩 가능합니다.\");\r\n      return;\r\n    }\r\n    buttonFlag.current = !buttonFlag.current;\r\n    setTimeout(() => {\r\n      buttonFlag.current = !buttonFlag.current;\r\n      // console.log(\"해제완료\");\r\n    }, 5000);\r\n    setPageIndex(1);\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${Array.from(checkedSortings).join(\",\") || \"총점\"}/${pageIndex}/${\r\n        Array.from(checkedItems).join(\",\") || \"all\"\r\n      }`\r\n    );\r\n  };\r\n\r\n  // console.log(nationalities, categories, keywords);\r\n\r\n  return (\r\n    <div className=\" mt-10 max-w-[1300px]\">\r\n      <div className=\" w-full justify-center\">\r\n        <form className=\" \">\r\n          <div className=\"  bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n            <table className=\" leading-7\">\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <th>국가</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {nationalities.map((nationality, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          className=\" hidden peer\"\r\n                          id=\"nationality\"\r\n                          value={nationality}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px]\">\r\n                          {nationality}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>장르</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {categories.map((category: any, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          id=\"genre\"\r\n                          className=\" hidden peer\"\r\n                          value={category.name}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {category.name}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                  <th>정렬</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {sortingList.map((sorting, i) => (\r\n                      <label\r\n                        key={i}\r\n                        className=\" bg-white  cursor-pointer flex \"\r\n                      >\r\n                        <input\r\n                          // defaultChecked\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"radio\"\r\n                          className=\" hidden peer\"\r\n                          id=\"sorting\"\r\n                          value={sorting}\r\n                          name=\"sorting\"\r\n                        ></input>\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {sorting}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <details className=\" text-center\">\r\n            <div className=\" mt-5 bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n              <table className=\" leading-7\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <th className=\" min-w-[50px]\">키워드</th>\r\n                    <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                      {keywords\r\n                        .filter((keyword) => keyword?.isOfCons !== true)\r\n                        .map((keyword) => (\r\n                          <label key={keyword?.id} className=\"  flex \">\r\n                            <input\r\n                              onClick={(e) => checkHandler(e)}\r\n                              type=\"checkbox\"\r\n                              id=\"keyword\"\r\n                              className=\" hidden peer\"\r\n                              value={keyword?.name}\r\n                            />\r\n                            <div className=\" cursor-pointer whitespace-nowrap bg-gray-200 text-[#666676] peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 mt-1 text-sm text-center mx-[0.35rem] rounded-3xl border-[#BBBBBB] p-1  \">\r\n                              {/* {\r\n                              \" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-gray-200 text-[#666676] p-1 whitespace-nowrap\"\r\n                            } */}\r\n                              #{keyword?.name}\r\n                            </div>\r\n                          </label>\r\n                        ))}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <summary style={{ listStyle: \"none\" }} className=\" mt-4 w-fit\">\r\n              <span className=\" hover:cursor-pointer hover:bg-gray-200  border-[0.5px] p-1 border-[#BBBBBB] rounded-md flex items-center\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"16\"\r\n                  height=\"16\"\r\n                  fill=\"currentColor\"\r\n                  className=\"bi bi-plus-circle-fill\"\r\n                  viewBox=\"0 0 16 16\"\r\n                >\r\n                  <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />{\" \"}\r\n                </svg>\r\n                &nbsp;\r\n                <span> 키워드 검색</span>\r\n              </span>\r\n            </summary>\r\n          </details>\r\n        </form>\r\n      </div>\r\n      <div className=\" w-full flex justify-center\">\r\n        <button\r\n          onClick={rerenderList}\r\n          className=\" hover:border-gray-400 hover:bg-gray-200 bg-white border-[0.5px] border-[#BBBBBB] rounded-md mt-2 p-1 w-2/3\"\r\n        >\r\n          새로고침\r\n        </button>\r\n      </div>\r\n      <FictionList\r\n        data={data}\r\n        type={\"fictions_list\"}\r\n        count={data?.fictions?.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport async function getStaticProps() {\r\n  // console.log(\"BUILDING fictions index Statically\");\r\n  const fictions = await client.fiction.findMany({\r\n    select: {\r\n      type: true,\r\n      // currentState: true,\r\n      nationality: true,\r\n      // volume: true,\r\n      // createdAt: true,\r\n      keywords: {\r\n        include: {\r\n          keyword: true,\r\n        },\r\n      },\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n      isTranslated: true,\r\n    },\r\n  });\r\n\r\n  const fictionsCount = await client.fiction.count({\r\n    where: {},\r\n  });\r\n\r\n  let keywords = await client.keyword.findMany();\r\n\r\n  let categories = await client.category.findMany();\r\n\r\n  // console.log(keywords.slice(5));\r\n\r\n  // keywords = keywords.filter(\r\n  //   (arr, index, callback) =>\r\n  //     index === callback.findIndex((t) => t.name === arr.name)\r\n  // );\r\n\r\n  // // genre 중복제거 (fiction.genre -> genre)\r\n  // let genres: Array<any> = [];\r\n  // fictions.map((fiction) => genres.push(fiction.genre));\r\n  // genres = [...new Set(genres)].filter((item) => item !== \"\");\r\n\r\n  // nationality 중복제거 (fiction.nationality -> nationality)\r\n  let nationalities: Array<any> = [];\r\n  fictions.map((fiction: any) => nationalities.push(fiction?.nationality));\r\n  nationalities = [...new Set(nationalities)].filter((item) => item !== \"\");\r\n  // console.log(nationalities);\r\n\r\n  // console.log(fictions.slice(0, 2));\r\n\r\n  return {\r\n    props: {\r\n      // fictions: JSON.parse(JSON.stringify(fictions)),\r\n      fictionsCount: JSON.parse(JSON.stringify(fictionsCount)),\r\n      keywords: JSON.parse(JSON.stringify(keywords)),\r\n      nationalities: JSON.parse(JSON.stringify(nationalities)),\r\n      categories: JSON.parse(JSON.stringify(categories)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default Fictions;\r\n\r\n// const fictions = await client.fiction.findMany({\r\n//   include: {\r\n//     _count: {\r\n//       select: {\r\n//         favs: true,\r\n//       },\r\n//     },\r\n//   },\r\n// });\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[...params].tsx",["196"],"import {\r\n  Fiction,\r\n  Keyword,\r\n  FictionStat,\r\n  KeywordsOnFictions,\r\n  UserFictionStat,\r\n  Author,\r\n} from \"@prisma/client\";\r\nimport type { GetStaticPaths, NextPage } from \"next\";\r\nimport useSWR from \"swr\";\r\nimport client from \"@libs/server/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom } from \"../../atoms\";\r\n\r\ninterface UserFictionStatWithMore extends UserFictionStat {\r\n  _count: {\r\n    users: number;\r\n  };\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: [FictionStat];\r\n  userFictionStat: UserFictionStatWithMore;\r\n  author: Author;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionsResponse {\r\n  ok: boolean;\r\n  fictions: FictionWithMore[];\r\n  fictionsCount: number;\r\n  keywords: Keyword[];\r\n  categories: string[];\r\n  nationalities: string[];\r\n}\r\n\r\nconst FictionsWithParams: NextPage<FictionsResponse> = ({\r\n  keywords,\r\n  categories,\r\n  nationalities,\r\n}) => {\r\n  let [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n  let router = useRouter();\r\n  // console.log(router.query);\r\n  let queryString = \"\";\r\n  if (router.query.params) {\r\n    queryString = `/api/fictions?${\r\n      \"keywords=\" + (router?.query?.params[4]?.toString().split(\",\") || \"\")\r\n    }${\r\n      \"&nationalities=\" +\r\n      (router?.query?.params[0]?.toString().split(\",\") || \"\")\r\n    }${\"&genres=\" + (router?.query?.params[1]?.toString().split(\",\") || \"\")}${\r\n      \"&sorting=\" + (router?.query?.params[2] || \"\")\r\n    }${\"&page=\" + pageIndex}`;\r\n  }\r\n\r\n  let { data, error } = useSWR<FictionsResponse>(queryString);\r\n\r\n  // pageIndex 변경될때마다 router.push\r\n  useEffect(() => {\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${\r\n        Array.from(checkedSortings || \"총점\").join(\",\") || \"all\"\r\n      }/${pageIndex}/${Array.from(checkedItems).join(\",\") || \"all\"}`\r\n    );\r\n\r\n    if (router.query.params) {\r\n      queryString = `/api/fictions?${\r\n        \"keywords=\" + (router?.query?.params[4]?.toString().split(\",\") || \"\")\r\n      }${\r\n        \"&nationalities=\" +\r\n        (router?.query?.params[0]?.toString().split(\",\") || \"\")\r\n      }${\"&genres=\" + (router?.query?.params[1]?.toString().split(\",\") || \"\")}${\r\n        \"&sorting=\" + (router?.query?.params[2] || \"\")\r\n      }${\"&page=\" + pageIndex}`;\r\n    }\r\n  }, [pageIndex]);\r\n\r\n  //세부 필터링\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [checkedItems, setCheckedItems] = useState(new Set());\r\n  const [checkedGenres, setCheckedGenres] = useState(new Set());\r\n  const [checkedNationalities, setCheckedNationalities] = useState(new Set());\r\n  const [checkedSortings, setCheckedSortings] = useState(new Set());\r\n  const sortingList = [\r\n    \"총점\",\r\n    \"캐릭터성\",\r\n    \"오리지널리티\",\r\n    \"스토리\",\r\n    \"작품성\",\r\n    \"핍진성\",\r\n    \"필력\",\r\n    \"화수\",\r\n  ];\r\n\r\n  const checkHandler = ({\r\n    currentTarget,\r\n  }: React.MouseEvent<HTMLInputElement>) => {\r\n    setIsChecked(!isChecked);\r\n\r\n    checkedItemHandler(\r\n      currentTarget.parentNode,\r\n      currentTarget.value,\r\n      currentTarget.checked,\r\n      currentTarget.id,\r\n      currentTarget\r\n    );\r\n  };\r\n\r\n  const checkedItemHandler = (\r\n    box: any,\r\n    name: any,\r\n    isChecked: any,\r\n    id: any,\r\n    target: any\r\n  ) => {\r\n    // console.log(name);\r\n    // console.log(checkedItems);\r\n    // 키워드\r\n    if (isChecked && id === \"keyword\") {\r\n      checkedItems.add(name);\r\n      setCheckedItems(checkedItems);\r\n      // box.style.backgroundColor = \"blue\";\r\n      // box.style.color = \"white\";\r\n    } else if (!isChecked && checkedItems.has(name) && id === \"keyword\") {\r\n      checkedItems.delete(name);\r\n      setCheckedItems(checkedItems);\r\n    }\r\n    // 국가\r\n    if (isChecked && id === \"nationality\") {\r\n      checkedNationalities.add(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    } else if (\r\n      !isChecked &&\r\n      checkedNationalities.has(name) &&\r\n      id === \"nationality\"\r\n    ) {\r\n      checkedNationalities.delete(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    }\r\n    // 장르\r\n    if (isChecked && id === \"genre\") {\r\n      checkedGenres.add(name);\r\n      setCheckedGenres(checkedGenres);\r\n    } else if (!isChecked && checkedGenres.has(name) && id === \"genre\") {\r\n      checkedGenres.delete(name);\r\n      setCheckedGenres(checkedGenres);\r\n    }\r\n    // 정렬\r\n    if (isChecked && id === \"sorting\") {\r\n      checkedSortings.clear();\r\n      checkedSortings.add(name);\r\n      setCheckedSortings(checkedSortings);\r\n      // console.log(name);\r\n    } else if (!isChecked && checkedSortings.has(name) && id === \"sorting\") {\r\n      checkedSortings.delete(name);\r\n      setCheckedSortings(checkedSortings);\r\n    }\r\n  };\r\n\r\n  const buttonFlag = useRef(true);\r\n  const rerenderList = () => {\r\n    setPageIndex(1);\r\n\r\n    if (!buttonFlag.current) {\r\n      alert(\"새로고침은 5초마다 한번씩 가능합니다.\");\r\n      return;\r\n    }\r\n    buttonFlag.current = !buttonFlag.current;\r\n    setTimeout(() => {\r\n      buttonFlag.current = !buttonFlag.current;\r\n    }, 5000);\r\n    // setPageIndex(1);\r\n    // router.push({\r\n    //   pathname: \"/fictions\",\r\n    //   query: {\r\n    //     keywords: Array.from(checkedItems).join(\",\"),\r\n    //     nationalities: Array.from(checkedNationalities).join(\",\"),\r\n    //     genres: Array.from(checkedGenres).join(\",\"),\r\n    //     sorting: Array.from(checkedSortings).join(\",\"),\r\n    //     page: pageIndex,\r\n    //   },\r\n    // });\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${\r\n        Array.from(checkedSortings || \"총점\").join(\",\") || \"all\"\r\n      }/${pageIndex}/${Array.from(checkedItems).join(\",\") || \"all\"}`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\" mt-10 max-w-[1300px]\">\r\n      <div className=\" w-full justify-center\">\r\n        <form>\r\n          <div className=\"  bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n            <table className=\" leading-7\">\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <th>국가</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {nationalities.map((nationality, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          className=\" hidden peer\"\r\n                          id=\"nationality\"\r\n                          value={nationality}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px]\">\r\n                          {nationality}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>장르</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {categories.map((category: any, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          id=\"genre\"\r\n                          className=\" hidden peer\"\r\n                          value={category.name}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {category.name}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                  <th>정렬</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {sortingList.map((sorting, i) => (\r\n                      <label\r\n                        key={i}\r\n                        className=\" bg-white  cursor-pointer flex \"\r\n                      >\r\n                        <input\r\n                          // defaultChecked\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"radio\"\r\n                          className=\" hidden peer\"\r\n                          id=\"sorting\"\r\n                          value={sorting}\r\n                          name=\"sorting\"\r\n                        ></input>\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {sorting}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <details className=\" text-center\">\r\n            <div className=\" mt-5 bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n              <table className=\" leading-7\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <th className=\" min-w-[50px]\">키워드</th>\r\n                    <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                      {keywords\r\n                        .filter((keyword) => keyword?.isOfCons !== true)\r\n                        .map((keyword) => (\r\n                          <label key={keyword?.id} className=\"  flex \">\r\n                            <input\r\n                              onClick={(e) => checkHandler(e)}\r\n                              type=\"checkbox\"\r\n                              id=\"keyword\"\r\n                              className=\" hidden peer\"\r\n                              value={keyword?.name}\r\n                            />\r\n                            <div className=\" cursor-pointer whitespace-nowrap bg-gray-200 text-[#666676] peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 mt-1 text-sm text-center mx-[0.35rem] rounded-3xl border-[#BBBBBB] p-1  \">\r\n                              #{keyword?.name}\r\n                            </div>\r\n                          </label>\r\n                        ))}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <summary style={{ listStyle: \"none\" }} className=\" mt-4 w-fit\">\r\n              <span className=\" hover:cursor-pointer hover:bg-gray-200  border-[0.5px] p-1 border-[#BBBBBB] rounded-md flex items-center\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"16\"\r\n                  height=\"16\"\r\n                  fill=\"currentColor\"\r\n                  className=\"bi bi-plus-circle-fill\"\r\n                  viewBox=\"0 0 16 16\"\r\n                >\r\n                  <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />{\" \"}\r\n                </svg>\r\n                &nbsp;\r\n                <span> 키워드 검색</span>\r\n              </span>\r\n            </summary>\r\n          </details>\r\n        </form>\r\n      </div>\r\n      <div className=\" w-full flex justify-center\">\r\n        <button\r\n          onClick={rerenderList}\r\n          className=\" hover:border-gray-400 hover:bg-gray-200 bg-white border-[0.5px] border-[#BBBBBB] rounded-md mt-2 p-1 w-80\"\r\n        >\r\n          새로고침\r\n        </button>\r\n      </div>\r\n      <FictionList\r\n        data={data}\r\n        type={\"fictions_list\"}\r\n        count={data?.fictions?.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport async function getStaticProps() {\r\n  const fictions = await client.fiction.findMany({\r\n    select: {\r\n      keywords: {\r\n        include: {\r\n          keyword: true,\r\n        },\r\n      },\r\n      type: true,\r\n      currentState: true,\r\n      nationality: true,\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n      isTranslated: true,\r\n    },\r\n  });\r\n\r\n  const fictionsCount = await client.fiction.count({\r\n    where: {},\r\n  });\r\n\r\n  let keywords = await client.keyword.findMany();\r\n\r\n  let categories = await client.category.findMany();\r\n\r\n  let nationalities: Array<any> = [];\r\n  fictions.map((fiction: any) => nationalities.push(fiction.nationality));\r\n  nationalities = [...new Set(nationalities)].filter((item) => item !== \"\");\r\n\r\n  return {\r\n    props: {\r\n      // fictions: JSON.parse(JSON.stringify(fictions)),\r\n      fictionsCount: JSON.parse(JSON.stringify(fictionsCount)),\r\n      keywords: JSON.parse(JSON.stringify(keywords)),\r\n      nationalities: JSON.parse(JSON.stringify(nationalities)),\r\n      categories: JSON.parse(JSON.stringify(categories)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default FictionsWithParams;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\edit.tsx",["197","198"],"import Button from \"@components/button\";\r\nimport FictionRadarChart from \"@components/fictionRadarChart\";\r\nimport Input from \"@components/input\";\r\nimport Textarea from \"@components/textarea\";\r\nimport useMutation from \"@libs/client/useMutation\";\r\nimport {\r\n  Author,\r\n  Category,\r\n  Fiction,\r\n  Keyword,\r\n  KeywordsOnFictions,\r\n  UserRationOnFiction,\r\n} from \"@prisma/client\";\r\nimport type { NextPage } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { FieldErrors, useForm } from \"react-hook-form\";\r\nimport Image from \"next/image\";\r\nimport useSWR from \"swr\";\r\nimport dynamic from \"next/dynamic\";\r\nimport \"@uiw/react-md-editor/markdown-editor.css\";\r\nimport \"@uiw/react-markdown-preview/markdown.css\";\r\n\r\nconst MDEditor = dynamic(() => import(\"@uiw/react-md-editor\"), {\r\n  ssr: false,\r\n});\r\n\r\ninterface EditFictionForm {\r\n  title: string;\r\n  author: string;\r\n  nationality: string;\r\n  genre: string;\r\n  date: Date[];\r\n  status: number[];\r\n  synopsis: string;\r\n  characters: string;\r\n  currentState: string;\r\n  keywords: string[];\r\n  mcKeywords: string[];\r\n  subKeywords: string[];\r\n  consKeywords: string[];\r\n  original: string;\r\n  platforms: string[];\r\n  thumb?: FileList;\r\n  volume?: number;\r\n  isTranslated?: string;\r\n  relatedTitle?: string;\r\n  relatedAuthor?: string;\r\n  type?: string;\r\n  mediaMix?: string;\r\n  setup?: string;\r\n}\r\n\r\ninterface EditFictionMutation {\r\n  ok: boolean;\r\n  fiction: Fiction;\r\n}\r\n\r\ninterface FictionDetailResponse {\r\n  ok: boolean;\r\n  prevFiction: FictionWithMore;\r\n  similarFictions: Fiction[];\r\n  isLiked: boolean;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: {\r\n    originality: number;\r\n    writing: number;\r\n    character: number;\r\n    verisimilitude: number;\r\n    synopsisComposition: number;\r\n    value: number;\r\n  };\r\n  userFictionStat: { userRationOnFictions: [UserRationOnFiction] };\r\n  author: Author;\r\n  categories: [Category];\r\n}\r\n\r\nconst EditFiction: NextPage = () => {\r\n  ///setup MdEditor\r\n  const [md, setMd] = useState<string | undefined>(\"\");\r\n  const handleChange = useCallback((md: any) => {\r\n    setMd(md);\r\n  }, []);\r\n\r\n  // const { user, isLoading } = useUser();\r\n  const router = useRouter();\r\n  const { data: fiction } = useSWR<FictionDetailResponse>(\r\n    router.query.id ? `/api/fictions/${router.query.id}` : null\r\n  );\r\n  const [editFiction, { loading, data, error }] =\r\n    useMutation<EditFictionMutation>(`/api/fictions/${router.query.id}`);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    resetField,\r\n    watch,\r\n    formState: { errors },\r\n    setValue,\r\n  } = useForm<EditFictionForm>({ mode: \"onBlur\" });\r\n\r\n  //날짜변환 function\r\n  function formatDate(date: any) {\r\n    let d = new Date(date),\r\n      month = \"\" + (d.getMonth() + 1),\r\n      day = \"\" + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = \"0\" + month;\r\n    if (day.length < 2) day = \"0\" + day;\r\n\r\n    return [year, month, day].join(\"-\");\r\n  }\r\n  // console.log(fiction?.prevFiction);\r\n  console.log(md);\r\n  // console.log(\r\n  //   fiction?.prevFiction?.categories.reduce(\r\n  //     (prev, cur) =>\r\n  //       (prev?.category?.name ?? \"\") + \" \" + (cur?.category?.name ?? \"\"),\r\n  //     \"\"\r\n  //   )\r\n  // );\r\n  useEffect(() => {\r\n    if (fiction) {\r\n      setValue(\"title\", fiction.prevFiction.title);\r\n      setValue(\"relatedTitle\", fiction.prevFiction.relatedTitle || \"\");\r\n      setValue(\"author\", fiction.prevFiction.author?.name || \"\");\r\n      setValue(\"relatedAuthor\", fiction.prevFiction.relatedAuthor || \"\");\r\n      setValue(\"nationality\", fiction.prevFiction.nationality);\r\n      setValue(\"type\", fiction.prevFiction.type || \"\");\r\n      setValue(\r\n        \"genre\",\r\n        fiction?.prevFiction?.categories\r\n          .reduce(\r\n            (prev: any, cur: any) =>\r\n              (prev?.category?.name ?? \"\") + \" \" + (cur?.category?.name ?? \"\"),\r\n            \"\"\r\n          )\r\n          .trim()\r\n      );\r\n      setValue(\"original\", fiction.prevFiction.original);\r\n      setValue(\"platforms\", [fiction.prevFiction.platforms]);\r\n      setValue(\"currentState\", fiction.prevFiction.currentState);\r\n      setValue(\"synopsis\", fiction.prevFiction.synopsis);\r\n      setValue(\"characters\", fiction.prevFiction.characters);\r\n      setValue(\"date.0\", formatDate(fiction.prevFiction.startDate) as any);\r\n      setValue(\"date.1\", formatDate(fiction.prevFiction.endDate) as any);\r\n      setValue(\"currentState\", fiction.prevFiction.currentState);\r\n      setValue(\"status.0\", fiction.prevFiction.fictionStat.originality);\r\n      setValue(\"status.1\", fiction.prevFiction.fictionStat.writing);\r\n      setValue(\"status.2\", fiction.prevFiction.fictionStat.character);\r\n      setValue(\"status.3\", fiction.prevFiction.fictionStat.verisimilitude);\r\n      setValue(\"status.4\", fiction.prevFiction.fictionStat.synopsisComposition);\r\n      setValue(\"status.5\", fiction.prevFiction.fictionStat.value);\r\n      setValue(\"volume\", fiction?.prevFiction.volume || 0);\r\n      setValue(\"mediaMix\", fiction.prevFiction.mediaMix || \"\");\r\n      setValue(\"isTranslated\", fiction.prevFiction.isTranslated || \"\");\r\n      if (md === \"\") {\r\n        setMd(fiction.prevFiction.setup || \"\");\r\n      }\r\n      // console.log(md);\r\n      // setValue(\"setup\", fiction.prevFiction.setup || \"\");\r\n      // Keywords, mcKeywords, subKeywords\r\n      fiction.prevFiction.keywords\r\n        .filter(\r\n          (item) =>\r\n            item.keyword.isOfHeroine === false &&\r\n            item.keyword.isOfMC === false &&\r\n            item.keyword.isOfCons === false\r\n        )\r\n        .map((item, i) => setValue(`keywords.${i}`, item.keyword.name));\r\n      fiction.prevFiction.keywords\r\n        .filter((item) => item.keyword.isOfMC === true)\r\n        .map((item, i) => setValue(`mcKeywords.${i}`, item.keyword.name));\r\n      fiction.prevFiction.keywords\r\n        .filter((item) => item.keyword.isOfHeroine === true)\r\n        .map((item, i) => setValue(`subKeywords.${i}`, item.keyword.name));\r\n      fiction.prevFiction.keywords\r\n        .filter((item) => item.keyword.isOfCons === true)\r\n        .map((item, i) => setValue(`consKeywords.${i}`, item.keyword.name));\r\n      // setValue(\"keywords.0\", \"asd\");\r\n    }\r\n  }, [fiction, setValue]);\r\n  // console.log(fiction);\r\n  // console.log(fiction?.prevFiction.genre);\r\n\r\n  const onValid = async (data: EditFictionForm) => {\r\n    if (loading) return;\r\n    if (data.thumb && data.thumb.length > 0) {\r\n      const { uploadURL } = await (await fetch(`/api/files`)).json();\r\n      const form = new FormData();\r\n      form.append(\"file\", data.thumb[0], data.title);\r\n      const {\r\n        result: { id },\r\n      } = await (await fetch(uploadURL, { method: \"POST\", body: form })).json();\r\n      editFiction({ ...data, thumbId: id, setup: md }, \"PUT\");\r\n    } else {\r\n      editFiction({ ...data, setup: md }, \"PUT\");\r\n    }\r\n    return;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data?.ok) {\r\n      router.push(`/fictions/${data.fiction.id}`);\r\n    }\r\n  }, [data, router]);\r\n  const [thumbPreview, setThumbPreview] = useState(\"\");\r\n  const thumb = watch(\"thumb\");\r\n\r\n  useEffect(() => {\r\n    if (thumb && thumb.length > 0) {\r\n      const file = thumb[0];\r\n      setThumbPreview(URL.createObjectURL(file));\r\n    }\r\n  }, [thumb]);\r\n\r\n  const onInvalid = (erros: FieldErrors) => {\r\n    if (loading) return;\r\n  };\r\n\r\n  /// watch state (react-hook-form)\r\n  let wKeywords: string[] = watch().keywords;\r\n  let wKeywords2: string[] = watch().mcKeywords;\r\n  let wKeywords3: string[] = watch().subKeywords;\r\n  let wKeywords4: string[] = watch().consKeywords;\r\n  let wStatus: number[] = watch().status;\r\n\r\n  const onKeyDown: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n    // console.log(wKeywords);\r\n\r\n    if (key === \",\" && wKeywords[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords.slice(1).includes(wKeywords[0].trim())) {\r\n        wKeywords[0] = wKeywords[0].trim();\r\n        wKeywords.filter((item) => item !== \" \");\r\n        setValue(\"keywords\", [wKeywords[0], ...wKeywords]);\r\n      }\r\n      // console.log(wKeywords);\r\n      resetField(\"keywords.0\");\r\n    }\r\n  };\r\n\r\n  const onKeyDown2: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords2[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords2.slice(1).includes(wKeywords2[0].trim())) {\r\n        wKeywords2[0] = wKeywords2[0].trim();\r\n        wKeywords2.filter((item) => item !== \" \");\r\n        setValue(\"mcKeywords\", [wKeywords2[0], ...wKeywords2]);\r\n      }\r\n      // console.log(wKeywords2);\r\n      resetField(\"mcKeywords.0\");\r\n    }\r\n  };\r\n\r\n  const onKeyDown3: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords3[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords3.slice(1).includes(wKeywords3[0].trim())) {\r\n        wKeywords3[0] = wKeywords3[0].trim();\r\n        wKeywords3.filter((item) => item !== \" \");\r\n        setValue(\"subKeywords\", [wKeywords3[0], ...wKeywords3]);\r\n      }\r\n      // console.log(wKeywords3);\r\n      resetField(\"subKeywords.0\");\r\n    }\r\n  };\r\n\r\n  const onKeyDown4: any = (e: any) => {\r\n    const { key } = e;\r\n    console.log(key);\r\n\r\n    if (key === \",\" && wKeywords4[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords4.slice(1).includes(wKeywords4[0].trim())) {\r\n        wKeywords4[0] = wKeywords4[0].trim();\r\n        wKeywords4.filter((item) => item !== \" \");\r\n        setValue(\"consKeywords\", [wKeywords4[0], ...wKeywords4]);\r\n      }\r\n      console.log(wKeywords4);\r\n      resetField(\"consKeywords.0\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <form className=\" w-[90vw]\" onSubmit={handleSubmit(onValid, onInvalid)}>\r\n          <div className=\" max-w-[1500px]\">\r\n            <div className=\" grid grid-cols-1 sm:grid-cols-5 \">\r\n              <div className=\" bg-white col-span-2 mx-5 mt-7 h-fit border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                <div className=\" min-h-[330px] w-full\">\r\n                  {thumbPreview ? (\r\n                    <label className=\" relative pb-100 w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <Image\r\n                        className=\" object-cover\"\r\n                        src={thumbPreview || \"/\"}\r\n                        layout=\"fill\"\r\n                      />\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  ) : (\r\n                    <label className=\"w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <svg\r\n                        className=\"h-12 w-12\"\r\n                        stroke=\"currentColor\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 48 48\"\r\n                        aria-hidden=\"true\"\r\n                      >\r\n                        <path\r\n                          d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                          strokeWidth={2}\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                        />\r\n                      </svg>\r\n\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  )}\r\n                </div>\r\n                <div className=\" px-4 py-3\">\r\n                  <Input\r\n                    register={register(\"title\", { required: true })}\r\n                    required\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedTitle\", { required: false })}\r\n                    required={false}\r\n                    label=\"RelatedTitle\"\r\n                    name=\"relatedTitle\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"author\", { required: true })}\r\n                    required\r\n                    label=\"Author\"\r\n                    name=\"author\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedAuthor\", { required: false })}\r\n                    required={false}\r\n                    label=\"RelatedAuthor\"\r\n                    name=\"relatedAuthor\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"type\", { required: false })}\r\n                    required={false}\r\n                    label=\"Type\"\r\n                    name=\"type\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"nationality\", { required: true })}\r\n                    required\r\n                    label=\"Nationality\"\r\n                    name=\"nationality\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"genre\")}\r\n                    required\r\n                    label=\"Genre\"\r\n                    name=\"genre\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <div className=\" flex relative items-center justify-between\">\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.0\")}\r\n                        required\r\n                        label=\"StartDate\"\r\n                        name=\"startDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.1\")}\r\n                        required\r\n                        label=\"EndDate\"\r\n                        name=\"endDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <Input\r\n                    register={register(\"original\", { required: true })}\r\n                    required\r\n                    label=\"Original\"\r\n                    name=\"original\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"platforms.0\")}\r\n                    required\r\n                    label=\"Platforms\"\r\n                    name=\"platforms\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"currentState\")}\r\n                    required\r\n                    label=\"CurrentState\"\r\n                    name=\"currentState\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"volume\")}\r\n                    required\r\n                    label=\"Volume\"\r\n                    name=\"volume\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"mediaMix\")}\r\n                    required={false}\r\n                    label=\"MediaMix\"\r\n                    name=\"mediaMix\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"isTranslated\", { required: false })}\r\n                    required={false}\r\n                    label=\"IsTranslated\"\r\n                    name=\"isTranslated\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\" col-span-3 mx-5 mt-7\">\r\n                <div className=\" grid  sm:grid-cols-1\">\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"keywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords = wKeywords.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"keywords\", wKeywords);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Mc Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"mcKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown2}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords2\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords2 = wKeywords2.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"mcKeywords\", wKeywords2);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Sub Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"subKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown3}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords3\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords3 = wKeywords3.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"subKeywords\", wKeywords3);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Cons Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"consKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown4}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords4\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords4 = wKeywords4.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"consKeywords\", wKeywords4);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n\r\n                  <div className=\" h-max bg-white mb-10 w-full border-[0.5px] border-[#BBBBBB] rounded-md overflow-x-auto\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">graphs and charts</h2>\r\n                    <FictionRadarChart props={wStatus} />\r\n                    <div className=\" grid grid-cols-2 mx-2\">\r\n                      <Input\r\n                        register={register(\"status.0\", {\r\n                          max: 5,\r\n                          min: 0,\r\n                        })}\r\n                        required\r\n                        label=\"오리지널리티\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.1\")}\r\n                        required\r\n                        label=\"필력\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.2\")}\r\n                        required\r\n                        label=\"캐릭터성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.3\")}\r\n                        required\r\n                        label=\"핍진성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.4\")}\r\n                        required\r\n                        label=\"스토리\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.5\")}\r\n                        required\r\n                        label=\"작품성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\" mx-5 my-7 bg-white px-3 py-3 border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n              <Textarea\r\n                register={register(\"synopsis\")}\r\n                name=\"synopsis\"\r\n                label=\"Synopsis\"\r\n                required\r\n              />\r\n              <Textarea\r\n                register={register(\"characters\")}\r\n                name=\"characters\"\r\n                label=\"Characters\"\r\n                required\r\n              />\r\n              {/* <Textarea\r\n                register={register(\"setup\")}\r\n                name=\"setup\"\r\n                label=\"Setup\"\r\n                required\r\n              /> */}\r\n              <MDEditor value={md} onChange={handleChange} />\r\n            </div>\r\n          </div>\r\n          <Button text={loading ? \"Loading...\" : \"저장\"} />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditFiction;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\index.tsx",["199","200"],"import { useState } from \"react\";\r\nimport type { GetStaticPaths, GetStaticProps, NextPage } from \"next\";\r\nimport useSWR from \"swr\";\r\nimport { useRouter } from \"next/router\";\r\nimport {\r\n  Fiction,\r\n  FictionStat,\r\n  Keyword,\r\n  UserRationOnFiction,\r\n  KeywordsOnFictions,\r\n  Author,\r\n  Comment,\r\n  Category,\r\n} from \"@prisma/client\";\r\nimport useMutation from \"@libs/client/useMutation\";\r\nimport { cls } from \"@libs/client/utils\";\r\nimport UserStat from \"@components/userStat\";\r\nimport client from \"@libs/server/client\";\r\nimport Image from \"next/image\";\r\nimport useUser from \"@libs/client/useUser\";\r\nimport Link from \"next/link\";\r\nimport Pagination from \"react-js-pagination\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport FictionRadarChart from \"@components/fictionRadarChart\";\r\n\r\ninterface FictionDetailResponse {\r\n  ok: boolean;\r\n  fiction: FictionWithMore;\r\n  similarFictions: Fiction[];\r\n  isLiked: boolean;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: [FictionStat];\r\n  userFictionStat: { userRationOnFictions: [UserRationOnFiction] };\r\n  author: Author;\r\n  categories: [Category];\r\n}\r\n\r\n// interface CommentWithMore extends Comment {\r\n//   ok: boolean;\r\n// }\r\n\r\ninterface CommentResponse {\r\n  comments: Comment[];\r\n  commentsCount: number;\r\n  ok: boolean;\r\n}\r\n\r\nconst FictionDetail: NextPage<FictionDetailResponse> = ({\r\n  fiction,\r\n  similarFictions,\r\n}) => {\r\n  const router = useRouter();\r\n\r\n  // // FAV을 CSR로 받기, 기존 Data 정리하여 fav만 get하여 가져옴\r\n  // const { data, mutate: boundMutate } = useSWR<FictionDetailResponse>(\r\n  //   router.query.id ? `/api/fictions/${router.query.id}` : null\r\n  // );\r\n  const [commentIndex, setCommentIndex] = useState(1);\r\n  const { user, isLoading } = useUser();\r\n\r\n  const { data, mutate: boundMutate } = useSWR<FictionDetailResponse>(\r\n    router.query.id ? `/api/fictions/${router.query.id}/fav` : null\r\n  );\r\n\r\n  const { data: commentsResponse } = useSWR<CommentResponse>(\r\n    router.query.id\r\n      ? `/api/fictions/${router.query.id}/comment?page=${commentIndex}`\r\n      : null\r\n  );\r\n\r\n  const [toggleFav] = useMutation(`/api/fictions/${router.query.id}/fav`);\r\n  const onFavClick = () => {\r\n    toggleFav({}, \"POST\");\r\n    if (!data) return;\r\n\r\n    boundMutate({ ...data, isLiked: !data.isLiked }, false);\r\n  };\r\n\r\n  if (router?.isFallback) {\r\n    return (\r\n      <div title=\"Loaidng for youuuuuuu\">\r\n        <span>I love you</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handlePageChange = (PI: number) => {\r\n    setCommentIndex(PI);\r\n  };\r\n\r\n  fiction.startDate = new Date(fiction?.startDate);\r\n  fiction.endDate = new Date(fiction?.endDate);\r\n\r\n  return (\r\n    <div className=\" max-w-[1100px]\">\r\n      {user ? (\r\n        <div className=\" flex justify-end mx-5 mt-2\">\r\n          <Link href={`/fictions/${fiction.id}/edit`}>\r\n            <div className=\" hover:cursor-pointer bg-white border-[0.5px] border-[#BBBBBB] rounded-md p-1 mx-1\">\r\n              EDIT\r\n            </div>\r\n          </Link>\r\n          <Link href={`/fictions/${fiction.id}/delete`}>\r\n            <div className=\" hover:cursor-pointer bg-white border-[0.5px] border-[#BBBBBB] rounded-md p-1 ml-1\">\r\n              DELETE\r\n            </div>\r\n          </Link>\r\n        </div>\r\n      ) : null}\r\n\r\n      <div className=\" grid grid-cols-1 sm:grid-cols-10 h-fit\">\r\n        <div className=\"  sm:max-w-[380px] object-cover h-fit bg-white col-span-3 mt-7 border-[0.5px] border-[#BBBBBB] rounded-md \">\r\n          <div className=\"  w-full h-[467px] relative\">\r\n            <Image\r\n              src={`https://imagedelivery.net/vZ0h3NOKMe-QsJIVyNemEg/${fiction?.image}/fiction`}\r\n              layout=\"fill\"\r\n              objectFit=\"contain\"\r\n              alt={fiction?.title}\r\n            />\r\n          </div>\r\n          <div className=\" px-4\">\r\n            <div className=\" flex justify-between\">\r\n              <h1 className=\" font-semibold text-2xl mb-2 pt-2 ml-\">\r\n                {fiction?.title}\r\n              </h1>\r\n              <button\r\n                onClick={onFavClick}\r\n                className={cls(\r\n                  \"px-3 py-2 rounded-md flex items-center hover:bg-gray-100 justify-center\",\r\n                  data?.isLiked\r\n                    ? \"text-red-400 hover:text-red-500\"\r\n                    : \"text-gray-400  hover:text-gray-500\"\r\n                )}\r\n              >\r\n                {data?.isLiked ? (\r\n                  <svg\r\n                    className=\"w-6 h-6\"\r\n                    fill=\"currentColor\"\r\n                    viewBox=\"0 0 20 20\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                  >\r\n                    <path\r\n                      fillRule=\"evenodd\"\r\n                      d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\"\r\n                      clipRule=\"evenodd\"\r\n                    ></path>\r\n                  </svg>\r\n                ) : (\r\n                  <svg\r\n                    className=\"h-6 w-6 \"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                    aria-hidden=\"true\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth=\"2\"\r\n                      d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"\r\n                    />\r\n                  </svg>\r\n                )}\r\n              </button>\r\n            </div>\r\n            <div className=\" grid grid-cols-10 text-xs overflow-hidden\">\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] \">\r\n                <div className=\" col-span-4 font-bold font-sans\">원제</div>\r\n                <div className=\" col-span-6\">{fiction?.title}</div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">작가</div>\r\n                <Link passHref href={`/authors/name/${fiction?.author?.name}`}>\r\n                  <a\r\n                    title={fiction?.author?.name}\r\n                    className=\" col-span-6 hover:cursor-pointer text-blue-500\"\r\n                  >\r\n                    {fiction?.author?.name}\r\n                  </a>\r\n                </Link>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">국가</div>\r\n                <div className=\" col-span-6\">{fiction?.nationality}</div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">장르</div>\r\n                <div className=\" col-span-6\">\r\n                  <span>\r\n                    {fiction?.categories\r\n                      .reduce(\r\n                        (acc: any, cur: any) => [...acc, cur?.category?.name],\r\n                        []\r\n                      )\r\n                      .join(\", \")}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">연재기간</div>\r\n                <div className=\" col-span-6\">{`${fiction?.startDate.getFullYear()}. ${\r\n                  fiction?.startDate.getMonth() + 1\r\n                }. ${fiction?.startDate.getDate()} ~ ${fiction?.endDate.getFullYear()}. ${\r\n                  fiction?.endDate.getMonth() + 1\r\n                }. ${fiction?.endDate.getDate()}`}</div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px] \">\r\n                <div className=\" col-span-4 font-bold font-sans \">원본</div>\r\n                <div className=\" col-span-6 text-blue-500\">\r\n                  <a\r\n                    className=\" flex\"\r\n                    href={fiction?.original}\r\n                    title={fiction?.original}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"16\"\r\n                      height=\"16\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-link\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M6.354 5.5H4a3 3 0 0 0 0 6h3a3 3 0 0 0 2.83-4H9c-.086 0-.17.01-.25.031A2 2 0 0 1 7 10.5H4a2 2 0 1 1 0-4h1.535c.218-.376.495-.714.82-1z\" />\r\n                      <path d=\"M9 5.5a3 3 0 0 0-2.83 4h1.098A2 2 0 0 1 9 6.5h3a2 2 0 1 1 0 4h-1.535a4.02 4.02 0 0 1-.82 1H12a3 3 0 1 0 0-6H9z\" />\r\n                    </svg>\r\n                    바로가기\r\n                  </a>\r\n                </div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 sm:col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">플랫폼</div>\r\n                <div className=\" col-span-6 text-blue-500\">\r\n                  <a\r\n                    className=\" flex\"\r\n                    href={fiction?.platforms}\r\n                    title={fiction?.platforms}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"16\"\r\n                      height=\"16\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-link\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M6.354 5.5H4a3 3 0 0 0 0 6h3a3 3 0 0 0 2.83-4H9c-.086 0-.17.01-.25.031A2 2 0 0 1 7 10.5H4a2 2 0 1 1 0-4h1.535c.218-.376.495-.714.82-1z\" />\r\n                      <path d=\"M9 5.5a3 3 0 0 0-2.83 4h1.098A2 2 0 0 1 9 6.5h3a2 2 0 1 1 0 4h-1.535a4.02 4.02 0 0 1-.82 1H12a3 3 0 1 0 0-6H9z\" />\r\n                    </svg>\r\n                    바로가기\r\n                  </a>\r\n                </div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">상태</div>\r\n                <div className=\" col-span-6\">\r\n                  {fiction?.volume}&nbsp;\r\n                  {fiction?.currentState || \"??\"}\r\n                </div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">\r\n                  미디어믹스\r\n                </div>\r\n                <div className=\" col-span-6\">{fiction?.mediaMix || \"X\"}</div>\r\n              </div>\r\n              {fiction?.isTranslated ? (\r\n                <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                  <div className=\" col-span-4 font-bold font-sans\">\r\n                    번역상태\r\n                  </div>\r\n                  <div className=\" col-span-6\">\r\n                    {fiction?.isTranslated ? \"O\" : \"\"}\r\n                  </div>\r\n                </div>\r\n              ) : null}\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">Related</div>\r\n                <div className=\" col-span-6\">\r\n                  {fiction?.relatedTitle} &nbsp;\r\n                  {fiction?.relatedAuthor}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n          </div>\r\n        </div>\r\n        <div className=\" col-span-7 mt-3 sm:mt-7  sm:grid lg:grid-rows-5\">\r\n          <div className=\" grid grid-cols-10 row-span-3\">\r\n            <div className=\" col-span-10 lg:col-span-5 sm:pl-5 lg:px-5 h-full pb-3\">\r\n              <div className=\" mb-5 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md h-full\">\r\n                <h2 className=\" pt-1 border-b-[1px] mx-3 text-md\">메인 태그</h2>\r\n                <ul className=\" pt-2 px-3 inline-flex flex-wrap\">\r\n                  {fiction?.keywords\r\n                    ?.filter(\r\n                      (item) =>\r\n                        item?.keyword?.isOfHeroine === false &&\r\n                        item?.keyword?.isOfMC === false &&\r\n                        item?.keyword?.isOfCons === false\r\n                    )\r\n                    .map((item: any, index: any) => (\r\n                      <li\r\n                        key={index}\r\n                        className={\r\n                          item?.keyword?.isOfMC\r\n                            ? \" text-sm text-center ring-2 ring-red-500 mx-1 my-1 rounded-md h-fit border-[#BBBBBB]\"\r\n                            : item?.keyword?.isOfHeroine\r\n                            ? \" text-sm text-center ring-2 ring-blue-500 mx-1 my-1 rounded-md h-fit border-[#BBBBBB]\"\r\n                            : \" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-gray-200 text-[#666676] p-1 whitespace-nowrap cursor-pointer\"\r\n                        }\r\n                      >\r\n                        <Link\r\n                          href={`/search/keyword/${item?.keyword?.name}/1`}\r\n                          passHref\r\n                        >\r\n                          <a>#{item?.keyword?.name}</a>\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n                <h2 className=\" pt-1 border-b-[1px] mx-3 text-md\">\r\n                  주인공 태그\r\n                </h2>\r\n                <ul className=\" pt-2 px-3 inline-flex flex-wrap\">\r\n                  {fiction.keywords\r\n                    .filter((item) => item?.keyword?.isOfMC === true)\r\n                    .map((item: any, index: any) => (\r\n                      <li\r\n                        key={index}\r\n                        className=\" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-gray-200 text-[#666676] p-1 whitespace-nowrap\"\r\n                      >\r\n                        <Link\r\n                          href={`/search/keyword/${item?.keyword?.name}/1`}\r\n                          passHref\r\n                        >\r\n                          <a>#{item?.keyword?.name}</a>\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n                <h2 className=\" pt-1 border-b-[1px] mx-3 text-md\">\r\n                  히로인 태그\r\n                </h2>\r\n                <ul className=\" pt-2 px-3 inline-flex flex-wrap\">\r\n                  {fiction?.keywords\r\n                    .filter((item) => item?.keyword?.isOfHeroine === true)\r\n                    .map((item: any, index: any) => (\r\n                      <li\r\n                        key={index}\r\n                        className=\" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-gray-200 text-[#666676] p-1 whitespace-nowrap\"\r\n                      >\r\n                        <Link\r\n                          href={`/search/keyword/${item?.keyword?.name}/1`}\r\n                          passHref\r\n                        >\r\n                          <a>#{item?.keyword?.name}</a>\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n                <h2 className=\" pt-1 border-b-[1px] mx-3 text-md\">\r\n                  호불호 키워드\r\n                </h2>\r\n                <ul className=\" pt-2 px-3 inline-flex flex-wrap\">\r\n                  {fiction?.keywords\r\n                    .filter((item) => item?.keyword?.isOfCons === true)\r\n                    .map((item: any, index: any) => (\r\n                      <li\r\n                        key={index}\r\n                        className=\" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-red-200 text-[#666676] p-1 whitespace-nowrap\"\r\n                      >\r\n                        <Link\r\n                          href={`/search/keyword/${item?.keyword?.name}/1`}\r\n                          passHref\r\n                        >\r\n                          <a>#{item?.keyword?.name}</a>\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n            <div className=\" col-span-10 sm:pl-5 lg:px-0 lg:col-span-5 pb-3\">\r\n              <div className=\" bg-white mb-5 w-full border-[0.5px] border-[#BBBBBB] rounded-md col-span-6 h-full\">\r\n                <h2 className=\" font-bold pt-1 px-2\"></h2>\r\n\r\n                <FictionRadarChart props={fiction?.fictionStat} />\r\n\r\n                <div className=\" w-full px-3 h-fit mx-auto my-2\">\r\n                  <details>\r\n                    <summary\r\n                      style={{ listStyle: \"none\" }}\r\n                      className=\" text-center font-bold cursor-pointer my-2 border-[0.5px] border-[#BBBBBB] rounded-md\"\r\n                    >\r\n                      평가하기\r\n                    </summary>\r\n                    <UserStat />\r\n                  </details>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\" row-span-3 mt-2\">\r\n            <div className=\" sm:pl-5 \">\r\n              <div className=\" w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md h-fit\">\r\n                <h2 className=\" font-bold pt-1 px-2 \"></h2>\r\n                <ul className=\" \">\r\n                  {commentsResponse?.comments?.map(\r\n                    (comment: Comment, index: number) => (\r\n                      <ul\r\n                        key={index}\r\n                        className=\" flex place-content-between mx-2 border-b-2 pb-1 last:border-b-0 relative\"\r\n                      >\r\n                        <li className=\" mt-2 text-sm overflow-hidden mr-16\">\r\n                          {comment?.comment}\r\n                        </li>\r\n                        <li className=\" mt-2 text-sm absolute right-24\">\r\n                          {`${comment?.createdById.slice(0, 5)}...`}\r\n                        </li>\r\n                        <li className=\" mt-2 ml-5 text-sm min-w-[78px]\">\r\n                          👍 👎 (+3)\r\n                        </li>\r\n                      </ul>\r\n                    )\r\n                  )}\r\n                </ul>\r\n                <div className=\" mb-2 mt-7\">\r\n                  <Pagination\r\n                    activePage={commentIndex}\r\n                    itemsCountPerPage={7}\r\n                    totalItemsCount={commentsResponse?.commentsCount || 1}\r\n                    pageRangeDisplayed={5}\r\n                    prevPageText={\"‹\"}\r\n                    nextPageText={\"›\"}\r\n                    onChange={handlePageChange}\r\n                    innerClass=\" flex justify-center mt-[15px]\"\r\n                    itemClass=\" hover:text-blue-400 flex border-[1px] divide-solid border-[#e2e2e2] inline-block w-[30px] h-[30px] justify-center align-center\"\r\n                    linkClass=\" w-full flex justify-center mt-[0.8px]\"\r\n                    activeClass=\" text-blue-400\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\" mt-3 sm:mt-7  px-3 py-3 \">\r\n        <div className=\" \">\r\n          <h2 className=\" font-bold text-xl border-b-[1px] py-2\">줄거리</h2>\r\n          <p className=\" whitespace-pre-wrap mt-2\">{fiction?.synopsis}</p>\r\n        </div>\r\n        <div className=\" mt-3\">\r\n          <h2 className=\" font-bold text-xl mt-4 border-b-[1px] py-2\">\r\n            등장인물\r\n          </h2>\r\n          {fiction?.characters}\r\n        </div>\r\n        <div className=\" \">\r\n          <h2 className=\" font-bold text-xl mt-4 border-b-[1px] py-2\">\r\n            세계관 및 설정\r\n          </h2>\r\n          {/* <a className=\" \">{fiction?.setup || \"\"}</a> */}\r\n          <ReactMarkdown remarkPlugins={[remarkGfm]}>\r\n            {fiction.setup || \"\"}\r\n          </ReactMarkdown>\r\n        </div>\r\n      </div>\r\n      <div className=\" mt-3 sm:mt-7 bg-white px-3 py-3 border-[0.5px] border-[#BBBBBB] rounded-md\">\r\n        <h3 className=\" font-bold text-xl\">비슷한 소설</h3>\r\n        <div className=\" mt-6 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n          {similarFictions?.slice(0, 4).map((fiction) => (\r\n            <div key={fiction?.id}>\r\n              <div className=\"h-56 w-full mb-4 bg-slate-300\"></div>\r\n              <h3 className=\" text-gray-700 -mb-1\">{fiction?.title}</h3>\r\n              <span>description</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport const getStaticProps: GetStaticProps = async (ctx) => {\r\n  if (!ctx?.params?.id) {\r\n    return {\r\n      props: {},\r\n    };\r\n  }\r\n  const fiction = await client.fiction.findUnique({\r\n    where: {\r\n      id: +ctx.params.id!.toString(),\r\n    },\r\n    include: {\r\n      fictionStat: true,\r\n      userFictionStat: {\r\n        include: {\r\n          userRationOnFictions: true,\r\n          _count: {\r\n            select: {\r\n              users: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      keywords: {\r\n        include: {\r\n          keyword: {\r\n            select: {\r\n              name: true,\r\n              isOfHeroine: true,\r\n              isOfMC: true,\r\n              isOfCons: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n      author: true,\r\n    },\r\n  });\r\n\r\n  const arr: any[] = [];\r\n  fiction?.keywords.map((item) => arr.push(item?.keyword?.name));\r\n  const keywordSame = arr.map((word) => ({\r\n    keywords: {\r\n      some: {\r\n        keyword: {\r\n          name: {\r\n            equals: word,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  }));\r\n\r\n  const arr2: any[] = [];\r\n  const similarFictions = await client.fiction.findMany({\r\n    where: {\r\n      OR: keywordSame,\r\n      AND: {\r\n        id: {\r\n          not: fiction?.id,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  similarFictions.map((item) => arr2.push([item.id, item.title]));\r\n\r\n  const isLiked = false;\r\n\r\n  // const ration = await client.userFictionStat.findFirst({\r\n  //   where: {\r\n  //     fictionId: fiction?.id,\r\n  //   },\r\n  //   select: {\r\n  //     originality: true,\r\n  //     writing: true,\r\n  //     character: true,\r\n  //     verisimilitude: true,\r\n  //     synopsisComposition: true,\r\n  //     value: true,\r\n  //   },\r\n  // });\r\n\r\n  return {\r\n    props: {\r\n      fiction: JSON.parse(JSON.stringify(fiction)),\r\n      similarFictions: JSON.parse(JSON.stringify(similarFictions)),\r\n      isLiked,\r\n    },\r\n  };\r\n};\r\n\r\nexport default FictionDetail;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\index.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\edit.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\index.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\ranking\\index.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\index.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\index.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\[page].tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\title\\[search].tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\tailwind.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\_app.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\button.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\carousel.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionList.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionRadarChart.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\footer.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\gnb.tsx",["201"],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\input.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\mdEditor.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\search.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\textarea.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\top.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\userStat.tsx",[],{"ruleId":"202","severity":1,"message":"203","line":28,"column":6,"nodeType":"204","endLine":28,"endColumn":23,"suggestions":"205"},{"ruleId":"202","severity":1,"message":"206","line":43,"column":6,"nodeType":"204","endLine":43,"endColumn":17,"suggestions":"207"},{"ruleId":"208","severity":1,"message":"209","line":195,"column":23,"nodeType":"210","endLine":199,"endColumn":25},{"ruleId":"202","severity":1,"message":"211","line":68,"column":21,"nodeType":"212","endLine":75,"endColumn":32},{"ruleId":"202","severity":1,"message":"211","line":77,"column":21,"nodeType":"212","endLine":84,"endColumn":32},{"ruleId":"202","severity":1,"message":"213","line":190,"column":6,"nodeType":"204","endLine":190,"endColumn":25,"suggestions":"214"},{"ruleId":"208","severity":1,"message":"209","line":315,"column":23,"nodeType":"210","endLine":319,"endColumn":25},{"ruleId":"215","severity":1,"message":"216","line":106,"column":11,"nodeType":"210","endLine":106,"endColumn":55},{"ruleId":"215","severity":1,"message":"216","line":111,"column":11,"nodeType":"210","endLine":111,"endColumn":57},{"ruleId":"215","severity":1,"message":"216","line":46,"column":11,"nodeType":"210","endLine":46,"endColumn":33},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'router' and 'setAuthorPageIndex'. Either include them or remove the dependency array.","ArrayExpression",["217"],"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["218"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Assignments to the 'queryString' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","TemplateLiteral","React Hook useEffect has a missing dependency: 'md'. Either include it or remove the dependency array.",["219"],"@next/next/link-passhref","passHref is missing. See: https://nextjs.org/docs/messages/link-passhref",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},"Update the dependencies array to be: [authorPageIndex, router, setAuthorPageIndex]",{"range":"226","text":"227"},"Update the dependencies array to be: [pageIndex, router]",{"range":"228","text":"229"},"Update the dependencies array to be: [fiction, md, setValue]",{"range":"230","text":"231"},[944,961],"[authorPageIndex, router, setAuthorPageIndex]",[1084,1095],"[pageIndex, router]",[6381,6400],"[fiction, md, setValue]"]