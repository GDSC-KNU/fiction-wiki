[{"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\auth\\[...nextauth].js":"1","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\client.ts":"2","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\comments.ts":"3","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\index.ts":"4","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\comment.ts":"5","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\fav.ts":"6","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\index.ts":"7","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\userRate.ts":"8","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\files.ts":"9","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\keyword\\[search].ts":"10","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\title\\[search].ts":"11","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\confirm.tsx":"12","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\enter.tsx":"13","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\favs.ts":"14","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\index.tsx":"15","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\index.tsx":"16","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\name\\[slug]\\index.tsx":"17","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\[page].tsx":"18","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\enter.tsx":"19","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\create.tsx":"20","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\index.tsx":"21","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[...params].tsx":"22","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\edit.tsx":"23","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\index.tsx":"24","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\index.tsx":"25","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\edit.tsx":"26","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\index.tsx":"27","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\ranking\\index.tsx":"28","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\index.tsx":"29","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\index.tsx":"30","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\[page].tsx":"31","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\title\\[search].tsx":"32","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\tailwind.tsx":"33","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\_app.tsx":"34","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\button.tsx":"35","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\carousel.tsx":"36","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionList.tsx":"37","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionRadarChart.tsx":"38","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\footer.tsx":"39","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\gnb.tsx":"40","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\input.tsx":"41","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\mdEditor.tsx":"42","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\search.tsx":"43","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\textarea.tsx":"44","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\top.tsx":"45","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\userStat.tsx":"46"},{"size":899,"mtime":1664781237096,"results":"47","hashOfConfig":"48"},{"size":84,"mtime":1664704286063,"results":"49","hashOfConfig":"48"},{"size":1322,"mtime":1664704286065,"results":"50","hashOfConfig":"48"},{"size":8551,"mtime":1664704286074,"results":"51","hashOfConfig":"48"},{"size":1128,"mtime":1664704286068,"results":"52","hashOfConfig":"48"},{"size":1473,"mtime":1664704286069,"results":"53","hashOfConfig":"48"},{"size":7784,"mtime":1664704286070,"results":"54","hashOfConfig":"48"},{"size":9659,"mtime":1664704286072,"results":"55","hashOfConfig":"48"},{"size":862,"mtime":1664704286075,"results":"56","hashOfConfig":"48"},{"size":1687,"mtime":1664704286077,"results":"57","hashOfConfig":"48"},{"size":1416,"mtime":1664704286080,"results":"58","hashOfConfig":"48"},{"size":806,"mtime":1664704286083,"results":"59","hashOfConfig":"48"},{"size":1742,"mtime":1664704286084,"results":"60","hashOfConfig":"48"},{"size":750,"mtime":1664704286086,"results":"61","hashOfConfig":"48"},{"size":870,"mtime":1664704286088,"results":"62","hashOfConfig":"48"},{"size":2156,"mtime":1664805814119,"results":"63","hashOfConfig":"48"},{"size":3018,"mtime":1664779057511,"results":"64","hashOfConfig":"48"},{"size":2007,"mtime":1664805801551,"results":"65","hashOfConfig":"48"},{"size":6784,"mtime":1664858825634,"results":"66","hashOfConfig":"48"},{"size":21751,"mtime":1664805769588,"results":"67","hashOfConfig":"48"},{"size":14861,"mtime":1664806571590,"results":"68","hashOfConfig":"48"},{"size":14063,"mtime":1664805712012,"results":"69","hashOfConfig":"48"},{"size":26144,"mtime":1664779096380,"results":"70","hashOfConfig":"48"},{"size":23599,"mtime":1664779100545,"results":"71","hashOfConfig":"48"},{"size":2035,"mtime":1664779172272,"results":"72","hashOfConfig":"48"},{"size":262,"mtime":1664779131485,"results":"73","hashOfConfig":"48"},{"size":2797,"mtime":1664779130051,"results":"74","hashOfConfig":"48"},{"size":266,"mtime":1664860921561,"results":"75","hashOfConfig":"48"},{"size":1346,"mtime":1664779151639,"results":"76","hashOfConfig":"48"},{"size":2814,"mtime":1664862575049,"results":"77","hashOfConfig":"48"},{"size":2852,"mtime":1664806622889,"results":"78","hashOfConfig":"48"},{"size":878,"mtime":1664806696941,"results":"79","hashOfConfig":"48"},{"size":4299,"mtime":1664847738184,"results":"80","hashOfConfig":"48"},{"size":1125,"mtime":1664858142618,"results":"81","hashOfConfig":"48"},{"size":634,"mtime":1664704236637,"results":"82","hashOfConfig":"48"},{"size":6283,"mtime":1664704236623,"results":"83","hashOfConfig":"48"},{"size":21228,"mtime":1664862477766,"results":"84","hashOfConfig":"48"},{"size":3706,"mtime":1664865561262,"results":"85","hashOfConfig":"48"},{"size":265,"mtime":1664704236628,"results":"86","hashOfConfig":"48"},{"size":2995,"mtime":1664704236629,"results":"87","hashOfConfig":"48"},{"size":6647,"mtime":1664771982757,"results":"88","hashOfConfig":"48"},{"size":607,"mtime":1664777272685,"results":"89","hashOfConfig":"48"},{"size":1672,"mtime":1664774751373,"results":"90","hashOfConfig":"48"},{"size":750,"mtime":1664704236641,"results":"91","hashOfConfig":"48"},{"size":93,"mtime":1664778231793,"results":"92","hashOfConfig":"48"},{"size":8145,"mtime":1664771054766,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lprfjo",{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\auth\\[...nextauth].js",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\client.ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\comments.ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\index.ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\comment.ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\fav.ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\index.ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\userRate.ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\files.ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\keyword\\[search].ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\title\\[search].ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\confirm.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\enter.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\favs.ts",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\index.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\index.tsx",["241"],[],"import { Author } from \"@prisma/client\";\r\nimport type { GetStaticProps, GetStaticPropsContext, NextPage } from \"next\";\r\nimport client from \"@libs/server/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { authorPageAtom } from \"../../atoms\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport { useRouter } from \"next/router\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\n\r\ninterface AuthorResponse {\r\n  authors: Author[];\r\n  authorsCount: number;\r\n}\r\n\r\n// interface IParams extends ParsedUrlQuery {\r\n//   page: string;\r\n// }\r\n\r\nconst Author: NextPage<AuthorResponse> = ({ authors, authorsCount }) => {\r\n  const [authorPageIndex, setAuthorPageIndex] = useRecoilState(authorPageAtom);\r\n  let router = useRouter();\r\n  // const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  console.log(authorPageIndex);\r\n\r\n  useEffect(() => {\r\n    setAuthorPageIndex(authorPageIndex);\r\n    router.push(`/authors/${authorPageIndex}`);\r\n  }, [authorPageIndex]);\r\n\r\n  return (\r\n    <div className=\" mt-12\">\r\n      <FictionList\r\n        data={authors}\r\n        type={\"authors_list\"}\r\n        authorsCount={authorsCount}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// export const getStaticProps: GetStaticProps = async (\r\n//   ctx: GetStaticPropsContext\r\n// ) => {\r\n\r\nexport const getStaticProps: GetStaticProps = async (\r\n  ctx: GetStaticPropsContext\r\n) => {\r\n  // const { page } = ctx.params as IParams;\r\n  // if (!page) {\r\n  //   return {\r\n  //     props: {},\r\n  //   };\r\n  // }\r\n  // console.log(page);\r\n\r\n  const authors = await client.author.findMany({\r\n    take: 18,\r\n    skip: 0,\r\n    include: {\r\n      fictions: true,\r\n    },\r\n  });\r\n\r\n  const authorsCount = await client.author.count({});\r\n\r\n  return {\r\n    props: {\r\n      authors: JSON.parse(JSON.stringify(authors)),\r\n      authorsCount: JSON.parse(JSON.stringify(authorsCount)),\r\n    },\r\n  };\r\n};\r\n\r\n// export async function getStaticProps() {\r\n//     const authors = await client.author.findUnique({\r\n//     where: { name: ctx.params.slug?.toString() },\r\n//     include: {\r\n//       fictions: true,\r\n//     },\r\n//   });\r\n// }\r\n\r\nexport default Author;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\name\\[slug]\\index.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\[page].tsx",["242"],[],"import type {\r\n  GetStaticPaths,\r\n  GetStaticProps,\r\n  GetStaticPropsContext,\r\n  NextPage,\r\n} from \"next\";\r\nimport client from \"@libs/server/client\";\r\nimport { Fiction, Author } from \"@prisma/client\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { authorPageAtom } from \"../../atoms\";\r\nimport { useRouter } from \"next/router\";\r\n\r\n// interface AuthorWithFictions extends Author {\r\n//   fictions: Fiction[];\r\n// }\r\n\r\ninterface AuthorResponse {\r\n  authors: Author[];\r\n  authorsCount: number;\r\n}\r\n\r\ntype Props = {\r\n  authors: Author[];\r\n};\r\n\r\n// interface Params extends ParsedUrlQuery {\r\n//   page: string;\r\n// }\r\n\r\ninterface IParams extends ParsedUrlQuery {\r\n  page: string;\r\n}\r\n\r\nconst AuthorPage: NextPage<AuthorResponse> = ({ authors, authorsCount }) => {\r\n  const [pageIndex, setPageIndex] = useRecoilState(authorPageAtom);\r\n  let router = useRouter();\r\n\r\n  useEffect(() => {\r\n    router.push(`/authors/${pageIndex}`);\r\n  }, [pageIndex]);\r\n\r\n  return (\r\n    <div className=\" mt-12\">\r\n      <FictionList\r\n        data={authors}\r\n        type={\"authors_list\"}\r\n        authorsCount={authorsCount}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport const getStaticProps: GetStaticProps = async (\r\n  ctx: GetStaticPropsContext\r\n) => {\r\n  const { page } = ctx.params as IParams;\r\n  if (!page) {\r\n    return {\r\n      props: {},\r\n    };\r\n  }\r\n\r\n  const authors = await client.author.findMany({\r\n    take: 18,\r\n    skip: (+page - 1) * 18,\r\n    include: {\r\n      fictions: true,\r\n    },\r\n  });\r\n\r\n  const authorsCount = await client.author.count({});\r\n\r\n  return {\r\n    props: {\r\n      authors: JSON.parse(JSON.stringify(authors)),\r\n      authorsCount: JSON.parse(JSON.stringify(authorsCount)),\r\n    },\r\n  };\r\n};\r\n\r\nexport default AuthorPage;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\enter.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\create.tsx",["243"],[],"import Button from \"@components/button\";\r\nimport FictionRadarChart from \"@components/fictionRadarChart\";\r\nimport Input from \"@components/input\";\r\nimport Textarea from \"@components/textarea\";\r\nimport useMutation from \"@libs/client/useMutation\";\r\nimport { Fiction } from \"@prisma/client\";\r\nimport type { NextPage } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { FieldErrors, useForm } from \"react-hook-form\";\r\nimport Image from \"next/image\";\r\nimport dynamic from \"next/dynamic\";\r\nimport \"@uiw/react-md-editor/markdown-editor.css\";\r\nimport \"@uiw/react-markdown-preview/markdown.css\";\r\n\r\ninterface CreateFictionForm {\r\n  title: string;\r\n  author: string;\r\n  nationality: string;\r\n  genre: string[];\r\n  date: Date[];\r\n  status: number[];\r\n  synopsis: string;\r\n  characters: string;\r\n  currentState: string;\r\n  keywords: string[];\r\n  mcKeywords: string[];\r\n  subKeywords: string[];\r\n  consKeywords: string[];\r\n  original: string;\r\n  platforms: string[];\r\n  thumb?: FileList;\r\n  volume?: number;\r\n  isTranslated?: string;\r\n  relatedTitle?: string;\r\n  relatedAuthor?: string;\r\n  type?: string;\r\n  mediaMix?: string;\r\n  setup?: string;\r\n}\r\n\r\ninterface CreateFictionMutation {\r\n  ok: boolean;\r\n  fiction: Fiction;\r\n}\r\n\r\nconst MDEditor = dynamic(() => import(\"@uiw/react-md-editor\"), {\r\n  ssr: false,\r\n});\r\n\r\nconst Create: NextPage = (props) => {\r\n  const [md, setMd] = useState<string | undefined>(\"# Hello World\");\r\n\r\n  // const handleChange = useCallback((md) => {\r\n  //   setMd(md);\r\n  // }, []);\r\n\r\n  const handleChange = (md: any) => {\r\n    setMd(md);\r\n  };\r\n  ///////////\r\n  // console.log(\"redered\");\r\n  const router = useRouter();\r\n  const [createFiction, { loading, data, error }] =\r\n    useMutation<CreateFictionMutation>(\"/api/fictions\");\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    resetField,\r\n    watch,\r\n    formState: { errors },\r\n    setValue,\r\n  } = useForm<CreateFictionForm>({ mode: \"onBlur\" });\r\n\r\n  const onValid = async (data: CreateFictionForm) => {\r\n    // if (data) console.log(data);\r\n    if (loading) return;\r\n    if (data.thumb && data.thumb.length > 0) {\r\n      const { uploadURL } = await (await fetch(`/api/files`)).json();\r\n      const form = new FormData();\r\n      form.append(\"file\", data.thumb[0], data.title);\r\n      const {\r\n        result: { id },\r\n      } = await (await fetch(uploadURL, { method: \"POST\", body: form })).json();\r\n      createFiction({ ...data, thumbId: id, setup: md }, \"POST\");\r\n    } else {\r\n      createFiction({ ...data, setup: md }, \"POST\");\r\n    }\r\n    return;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data?.ok) {\r\n      router.push(`/fictions/${data.fiction.id}`);\r\n    }\r\n  }, [data, router]);\r\n  const [thumbPreview, setThumbPreview] = useState(\"\");\r\n  const thumb = watch(\"thumb\");\r\n\r\n  useEffect(() => {\r\n    if (thumb && thumb.length > 0) {\r\n      const file = thumb[0];\r\n      setThumbPreview(URL.createObjectURL(file));\r\n    }\r\n  }, [thumb]);\r\n\r\n  const onInvalid = (erros: FieldErrors) => {\r\n    if (loading) return;\r\n  };\r\n\r\n  /// watch state (react-hook-form)\r\n  let wKeywords: string[] = watch().keywords;\r\n  let wKeywords2: string[] = watch().mcKeywords;\r\n  let wKeywords3: string[] = watch().subKeywords;\r\n  let wKeywords4: string[] = watch().consKeywords;\r\n  let wStatus: number[] = watch().status;\r\n  // console.log(watch());\r\n\r\n  const onKeyDown: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords.slice(1).includes(wKeywords[0].trim())) {\r\n        wKeywords[0] = wKeywords[0].trim();\r\n        wKeywords.filter((item) => item !== \" \");\r\n        setValue(\"keywords\", [wKeywords[0], ...wKeywords]);\r\n      }\r\n      // console.log(wKeywords);\r\n      resetField(\"keywords.0\");\r\n    }\r\n  };\r\n  const onKeyDown2: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords2[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords2.slice(1).includes(wKeywords2[0].trim())) {\r\n        wKeywords2[0] = wKeywords2[0].trim();\r\n        wKeywords2.filter((item) => item !== \" \");\r\n        setValue(\"mcKeywords\", [wKeywords2[0], ...wKeywords2]);\r\n      }\r\n      // console.log(wKeywords2);\r\n      resetField(\"mcKeywords.0\");\r\n    }\r\n  };\r\n  const onKeyDown3: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords3[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords3.slice(1).includes(wKeywords3[0].trim())) {\r\n        wKeywords3[0] = wKeywords3[0].trim();\r\n        wKeywords3.filter((item) => item !== \" \");\r\n        setValue(\"subKeywords\", [wKeywords3[0], ...wKeywords3]);\r\n      }\r\n      // console.log(wKeywords3);\r\n      resetField(\"subKeywords.0\");\r\n    }\r\n  };\r\n  const onKeyDown4: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords4[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords4.slice(1).includes(wKeywords4[0].trim())) {\r\n        wKeywords4[0] = wKeywords4[0].trim();\r\n        wKeywords4.filter((item) => item !== \" \");\r\n        setValue(\"consKeywords\", [wKeywords4[0], ...wKeywords4]);\r\n      }\r\n      // console.log(wKeywords4);\r\n      resetField(\"consKeywords.0\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <form className=\" w-[90vw]\" onSubmit={handleSubmit(onValid, onInvalid)}>\r\n          <div className=\" max-w-[1500px]\">\r\n            <div className=\" grid grid-cols-1 sm:grid-cols-5 \">\r\n              <div className=\" bg-white col-span-2 mx-5 mt-7 h-fit border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                <div className=\" min-h-[330px] w-full\">\r\n                  {thumbPreview ? (\r\n                    <label className=\" relative pb-100 w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <Image\r\n                        className=\" object-cover\"\r\n                        src={thumbPreview || \"/\"}\r\n                        layout=\"fill\"\r\n                      />\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  ) : (\r\n                    <label className=\"w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <svg\r\n                        className=\"h-12 w-12\"\r\n                        stroke=\"currentColor\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 48 48\"\r\n                        aria-hidden=\"true\"\r\n                      >\r\n                        <path\r\n                          d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                          strokeWidth={2}\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                        />\r\n                      </svg>\r\n\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  )}\r\n                </div>\r\n                <div className=\" px-4 py-3\">\r\n                  <Input\r\n                    register={register(\"title\", { required: true })}\r\n                    required\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedTitle\", { required: true })}\r\n                    required\r\n                    label=\"RelatedTitle\"\r\n                    name=\"relatedTitle\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"author\", { required: true })}\r\n                    required\r\n                    label=\"Author\"\r\n                    name=\"author\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedAuthor\", { required: true })}\r\n                    required\r\n                    label=\"RelatedAuthor\"\r\n                    name=\"relatedAuthor\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"type\", { required: true })}\r\n                    required\r\n                    label=\"Type\"\r\n                    name=\"type\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"nationality\", { required: true })}\r\n                    required\r\n                    label=\"Nationality\"\r\n                    name=\"nationality\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"genre\")}\r\n                    required\r\n                    label=\"Genre\"\r\n                    name=\"genre\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <div className=\" flex relative items-center justify-between\">\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.0\")}\r\n                        required\r\n                        label=\"StartDate\"\r\n                        name=\"startDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.1\")}\r\n                        required\r\n                        label=\"EndDate\"\r\n                        name=\"endDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <Input\r\n                    register={register(\"original\", { required: true })}\r\n                    required\r\n                    label=\"Original\"\r\n                    name=\"original\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"platforms.0\")}\r\n                    required\r\n                    label=\"Platforms\"\r\n                    name=\"platforms\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"currentState\")}\r\n                    required\r\n                    label=\"CurrentState\"\r\n                    name=\"currentState\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"volume\", { required: true })}\r\n                    required\r\n                    label=\"Volume\"\r\n                    name=\"volume\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"isTranslated\", { required: false })}\r\n                    required\r\n                    label=\"IsTranslated\"\r\n                    name=\"isTranslated\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\" col-span-3 mx-5 mt-7\">\r\n                <div className=\" grid  sm:grid-cols-1\">\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"keywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords = wKeywords.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"keywords\", wKeywords);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Mc Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"mcKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown2}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords2\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords2 = wKeywords2.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"keywords\", wKeywords2);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Sub Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"subKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown3}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords3\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords3 = wKeywords3.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"subKeywords\", wKeywords3);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Cons Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"consKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown4}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords4\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords4 = wKeywords4.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"consKeywords\", wKeywords4);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" h-max bg-white mb-10 w-full border-[0.5px] border-[#BBBBBB] rounded-md overflow-x-auto\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">graphs and charts</h2>\r\n                    <FictionRadarChart props={wStatus} />\r\n                    <div className=\" grid grid-cols-2 mx-2\">\r\n                      <Input\r\n                        register={register(\"status.0\", {\r\n                          max: 5,\r\n                          min: 0,\r\n                        })}\r\n                        required\r\n                        label=\"오리지널리티\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.1\")}\r\n                        required\r\n                        label=\"필력\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.2\")}\r\n                        required\r\n                        label=\"캐릭터성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.3\")}\r\n                        required\r\n                        label=\"핍진성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.4\")}\r\n                        required\r\n                        label=\"스토리\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.5\")}\r\n                        required\r\n                        label=\"작품성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* <div className=\" h-fit w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md\">\r\n                  <h2 className=\" font-bold pt-1 px-2\"> Comments</h2>\r\n                  <ul></ul>\r\n                </div> */}\r\n              </div>\r\n            </div>\r\n            <div className=\" mx-5 my-7 bg-white px-3 py-3 border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n              <Textarea\r\n                register={register(\"synopsis\")}\r\n                name=\"synopsis\"\r\n                label=\"Synopsis\"\r\n                required\r\n              />\r\n              <Textarea\r\n                register={register(\"characters\")}\r\n                name=\"characters\"\r\n                label=\"Characters\"\r\n                required\r\n              />\r\n              {/* <Textarea\r\n                register={register(\"setup\", { required: false })}\r\n                name=\"setup\"\r\n                label=\"Setup\"\r\n                required\r\n              /> */}\r\n              <div>\r\n                {/* <MdEditor /> */}\r\n                <MDEditor value={md} onChange={handleChange} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Button text={loading ? \"Loading...\" : \"저장\"} />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\index.tsx",["244"],[],"import {\r\n  Fiction,\r\n  Keyword,\r\n  FictionStat,\r\n  KeywordsOnFictions,\r\n  UserFictionStat,\r\n  Author,\r\n} from \"@prisma/client\";\r\nimport type { NextPage } from \"next\";\r\nimport useSWR from \"swr\";\r\nimport client from \"@libs/server/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom } from \"../../atoms\";\r\n\r\ninterface UserFictionStatWithMore extends UserFictionStat {\r\n  _count: {\r\n    users: number;\r\n  };\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: [FictionStat];\r\n  userFictionStat: UserFictionStatWithMore;\r\n  author: Author;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionsResponse {\r\n  ok: boolean;\r\n  fictions: FictionWithMore[];\r\n  fictionsCount: number;\r\n  keywords: Keyword[];\r\n  categories: string[];\r\n  nationalities: string[];\r\n}\r\n\r\nconst Fictions: NextPage<FictionsResponse> = ({\r\n  fictions,\r\n  fictionsCount,\r\n  keywords,\r\n  categories,\r\n  nationalities,\r\n}) => {\r\n  const [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n  let router = useRouter();\r\n  // console.log(router.query?.keywords);\r\n\r\n  let queryString = `/api/fictions?${\r\n    \"keywords=\" + (router.query?.keywords?.toString().split(\",\") || \"\")\r\n  }${\r\n    \"&nationalities=\" +\r\n    (router.query?.nationalities?.toString().split(\",\") || \"\")\r\n  }${\"&genres=\" + (router.query?.genres?.toString().split(\",\") || \"\")}${\r\n    \"&sorting=\" + (router.query?.sorting || \"\")\r\n  }${\"&page=\" + pageIndex}`;\r\n  // console.log(queryString);\r\n\r\n  let { data, error } = useSWR<FictionsResponse>(queryString);\r\n\r\n  // pageIndex 변경될때마다 router.push\r\n  useEffect(() => {\r\n    if (router.query.params) {\r\n      queryString = `/api/fictions?${\r\n        \"keywords=\" + (router?.query?.params[4]?.toString().split(\",\") || \"\")\r\n      }${\r\n        \"&nationalities=\" +\r\n        (router?.query?.params[0]?.toString().split(\",\") || \"\")\r\n      }${\"&genres=\" + (router?.query?.params[1]?.toString().split(\",\") || \"\")}${\r\n        \"&sorting=\" + (router?.query?.params[2] || \"\")\r\n      }${\"&page=\" + pageIndex}`;\r\n    }\r\n    // console.log(queryString);\r\n    // console.log(data);\r\n    const genresMany = { genres: Array.from(checkedGenres).join(\",\") } || {};\r\n\r\n    // console.log(genresMany);\r\n\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${\r\n        Array.from(checkedSortings || \"총점\").join(\",\") || \"all\"\r\n      }/${pageIndex}/${Array.from(checkedItems).join(\",\") || \"all\"}`\r\n    );\r\n  }, [pageIndex]);\r\n\r\n  //세부 필터링\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [checkedItems, setCheckedItems] = useState(new Set());\r\n  const [checkedGenres, setCheckedGenres] = useState(new Set());\r\n  const [checkedNationalities, setCheckedNationalities] = useState(new Set());\r\n  const [checkedSortings, setCheckedSortings] = useState(new Set());\r\n  const sortingList = [\r\n    \"총점\",\r\n    \"캐릭터성\",\r\n    \"오리지널리티\",\r\n    \"스토리\",\r\n    \"작품성\",\r\n    \"핍진성\",\r\n    \"필력\",\r\n    \"화수\",\r\n  ];\r\n\r\n  const checkHandler = ({\r\n    currentTarget,\r\n  }: React.MouseEvent<HTMLInputElement>) => {\r\n    setIsChecked(!isChecked);\r\n\r\n    checkedItemHandler(\r\n      currentTarget.parentNode,\r\n      currentTarget.value,\r\n      currentTarget.checked,\r\n      currentTarget.id,\r\n      currentTarget\r\n    );\r\n  };\r\n\r\n  const checkedItemHandler = (\r\n    box: any,\r\n    name: any,\r\n    isChecked: any,\r\n    id: any,\r\n    target: any\r\n  ) => {\r\n    // console.log(name);\r\n    // console.log(checkedItems);\r\n    // 키워드\r\n    if (isChecked && id === \"keyword\") {\r\n      checkedItems.add(name);\r\n      setCheckedItems(checkedItems);\r\n      // box.style.backgroundColor = \"blue\";\r\n      // box.style.color = \"white\";\r\n    } else if (!isChecked && checkedItems.has(name) && id === \"keyword\") {\r\n      checkedItems.delete(name);\r\n      setCheckedItems(checkedItems);\r\n    }\r\n    // 국가\r\n    if (isChecked && id === \"nationality\") {\r\n      checkedNationalities.add(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    } else if (\r\n      !isChecked &&\r\n      checkedNationalities.has(name) &&\r\n      id === \"nationality\"\r\n    ) {\r\n      checkedNationalities.delete(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    }\r\n    // 장르\r\n    if (isChecked && id === \"genre\") {\r\n      checkedGenres.add(name);\r\n      setCheckedGenres(checkedGenres);\r\n    } else if (!isChecked && checkedGenres.has(name) && id === \"genre\") {\r\n      checkedGenres.delete(name);\r\n      setCheckedGenres(checkedGenres);\r\n    }\r\n    // 정렬\r\n    if (isChecked && id === \"sorting\") {\r\n      checkedSortings.clear();\r\n      checkedSortings.add(name);\r\n      setCheckedSortings(checkedSortings);\r\n      // console.log(name);\r\n    } else if (!isChecked && checkedSortings.has(name) && id === \"sorting\") {\r\n      checkedSortings.delete(name);\r\n      setCheckedSortings(checkedSortings);\r\n    }\r\n  };\r\n\r\n  const buttonFlag = useRef(true);\r\n  const rerenderList = () => {\r\n    // console.log(buttonFlag.current);\r\n    if (!buttonFlag.current) {\r\n      alert(\"새로고침은 5초마다 한번씩 가능합니다.\");\r\n      return;\r\n    }\r\n    buttonFlag.current = !buttonFlag.current;\r\n    setTimeout(() => {\r\n      buttonFlag.current = !buttonFlag.current;\r\n      // console.log(\"해제완료\");\r\n    }, 5000);\r\n    setPageIndex(1);\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${Array.from(checkedSortings).join(\",\") || \"총점\"}/${pageIndex}/${\r\n        Array.from(checkedItems).join(\",\") || \"all\"\r\n      }`\r\n    );\r\n  };\r\n\r\n  // console.log(nationalities, categories, keywords);\r\n\r\n  return (\r\n    <div className=\" mt-10 max-w-[1300px]\">\r\n      <div className=\" w-full justify-center\">\r\n        <form className=\" \">\r\n          <div className=\"  bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n            <table className=\" leading-7\">\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <th>국가</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {nationalities.map((nationality, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          className=\" hidden peer\"\r\n                          id=\"nationality\"\r\n                          value={nationality}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px]\">\r\n                          {nationality}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>장르</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {categories.map((category: any, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          id=\"genre\"\r\n                          className=\" hidden peer\"\r\n                          value={category.name}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {category.name}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                  <th>정렬</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {sortingList.map((sorting, i) => (\r\n                      <label\r\n                        key={i}\r\n                        className=\" bg-white  cursor-pointer flex \"\r\n                      >\r\n                        <input\r\n                          // defaultChecked\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"radio\"\r\n                          className=\" hidden peer\"\r\n                          id=\"sorting\"\r\n                          value={sorting}\r\n                          name=\"sorting\"\r\n                        ></input>\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {sorting}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <details className=\" text-center\">\r\n            <div className=\" mt-5 bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n              <table className=\" leading-7\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <th className=\" min-w-[50px]\">키워드</th>\r\n                    <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                      {keywords\r\n                        .filter((keyword) => keyword.isOfCons !== true)\r\n                        .map((keyword) => (\r\n                          <label key={keyword.id} className=\"  flex \">\r\n                            <input\r\n                              onClick={(e) => checkHandler(e)}\r\n                              type=\"checkbox\"\r\n                              id=\"keyword\"\r\n                              className=\" hidden peer\"\r\n                              value={keyword.name}\r\n                            />\r\n                            <div className=\" cursor-pointer whitespace-nowrap bg-gray-200 text-[#666676] peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 mt-1 text-sm text-center mx-[0.35rem] rounded-3xl border-[#BBBBBB] p-1  \">\r\n                              {/* {\r\n                              \" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-gray-200 text-[#666676] p-1 whitespace-nowrap\"\r\n                            } */}\r\n                              #{keyword.name}\r\n                            </div>\r\n                          </label>\r\n                        ))}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <summary style={{ listStyle: \"none\" }} className=\" mt-4 w-fit\">\r\n              <span className=\" hover:cursor-pointer hover:bg-gray-200  border-[0.5px] p-1 border-[#BBBBBB] rounded-md flex items-center\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"16\"\r\n                  height=\"16\"\r\n                  fill=\"currentColor\"\r\n                  className=\"bi bi-plus-circle-fill\"\r\n                  viewBox=\"0 0 16 16\"\r\n                >\r\n                  <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />{\" \"}\r\n                </svg>\r\n                &nbsp;\r\n                <span> 키워드 검색</span>\r\n              </span>\r\n            </summary>\r\n          </details>\r\n        </form>\r\n      </div>\r\n      <div className=\" w-full flex justify-center\">\r\n        <button\r\n          onClick={rerenderList}\r\n          className=\" hover:border-gray-400 hover:bg-gray-200 bg-white border-[0.5px] border-[#BBBBBB] rounded-md mt-2 p-1 w-2/3\"\r\n        >\r\n          새로고침\r\n        </button>\r\n      </div>\r\n      <FictionList\r\n        data={data}\r\n        type={\"fictions_list\"}\r\n        count={data?.fictions?.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport async function getStaticProps() {\r\n  // console.log(\"BUILDING fictions index Statically\");\r\n  const fictions = await client.fiction.findMany({\r\n    select: {\r\n      type: true,\r\n      // currentState: true,\r\n      nationality: true,\r\n      // volume: true,\r\n      // createdAt: true,\r\n      keywords: {\r\n        include: {\r\n          keyword: true,\r\n        },\r\n      },\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n      isTranslated: true,\r\n    },\r\n  });\r\n\r\n  const fictionsCount = await client.fiction.count({\r\n    where: {},\r\n  });\r\n\r\n  let keywords = await client.keyword.findMany();\r\n\r\n  let categories = await client.category.findMany();\r\n\r\n  // console.log(keywords.slice(5));\r\n\r\n  // keywords = keywords.filter(\r\n  //   (arr, index, callback) =>\r\n  //     index === callback.findIndex((t) => t.name === arr.name)\r\n  // );\r\n\r\n  // // genre 중복제거 (fiction.genre -> genre)\r\n  // let genres: Array<any> = [];\r\n  // fictions.map((fiction) => genres.push(fiction.genre));\r\n  // genres = [...new Set(genres)].filter((item) => item !== \"\");\r\n\r\n  // nationality 중복제거 (fiction.nationality -> nationality)\r\n  let nationalities: Array<any> = [];\r\n  fictions.map((fiction: any) => nationalities.push(fiction.nationality));\r\n  nationalities = [...new Set(nationalities)].filter((item) => item !== \"\");\r\n  // console.log(nationalities);\r\n\r\n  // console.log(fictions.slice(0, 2));\r\n\r\n  return {\r\n    props: {\r\n      // fictions: JSON.parse(JSON.stringify(fictions)),\r\n      fictionsCount: JSON.parse(JSON.stringify(fictionsCount)),\r\n      keywords: JSON.parse(JSON.stringify(keywords)),\r\n      nationalities: JSON.parse(JSON.stringify(nationalities)),\r\n      categories: JSON.parse(JSON.stringify(categories)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default Fictions;\r\n\r\n// const fictions = await client.fiction.findMany({\r\n//   include: {\r\n//     _count: {\r\n//       select: {\r\n//         favs: true,\r\n//       },\r\n//     },\r\n//   },\r\n// });\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[...params].tsx",["245"],[],"import {\r\n  Fiction,\r\n  Keyword,\r\n  FictionStat,\r\n  KeywordsOnFictions,\r\n  UserFictionStat,\r\n  Author,\r\n} from \"@prisma/client\";\r\nimport type { GetStaticPaths, NextPage } from \"next\";\r\nimport useSWR from \"swr\";\r\nimport client from \"@libs/server/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom } from \"../../atoms\";\r\n\r\ninterface UserFictionStatWithMore extends UserFictionStat {\r\n  _count: {\r\n    users: number;\r\n  };\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: [FictionStat];\r\n  userFictionStat: UserFictionStatWithMore;\r\n  author: Author;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionsResponse {\r\n  ok: boolean;\r\n  fictions: FictionWithMore[];\r\n  fictionsCount: number;\r\n  keywords: Keyword[];\r\n  categories: string[];\r\n  nationalities: string[];\r\n}\r\n\r\nconst FictionsWithParams: NextPage<FictionsResponse> = ({\r\n  keywords,\r\n  categories,\r\n  nationalities,\r\n}) => {\r\n  let [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n  let router = useRouter();\r\n  // console.log(router.query);\r\n  let queryString = \"\";\r\n  if (router.query.params) {\r\n    queryString = `/api/fictions?${\r\n      \"keywords=\" + (router?.query?.params[4]?.toString().split(\",\") || \"\")\r\n    }${\r\n      \"&nationalities=\" +\r\n      (router?.query?.params[0]?.toString().split(\",\") || \"\")\r\n    }${\"&genres=\" + (router?.query?.params[1]?.toString().split(\",\") || \"\")}${\r\n      \"&sorting=\" + (router?.query?.params[2] || \"\")\r\n    }${\"&page=\" + pageIndex}`;\r\n  }\r\n\r\n  let { data, error } = useSWR<FictionsResponse>(queryString);\r\n\r\n  // pageIndex 변경될때마다 router.push\r\n  useEffect(() => {\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${\r\n        Array.from(checkedSortings || \"총점\").join(\",\") || \"all\"\r\n      }/${pageIndex}/${Array.from(checkedItems).join(\",\") || \"all\"}`\r\n    );\r\n\r\n    if (router.query.params) {\r\n      queryString = `/api/fictions?${\r\n        \"keywords=\" + (router?.query?.params[4]?.toString().split(\",\") || \"\")\r\n      }${\r\n        \"&nationalities=\" +\r\n        (router?.query?.params[0]?.toString().split(\",\") || \"\")\r\n      }${\"&genres=\" + (router?.query?.params[1]?.toString().split(\",\") || \"\")}${\r\n        \"&sorting=\" + (router?.query?.params[2] || \"\")\r\n      }${\"&page=\" + pageIndex}`;\r\n    }\r\n  }, [pageIndex]);\r\n\r\n  //세부 필터링\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [checkedItems, setCheckedItems] = useState(new Set());\r\n  const [checkedGenres, setCheckedGenres] = useState(new Set());\r\n  const [checkedNationalities, setCheckedNationalities] = useState(new Set());\r\n  const [checkedSortings, setCheckedSortings] = useState(new Set());\r\n  const sortingList = [\r\n    \"총점\",\r\n    \"캐릭터성\",\r\n    \"오리지널리티\",\r\n    \"스토리\",\r\n    \"작품성\",\r\n    \"핍진성\",\r\n    \"필력\",\r\n    \"화수\",\r\n  ];\r\n\r\n  const checkHandler = ({\r\n    currentTarget,\r\n  }: React.MouseEvent<HTMLInputElement>) => {\r\n    setIsChecked(!isChecked);\r\n\r\n    checkedItemHandler(\r\n      currentTarget.parentNode,\r\n      currentTarget.value,\r\n      currentTarget.checked,\r\n      currentTarget.id,\r\n      currentTarget\r\n    );\r\n  };\r\n\r\n  const checkedItemHandler = (\r\n    box: any,\r\n    name: any,\r\n    isChecked: any,\r\n    id: any,\r\n    target: any\r\n  ) => {\r\n    // console.log(name);\r\n    // console.log(checkedItems);\r\n    // 키워드\r\n    if (isChecked && id === \"keyword\") {\r\n      checkedItems.add(name);\r\n      setCheckedItems(checkedItems);\r\n      // box.style.backgroundColor = \"blue\";\r\n      // box.style.color = \"white\";\r\n    } else if (!isChecked && checkedItems.has(name) && id === \"keyword\") {\r\n      checkedItems.delete(name);\r\n      setCheckedItems(checkedItems);\r\n    }\r\n    // 국가\r\n    if (isChecked && id === \"nationality\") {\r\n      checkedNationalities.add(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    } else if (\r\n      !isChecked &&\r\n      checkedNationalities.has(name) &&\r\n      id === \"nationality\"\r\n    ) {\r\n      checkedNationalities.delete(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    }\r\n    // 장르\r\n    if (isChecked && id === \"genre\") {\r\n      checkedGenres.add(name);\r\n      setCheckedGenres(checkedGenres);\r\n    } else if (!isChecked && checkedGenres.has(name) && id === \"genre\") {\r\n      checkedGenres.delete(name);\r\n      setCheckedGenres(checkedGenres);\r\n    }\r\n    // 정렬\r\n    if (isChecked && id === \"sorting\") {\r\n      checkedSortings.clear();\r\n      checkedSortings.add(name);\r\n      setCheckedSortings(checkedSortings);\r\n      // console.log(name);\r\n    } else if (!isChecked && checkedSortings.has(name) && id === \"sorting\") {\r\n      checkedSortings.delete(name);\r\n      setCheckedSortings(checkedSortings);\r\n    }\r\n  };\r\n\r\n  const buttonFlag = useRef(true);\r\n  const rerenderList = () => {\r\n    setPageIndex(1);\r\n\r\n    if (!buttonFlag.current) {\r\n      alert(\"새로고침은 5초마다 한번씩 가능합니다.\");\r\n      return;\r\n    }\r\n    buttonFlag.current = !buttonFlag.current;\r\n    setTimeout(() => {\r\n      buttonFlag.current = !buttonFlag.current;\r\n    }, 5000);\r\n    // setPageIndex(1);\r\n    // router.push({\r\n    //   pathname: \"/fictions\",\r\n    //   query: {\r\n    //     keywords: Array.from(checkedItems).join(\",\"),\r\n    //     nationalities: Array.from(checkedNationalities).join(\",\"),\r\n    //     genres: Array.from(checkedGenres).join(\",\"),\r\n    //     sorting: Array.from(checkedSortings).join(\",\"),\r\n    //     page: pageIndex,\r\n    //   },\r\n    // });\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${\r\n        Array.from(checkedSortings || \"총점\").join(\",\") || \"all\"\r\n      }/${pageIndex}/${Array.from(checkedItems).join(\",\") || \"all\"}`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\" mt-10 max-w-[1300px]\">\r\n      <div className=\" w-full justify-center\">\r\n        <form>\r\n          <div className=\"  bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n            <table className=\" leading-7\">\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <th>국가</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {nationalities.map((nationality, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          className=\" hidden peer\"\r\n                          id=\"nationality\"\r\n                          value={nationality}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px]\">\r\n                          {nationality}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>장르</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {categories.map((category: any, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          id=\"genre\"\r\n                          className=\" hidden peer\"\r\n                          value={category.name}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {category.name}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                  <th>정렬</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {sortingList.map((sorting, i) => (\r\n                      <label\r\n                        key={i}\r\n                        className=\" bg-white  cursor-pointer flex \"\r\n                      >\r\n                        <input\r\n                          // defaultChecked\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"radio\"\r\n                          className=\" hidden peer\"\r\n                          id=\"sorting\"\r\n                          value={sorting}\r\n                          name=\"sorting\"\r\n                        ></input>\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {sorting}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <details className=\" text-center\">\r\n            <div className=\" mt-5 bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n              <table className=\" leading-7\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <th className=\" min-w-[50px]\">키워드</th>\r\n                    <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                      {keywords\r\n                        .filter((keyword) => keyword.isOfCons !== true)\r\n                        .map((keyword) => (\r\n                          <label key={keyword.id} className=\"  flex \">\r\n                            <input\r\n                              onClick={(e) => checkHandler(e)}\r\n                              type=\"checkbox\"\r\n                              id=\"keyword\"\r\n                              className=\" hidden peer\"\r\n                              value={keyword.name}\r\n                            />\r\n                            <div className=\" cursor-pointer whitespace-nowrap bg-gray-200 text-[#666676] peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 mt-1 text-sm text-center mx-[0.35rem] rounded-3xl border-[#BBBBBB] p-1  \">\r\n                              #{keyword.name}\r\n                            </div>\r\n                          </label>\r\n                        ))}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <summary style={{ listStyle: \"none\" }} className=\" mt-4 w-fit\">\r\n              <span className=\" hover:cursor-pointer hover:bg-gray-200  border-[0.5px] p-1 border-[#BBBBBB] rounded-md flex items-center\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"16\"\r\n                  height=\"16\"\r\n                  fill=\"currentColor\"\r\n                  className=\"bi bi-plus-circle-fill\"\r\n                  viewBox=\"0 0 16 16\"\r\n                >\r\n                  <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />{\" \"}\r\n                </svg>\r\n                &nbsp;\r\n                <span> 키워드 검색</span>\r\n              </span>\r\n            </summary>\r\n          </details>\r\n        </form>\r\n      </div>\r\n      <div className=\" w-full flex justify-center\">\r\n        <button\r\n          onClick={rerenderList}\r\n          className=\" hover:border-gray-400 hover:bg-gray-200 bg-white border-[0.5px] border-[#BBBBBB] rounded-md mt-2 p-1 w-80\"\r\n        >\r\n          새로고침\r\n        </button>\r\n      </div>\r\n      <FictionList\r\n        data={data}\r\n        type={\"fictions_list\"}\r\n        count={data?.fictions?.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport async function getStaticProps() {\r\n  const fictions = await client.fiction.findMany({\r\n    select: {\r\n      keywords: {\r\n        include: {\r\n          keyword: true,\r\n        },\r\n      },\r\n      type: true,\r\n      currentState: true,\r\n      nationality: true,\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n      isTranslated: true,\r\n    },\r\n  });\r\n\r\n  const fictionsCount = await client.fiction.count({\r\n    where: {},\r\n  });\r\n\r\n  let keywords = await client.keyword.findMany();\r\n\r\n  let categories = await client.category.findMany();\r\n\r\n  let nationalities: Array<any> = [];\r\n  fictions.map((fiction: any) => nationalities.push(fiction.nationality));\r\n  nationalities = [...new Set(nationalities)].filter((item) => item !== \"\");\r\n\r\n  return {\r\n    props: {\r\n      // fictions: JSON.parse(JSON.stringify(fictions)),\r\n      fictionsCount: JSON.parse(JSON.stringify(fictionsCount)),\r\n      keywords: JSON.parse(JSON.stringify(keywords)),\r\n      nationalities: JSON.parse(JSON.stringify(nationalities)),\r\n      categories: JSON.parse(JSON.stringify(categories)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default FictionsWithParams;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\edit.tsx",["246","247"],[],"import Button from \"@components/button\";\r\nimport FictionRadarChart from \"@components/fictionRadarChart\";\r\nimport Input from \"@components/input\";\r\nimport Textarea from \"@components/textarea\";\r\nimport useMutation from \"@libs/client/useMutation\";\r\nimport {\r\n  Author,\r\n  Category,\r\n  Fiction,\r\n  Keyword,\r\n  KeywordsOnFictions,\r\n  UserRationOnFiction,\r\n} from \"@prisma/client\";\r\nimport type { NextPage } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { FieldErrors, useForm } from \"react-hook-form\";\r\nimport Image from \"next/image\";\r\nimport useSWR from \"swr\";\r\nimport dynamic from \"next/dynamic\";\r\n\r\nimport \"@uiw/react-md-editor/markdown-editor.css\";\r\nimport \"@uiw/react-markdown-preview/markdown.css\";\r\n\r\nconst MDEditor = dynamic(() => import(\"@uiw/react-md-editor\"), {\r\n  ssr: false,\r\n});\r\n\r\ninterface EditFictionForm {\r\n  title: string;\r\n  author: string;\r\n  nationality: string;\r\n  genre: string;\r\n  date: Date[];\r\n  status: number[];\r\n  synopsis: string;\r\n  characters: string;\r\n  currentState: string;\r\n  keywords: string[];\r\n  mcKeywords: string[];\r\n  subKeywords: string[];\r\n  consKeywords: string[];\r\n  original: string;\r\n  platforms: string[];\r\n  thumb?: FileList;\r\n  volume?: number;\r\n  isTranslated?: string;\r\n  relatedTitle?: string;\r\n  relatedAuthor?: string;\r\n  type?: string;\r\n  mediaMix?: string;\r\n  setup?: string;\r\n}\r\n\r\ninterface EditFictionMutation {\r\n  ok: boolean;\r\n  fiction: Fiction;\r\n}\r\n\r\ninterface FictionDetailResponse {\r\n  ok: boolean;\r\n  prevFiction: FictionWithMore;\r\n  similarFictions: Fiction[];\r\n  isLiked: boolean;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: {\r\n    originality: number;\r\n    writing: number;\r\n    character: number;\r\n    verisimilitude: number;\r\n    synopsisComposition: number;\r\n    value: number;\r\n  };\r\n  userFictionStat: { userRationOnFictions: [UserRationOnFiction] };\r\n  author: Author;\r\n  categories: [Category];\r\n}\r\n\r\nconst EditFiction: NextPage = () => {\r\n  ///setup MdEditor\r\n  const [md, setMd] = useState<string | undefined>(\"\");\r\n  const handleChange = useCallback((md: any) => {\r\n    setMd(md);\r\n  }, []);\r\n\r\n  // const { user, isLoading } = useUser();\r\n  const router = useRouter();\r\n  const { data: fiction } = useSWR<FictionDetailResponse>(\r\n    router.query.id ? `/api/fictions/${router.query.id}` : null\r\n  );\r\n  const [editFiction, { loading, data, error }] =\r\n    useMutation<EditFictionMutation>(`/api/fictions/${router.query.id}`);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    resetField,\r\n    watch,\r\n    formState: { errors },\r\n    setValue,\r\n  } = useForm<EditFictionForm>({ mode: \"onBlur\" });\r\n\r\n  //날짜변환 function\r\n  function formatDate(date: any) {\r\n    let d = new Date(date),\r\n      month = \"\" + (d.getMonth() + 1),\r\n      day = \"\" + d.getDate(),\r\n      year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = \"0\" + month;\r\n    if (day.length < 2) day = \"0\" + day;\r\n\r\n    return [year, month, day].join(\"-\");\r\n  }\r\n  // console.log(fiction?.prevFiction);\r\n  console.log(md);\r\n  // console.log(\r\n  //   fiction?.prevFiction?.categories.reduce(\r\n  //     (prev, cur) =>\r\n  //       (prev?.category?.name ?? \"\") + \" \" + (cur?.category?.name ?? \"\"),\r\n  //     \"\"\r\n  //   )\r\n  // );\r\n  useEffect(() => {\r\n    if (fiction) {\r\n      setValue(\"title\", fiction.prevFiction.title);\r\n      setValue(\"relatedTitle\", fiction.prevFiction.relatedTitle || \"\");\r\n      setValue(\"author\", fiction.prevFiction.author?.name || \"\");\r\n      setValue(\"relatedAuthor\", fiction.prevFiction.relatedAuthor || \"\");\r\n      setValue(\"nationality\", fiction.prevFiction.nationality);\r\n      setValue(\"type\", fiction.prevFiction.type || \"\");\r\n      setValue(\r\n        \"genre\",\r\n        fiction?.prevFiction?.categories\r\n          .reduce(\r\n            (prev: any, cur: any) =>\r\n              (prev?.category?.name ?? \"\") + \" \" + (cur?.category?.name ?? \"\"),\r\n            \"\"\r\n          )\r\n          .trim()\r\n      );\r\n      setValue(\"original\", fiction.prevFiction.original);\r\n      setValue(\"platforms\", [fiction.prevFiction.platforms]);\r\n      setValue(\"currentState\", fiction.prevFiction.currentState);\r\n      setValue(\"synopsis\", fiction.prevFiction.synopsis);\r\n      setValue(\"characters\", fiction.prevFiction.characters);\r\n      setValue(\"date.0\", formatDate(fiction.prevFiction.startDate) as any);\r\n      setValue(\"date.1\", formatDate(fiction.prevFiction.endDate) as any);\r\n      setValue(\"currentState\", fiction.prevFiction.currentState);\r\n      setValue(\"status.0\", fiction.prevFiction.fictionStat.originality);\r\n      setValue(\"status.1\", fiction.prevFiction.fictionStat.writing);\r\n      setValue(\"status.2\", fiction.prevFiction.fictionStat.character);\r\n      setValue(\"status.3\", fiction.prevFiction.fictionStat.verisimilitude);\r\n      setValue(\"status.4\", fiction.prevFiction.fictionStat.synopsisComposition);\r\n      setValue(\"status.5\", fiction.prevFiction.fictionStat.value);\r\n      setValue(\"volume\", fiction?.prevFiction.volume || 0);\r\n      setValue(\"mediaMix\", fiction.prevFiction.mediaMix || \"\");\r\n      setValue(\"isTranslated\", fiction.prevFiction.isTranslated || \"\");\r\n      if (md === \"\") {\r\n        setMd(fiction.prevFiction.setup || \"\");\r\n      }\r\n      // console.log(md);\r\n      // setValue(\"setup\", fiction.prevFiction.setup || \"\");\r\n      // Keywords, mcKeywords, subKeywords\r\n      fiction.prevFiction.keywords\r\n        .filter(\r\n          (item) =>\r\n            item.keyword.isOfHeroine === false &&\r\n            item.keyword.isOfMC === false &&\r\n            item.keyword.isOfCons === false\r\n        )\r\n        .map((item, i) => setValue(`keywords.${i}`, item.keyword.name));\r\n      fiction.prevFiction.keywords\r\n        .filter((item) => item.keyword.isOfMC === true)\r\n        .map((item, i) => setValue(`mcKeywords.${i}`, item.keyword.name));\r\n      fiction.prevFiction.keywords\r\n        .filter((item) => item.keyword.isOfHeroine === true)\r\n        .map((item, i) => setValue(`subKeywords.${i}`, item.keyword.name));\r\n      fiction.prevFiction.keywords\r\n        .filter((item) => item.keyword.isOfCons === true)\r\n        .map((item, i) => setValue(`consKeywords.${i}`, item.keyword.name));\r\n      // setValue(\"keywords.0\", \"asd\");\r\n    }\r\n  }, [fiction, setValue]);\r\n  // console.log(fiction);\r\n  // console.log(fiction?.prevFiction.genre);\r\n\r\n  const onValid = async (data: EditFictionForm) => {\r\n    if (loading) return;\r\n    if (data.thumb && data.thumb.length > 0) {\r\n      const { uploadURL } = await (await fetch(`/api/files`)).json();\r\n      const form = new FormData();\r\n      form.append(\"file\", data.thumb[0], data.title);\r\n      const {\r\n        result: { id },\r\n      } = await (await fetch(uploadURL, { method: \"POST\", body: form })).json();\r\n      editFiction({ ...data, thumbId: id, setup: md }, \"PUT\");\r\n    } else {\r\n      editFiction({ ...data, setup: md }, \"PUT\");\r\n    }\r\n    return;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data?.ok) {\r\n      router.push(`/fictions/${data.fiction.id}`);\r\n    }\r\n  }, [data, router]);\r\n  const [thumbPreview, setThumbPreview] = useState(\"\");\r\n  const thumb = watch(\"thumb\");\r\n\r\n  useEffect(() => {\r\n    if (thumb && thumb.length > 0) {\r\n      const file = thumb[0];\r\n      setThumbPreview(URL.createObjectURL(file));\r\n    }\r\n  }, [thumb]);\r\n\r\n  const onInvalid = (erros: FieldErrors) => {\r\n    if (loading) return;\r\n  };\r\n\r\n  /// watch state (react-hook-form)\r\n  let wKeywords: string[] = watch().keywords;\r\n  let wKeywords2: string[] = watch().mcKeywords;\r\n  let wKeywords3: string[] = watch().subKeywords;\r\n  let wKeywords4: string[] = watch().consKeywords;\r\n  let wStatus: number[] = watch().status;\r\n\r\n  const onKeyDown: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n    // console.log(wKeywords);\r\n\r\n    if (key === \",\" && wKeywords[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords.slice(1).includes(wKeywords[0].trim())) {\r\n        wKeywords[0] = wKeywords[0].trim();\r\n        wKeywords.filter((item) => item !== \" \");\r\n        setValue(\"keywords\", [wKeywords[0], ...wKeywords]);\r\n      }\r\n      // console.log(wKeywords);\r\n      resetField(\"keywords.0\");\r\n    }\r\n  };\r\n\r\n  const onKeyDown2: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords2[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords2.slice(1).includes(wKeywords2[0].trim())) {\r\n        wKeywords2[0] = wKeywords2[0].trim();\r\n        wKeywords2.filter((item) => item !== \" \");\r\n        setValue(\"mcKeywords\", [wKeywords2[0], ...wKeywords2]);\r\n      }\r\n      // console.log(wKeywords2);\r\n      resetField(\"mcKeywords.0\");\r\n    }\r\n  };\r\n\r\n  const onKeyDown3: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords3[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords3.slice(1).includes(wKeywords3[0].trim())) {\r\n        wKeywords3[0] = wKeywords3[0].trim();\r\n        wKeywords3.filter((item) => item !== \" \");\r\n        setValue(\"subKeywords\", [wKeywords3[0], ...wKeywords3]);\r\n      }\r\n      // console.log(wKeywords3);\r\n      resetField(\"subKeywords.0\");\r\n    }\r\n  };\r\n\r\n  const onKeyDown4: any = (e: any) => {\r\n    const { key } = e;\r\n    console.log(key);\r\n\r\n    if (key === \",\" && wKeywords4[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords4.slice(1).includes(wKeywords4[0].trim())) {\r\n        wKeywords4[0] = wKeywords4[0].trim();\r\n        wKeywords4.filter((item) => item !== \" \");\r\n        setValue(\"consKeywords\", [wKeywords4[0], ...wKeywords4]);\r\n      }\r\n      console.log(wKeywords4);\r\n      resetField(\"consKeywords.0\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <form className=\" w-[90vw]\" onSubmit={handleSubmit(onValid, onInvalid)}>\r\n          <div className=\" max-w-[1500px]\">\r\n            <div className=\" grid grid-cols-1 sm:grid-cols-5 \">\r\n              <div className=\" bg-white col-span-2 mx-5 mt-7 h-fit border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                <div className=\" min-h-[330px] w-full\">\r\n                  {thumbPreview ? (\r\n                    <label className=\" relative pb-100 w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <Image\r\n                        className=\" object-cover\"\r\n                        src={thumbPreview || \"/\"}\r\n                        layout=\"fill\"\r\n                      />\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  ) : (\r\n                    <label className=\"w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <svg\r\n                        className=\"h-12 w-12\"\r\n                        stroke=\"currentColor\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 48 48\"\r\n                        aria-hidden=\"true\"\r\n                      >\r\n                        <path\r\n                          d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                          strokeWidth={2}\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                        />\r\n                      </svg>\r\n\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  )}\r\n                </div>\r\n                <div className=\" px-4 py-3\">\r\n                  <Input\r\n                    register={register(\"title\", { required: true })}\r\n                    required\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedTitle\", { required: false })}\r\n                    required={false}\r\n                    label=\"RelatedTitle\"\r\n                    name=\"relatedTitle\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"author\", { required: true })}\r\n                    required\r\n                    label=\"Author\"\r\n                    name=\"author\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedAuthor\", { required: false })}\r\n                    required={false}\r\n                    label=\"RelatedAuthor\"\r\n                    name=\"relatedAuthor\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"type\", { required: false })}\r\n                    required={false}\r\n                    label=\"Type\"\r\n                    name=\"type\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"nationality\", { required: true })}\r\n                    required\r\n                    label=\"Nationality\"\r\n                    name=\"nationality\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"genre\")}\r\n                    required\r\n                    label=\"Genre\"\r\n                    name=\"genre\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <div className=\" flex relative items-center justify-between\">\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.0\")}\r\n                        required\r\n                        label=\"StartDate\"\r\n                        name=\"startDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.1\")}\r\n                        required\r\n                        label=\"EndDate\"\r\n                        name=\"endDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <Input\r\n                    register={register(\"original\", { required: true })}\r\n                    required\r\n                    label=\"Original\"\r\n                    name=\"original\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"platforms.0\")}\r\n                    required\r\n                    label=\"Platforms\"\r\n                    name=\"platforms\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"currentState\")}\r\n                    required\r\n                    label=\"CurrentState\"\r\n                    name=\"currentState\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"volume\")}\r\n                    required\r\n                    label=\"Volume\"\r\n                    name=\"volume\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"mediaMix\")}\r\n                    required={false}\r\n                    label=\"MediaMix\"\r\n                    name=\"mediaMix\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"isTranslated\", { required: false })}\r\n                    required={false}\r\n                    label=\"IsTranslated\"\r\n                    name=\"isTranslated\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\" col-span-3 mx-5 mt-7\">\r\n                <div className=\" grid  sm:grid-cols-1\">\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"keywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords = wKeywords.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"keywords\", wKeywords);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Mc Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"mcKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown2}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords2\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords2 = wKeywords2.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"mcKeywords\", wKeywords2);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Sub Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"subKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown3}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords3\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords3 = wKeywords3.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"subKeywords\", wKeywords3);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Cons Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"consKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown4}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords4\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords4 = wKeywords4.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"consKeywords\", wKeywords4);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n\r\n                  <div className=\" h-max bg-white mb-10 w-full border-[0.5px] border-[#BBBBBB] rounded-md overflow-x-auto\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">graphs and charts</h2>\r\n                    <FictionRadarChart props={wStatus} />\r\n                    <div className=\" grid grid-cols-2 mx-2\">\r\n                      <Input\r\n                        register={register(\"status.0\", {\r\n                          max: 5,\r\n                          min: 0,\r\n                        })}\r\n                        required\r\n                        label=\"오리지널리티\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.1\")}\r\n                        required\r\n                        label=\"필력\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.2\")}\r\n                        required\r\n                        label=\"캐릭터성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.3\")}\r\n                        required\r\n                        label=\"핍진성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.4\")}\r\n                        required\r\n                        label=\"스토리\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.5\")}\r\n                        required\r\n                        label=\"작품성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\" mx-5 my-7 bg-white px-3 py-3 border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n              <Textarea\r\n                register={register(\"synopsis\")}\r\n                name=\"synopsis\"\r\n                label=\"Synopsis\"\r\n                required\r\n              />\r\n              <Textarea\r\n                register={register(\"characters\")}\r\n                name=\"characters\"\r\n                label=\"Characters\"\r\n                required\r\n              />\r\n              {/* <Textarea\r\n                register={register(\"setup\")}\r\n                name=\"setup\"\r\n                label=\"Setup\"\r\n                required\r\n              /> */}\r\n              <MDEditor value={md} onChange={handleChange} />\r\n            </div>\r\n          </div>\r\n          <Button text={loading ? \"Loading...\" : \"저장\"} />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditFiction;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\index.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\index.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\edit.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\index.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\ranking\\index.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\index.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\index.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\[page].tsx",["248"],[],"import type {\r\n  GetStaticPaths,\r\n  GetStaticProps,\r\n  GetStaticPropsContext,\r\n  NextPage,\r\n} from \"next\";\r\nimport client from \"@libs/server/client\";\r\nimport { Fiction } from \"@prisma/client\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom } from \"../../../../atoms\";\r\nimport { useRouter } from \"next/router\";\r\n\r\ninterface IParams extends ParsedUrlQuery {\r\n  page: string;\r\n}\r\n\r\ninterface dataResponse {\r\n  fictions: [Fiction];\r\n  fictionsCount: number;\r\n}\r\n\r\nconst SearchKeywordPage: NextPage<dataResponse> = (data) => {\r\n  let router = useRouter();\r\n  const [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n\r\n  const { search } = router.query;\r\n\r\n  useEffect(() => {\r\n    router.push(`/search/keyword/${search}/${pageIndex}`);\r\n  }, [pageIndex]);\r\n\r\n  return (\r\n    <section className=\"  w-[100vw] max-w-[1300px] min-h-[213px] \">\r\n      <div className=\" bg-slate-100 mb-7 pl-6 py-4\">\r\n        <h5 className=\" font-bold\">키워드: {router.query.search}</h5>\r\n      </div>\r\n      <div className=\" mx-3\">\r\n        <FictionList\r\n          className=\" \"\r\n          data={data}\r\n          type={\"fictions_list\"}\r\n          count={data.fictionsCount}\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport const getStaticProps: GetStaticProps = async (\r\n  ctx: GetStaticPropsContext\r\n) => {\r\n  const { page, search } = ctx.params as IParams;\r\n  if (!page || !search) {\r\n    return {\r\n      props: {},\r\n    };\r\n  }\r\n\r\n  const fictions = await client.fiction.findMany({\r\n    take: 18,\r\n    skip: (+page - 1) * 18,\r\n    where: {\r\n      keywords: {\r\n        some: {\r\n          keyword: {\r\n            name: search as string,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    include: {\r\n      _count: {\r\n        select: {\r\n          favs: true,\r\n        },\r\n      },\r\n      author: true,\r\n      userFictionStat: {\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              users: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      keywords: {\r\n        include: {\r\n          keyword: true,\r\n        },\r\n      },\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  const fictionsCount = await client.fiction.count({\r\n    where: {\r\n      keywords: {\r\n        some: {\r\n          keyword: {\r\n            name: search as string,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    props: {\r\n      fictions: JSON.parse(JSON.stringify(fictions)),\r\n      fictionsCount: JSON.parse(JSON.stringify(fictionsCount)),\r\n    },\r\n  };\r\n};\r\n\r\nexport default SearchKeywordPage;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\title\\[search].tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\tailwind.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\_app.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\button.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\carousel.tsx",["249","250","251","252","253","254"],[],"import next from \"next\";\r\nimport { useState, useEffect, useRef, TouchEvent } from \"react\";\r\n\r\nexport default function Carousel() {\r\n  const [currentSlide, setCurrentSlide] = useState(0);\r\n  // const [offSet, setOffSet] = useState(0);\r\n  // const slideRef = useRef(\"\");\r\n\r\n  // window.onload = function touchControll() {\r\n  //   const screenWidth = imgCon?.clientWidth;\r\n  //   let imgCon = document.querySelector(\"#img_container\");\r\n\r\n  //   imgCon?.addEventListener(\"touchstart\", (e) => {\r\n  //     // startPos = e.touches[0].pageX;\r\n  //     console.log(\"2222\");\r\n  //   });\r\n  // };\r\n\r\n  const TOTAL_SLIDES = 2;\r\n\r\n  const slideI = () => {\r\n    let pos = 0;\r\n    setInterval(() => {\r\n      pos = (pos + 1) % 3;\r\n      let target = document.querySelector(`#img_div_${pos}`);\r\n      target?.classList.add(\"-ml-[100%]\");\r\n    }, 2000);\r\n  };\r\n\r\n  const nextSlide = () => {\r\n    if (currentSlide >= TOTAL_SLIDES) {\r\n      setCurrentSlide(0);\r\n    } else {\r\n      setCurrentSlide(currentSlide + 1);\r\n    }\r\n  };\r\n\r\n  const changeSlide = (index: number) => {\r\n    setCurrentSlide(index);\r\n  };\r\n\r\n  const prevSlide = () => {\r\n    if (currentSlide === 0) {\r\n      setCurrentSlide(TOTAL_SLIDES);\r\n    } else {\r\n      setCurrentSlide(currentSlide - 1);\r\n    }\r\n  };\r\n\r\n  // //touch slide\r\n  // let startPos = 0;\r\n\r\n  // let curPos = 0;\r\n\r\n  // const touchStart = (event: any) => {\r\n  //   let imgCon = document.querySelector(\"#img_container\");\r\n  //   console.log(event?.touches[0].pageX);\r\n  // };\r\n\r\n  // const touchMove = (event: any) => {\r\n  //   let imgICon = document.querySelector(\"#img_inner_container\");\r\n\r\n  //   setOffSet(\r\n  //     Math.round((curPos + (event.targetTouches[0].pageX - startPos)) / 100) *\r\n  //       100\r\n  //   );\r\n  // };\r\n\r\n  // const touchEnd = (event: any) => {\r\n  //   // let imgCon = document.querySelector(\"#img_container\");\r\n  //   // const screenWidth: any = imgCon?.clientWidth;\r\n  //   // const sum = curPos + (event?.touches[0]?.pageX - startPos);\r\n  //   // let destination = Math.round(sum / screenWidth) * screenWidth;\r\n  //   // if (destination > 0) {\r\n  //   //   destination = 0;\r\n  //   // } else if (destination < -(screenWidth * (3 - 1))) {\r\n  //   //   destination = -(screenWidth * (3 - 1));\r\n  //   // }\r\n\r\n  //   // console.log(event?.touches[0]?.pageX);\r\n  //   console.log(offSet);\r\n  //   console.log(\"touchend\");\r\n  // };\r\n\r\n  //   //touch slide end\r\n\r\n  useEffect(() => {\r\n    // slideRef.current = `-ml-[${100 * currentSlide}%]`;\r\n\r\n    let cur = `-ml-[${100 * currentSlide}%]`;\r\n    console.log(cur);\r\n    console.log(currentSlide);\r\n    let imgICon = document.querySelector(\"#img_inner_container\");\r\n    imgICon?.classList.remove(\"-ml-[0%]\");\r\n    imgICon?.classList.remove(\"-ml-[100%]\");\r\n    imgICon?.classList.remove(\"-ml-[200%]\");\r\n    imgICon?.classList.remove(\"-ml-[300%]\");\r\n    imgICon?.classList.add(cur);\r\n\r\n    let indexBCon = document.querySelector(\"#indexButtonContainer\");\r\n    indexBCon?.children[0].classList.replace(\"bg-blue-200\", \"bg-black\");\r\n    indexBCon?.children[1].classList.replace(\"bg-blue-200\", \"bg-black\");\r\n    indexBCon?.children[2].classList.replace(\"bg-blue-200\", \"bg-black\");\r\n    indexBCon?.children[currentSlide].classList.replace(\r\n      \"bg-black\",\r\n      \"bg-blue-200\"\r\n    );\r\n\r\n    // let imgCon = document.querySelector(\"#img_container\");\r\n    // imgCon.className = ` translate-x-[${offSet}px] transition-all duration-[0ms]`;\r\n    // imgCon?.addEventListener(\"touchstart\", (e: any) => {\r\n    //   // startPos = e.changedTouches;\r\n    //   console.log(e.changedTouches[0].pageX);\r\n    // });\r\n  }, [currentSlide]);\r\n\r\n  // useEffect(() => {\r\n  //   let imgCon = document.querySelector(\"#img_container\");\r\n  //   imgCon.className = ` translate-x-[${offSet}px] transition-all duration-[0ms]`;\r\n  //   console.log(\"hi22\");\r\n  //   console.log(offSet);\r\n  // }, [offSet]);\r\n\r\n  return (\r\n    <div className=\" h-[45vh] overflow-hidden w-[100vw] max-h-[250px] min-h-[213px] relative left-1/2 right-1/2 -ml-[50vw] -mr-[50vw]\">\r\n      <div\r\n        className=\" \"\r\n        id=\"img_container\"\r\n        // onTouchStart={touchStart}\r\n        // onTouchMove={touchMove}\r\n        // onTouchEnd={touchEnd}\r\n      >\r\n        <div\r\n          id=\"img_inner_container\"\r\n          className=\" overflow-hidden flex w-[300%] transition-all duration-1000 relative\"\r\n        >\r\n          <div className=\" h-[250px] w-[100%] \" id=\"img_div_1\">\r\n            <img\r\n              src=\"https://picsum.photos/1422/362?random=1\"\r\n              className=\" h-full w-full\"\r\n            ></img>\r\n          </div>\r\n          <div className=\" h-[250px] w-[100%] \" id=\"img_div_2\">\r\n            <img\r\n              src=\"https://picsum.photos/1422/362?random=2\"\r\n              className=\" h-full w-full\"\r\n            ></img>\r\n          </div>\r\n          <div className=\" h-[250px] w-[100%] \" id=\"img_div_3\">\r\n            <img\r\n              src=\"https://picsum.photos/1422/362?random=3\"\r\n              className=\" h-full w-full\"\r\n            ></img>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex justify-between mx-5 space-x-8 relative bottom-36 opacity-60\">\r\n        <button\r\n          onClick={prevSlide}\r\n          className=\" bg-black text-white hover:text-black border-solid px-2 py-5 hover:bg-white transition-all  rounded-xl font-bold\"\r\n        >\r\n          &lt;\r\n        </button>\r\n        <button\r\n          onClick={nextSlide}\r\n          className=\" bg-black text-white hover:text-black border-solid px-2 py-5 hover:bg-white transition-all rounded-xl font-bold\"\r\n        >\r\n          &gt;\r\n        </button>\r\n      </div>\r\n      <div\r\n        id=\"indexButtonContainer\"\r\n        className=\" absolute top-[85%] left-1/2 -translate-x-1/2 opacity-60\"\r\n      >\r\n        <button\r\n          onClick={(e) => changeSlide(0)}\r\n          className=\" bg-black rounded-xl w-4 h-4 hover:bg-white transition-all\"\r\n        ></button>\r\n        <button\r\n          onClick={(e) => changeSlide(1)}\r\n          className=\" bg-black rounded-xl w-4 h-4 mx-8 hover:bg-white transition-all\"\r\n        ></button>\r\n        <button\r\n          onClick={(e) => changeSlide(2)}\r\n          className=\" bg-black rounded-xl w-4 h-4 hover:bg-white transition-all \"\r\n        ></button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionList.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionRadarChart.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\footer.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\gnb.tsx",["255"],[],"import Link from \"next/link\";\r\nimport { useSession, signIn, signOut } from \"next-auth/react\";\r\nimport useUser from \"@libs/client/useUser\";\r\nimport Image from \"next/image\";\r\nimport logo from \"../public/fdb_logo.png\";\r\n\r\nexport default function Gnb() {\r\n  const { data: nextSession } = useSession();\r\n  const { user, isLoading } = useUser();\r\n  // const { data: CredentailSession } = useSWR(\"/api/users/me\");\r\n  // console.log(user);\r\n  // console.log(nextSession);\r\n  // useEffect(() => {\r\n  //   if (data && !data.ok) {\r\n  //     router.replace(\"/enter\");\r\n  //   }\r\n  // }, [data, router]);\r\n  // console.log(data);\r\n  return (\r\n    <header className=\"flex bg-blue-200 fixed top-0 w-full py-2 z-20\">\r\n      <nav className=\"flex w-full justify-between items-center\">\r\n        <ul className=\"flex uppercase font-bold \">\r\n          <li className=\" ml-3 mr-3 cursor-pointer\">\r\n            <Link className=\" \" href=\"/\" passHref>\r\n              <a className=\" flex items-center \">\r\n                <Image\r\n                  className=\" rounded-xl border-blue-800 border-4 border-solid\"\r\n                  src={logo}\r\n                  width={26}\r\n                  height={26}\r\n                ></Image>\r\n              </a>\r\n            </Link>\r\n          </li>\r\n          <li className=\"mr-3\">\r\n            <Link href=\"/fictions/all/all/all/1/all\">\r\n              <a>작품</a>\r\n            </Link>\r\n          </li>\r\n          <li className=\"mr-3\">\r\n            <Link href=\"/authors/1\" passHref>\r\n              <a>작가</a>\r\n            </Link>\r\n          </li>\r\n          {/* <Link href=\"/ranking\">\r\n            <li className=\"mr-3\">Ranking</li>\r\n          </Link> */}\r\n          {user ? (\r\n            <li className=\"mr-3\">\r\n              <Link href=\"/fictions/create\">\r\n                <a>Create</a>\r\n              </Link>\r\n            </li>\r\n          ) : null}\r\n        </ul>\r\n        <ul className=\" flex font-bold items-center\">\r\n          {user ? <li className=\"mr-3\">Admin</li> : null}\r\n          {nextSession ? (\r\n            <li className=\" mr-3 p-0 flex items-center cursor-pointer min-w-[26px]\">\r\n              <Link className=\" rounded-full\" href=\"/profile\" passHref>\r\n                <a className=\" flex items-center\">\r\n                  <Image\r\n                    className=\" rounded-full\"\r\n                    src={nextSession.user!.image ?? \"\"}\r\n                    width={26}\r\n                    height={26}\r\n                    alt={nextSession.user!.id ?? \"\"}\r\n                  ></Image>\r\n                </a>\r\n              </Link>\r\n            </li>\r\n          ) : null}\r\n          {nextSession ? (\r\n            <button className=\" mr-5 font-bold\" onClick={() => signOut()}>\r\n              Sign out\r\n            </button>\r\n          ) : (\r\n            <li>\r\n              <Link href=\"/enter\">\r\n                <a className=\" mr-5 hover:cursor-pointer\">Enter</a>\r\n              </Link>\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\input.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\mdEditor.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\search.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\textarea.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\top.tsx",[],[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\userStat.tsx",[],[],{"ruleId":"256","severity":1,"message":"257","line":29,"column":6,"nodeType":"258","endLine":29,"endColumn":23,"suggestions":"259"},{"ruleId":"256","severity":1,"message":"260","line":43,"column":6,"nodeType":"258","endLine":43,"endColumn":17,"suggestions":"261"},{"ruleId":"262","severity":1,"message":"263","line":195,"column":23,"nodeType":"264","endLine":199,"endColumn":25},{"ruleId":"256","severity":1,"message":"265","line":70,"column":21,"nodeType":"266","endLine":77,"endColumn":32},{"ruleId":"256","severity":1,"message":"265","line":77,"column":21,"nodeType":"266","endLine":84,"endColumn":32},{"ruleId":"256","severity":1,"message":"267","line":191,"column":6,"nodeType":"258","endLine":191,"endColumn":25,"suggestions":"268"},{"ruleId":"262","severity":1,"message":"263","line":316,"column":23,"nodeType":"264","endLine":320,"endColumn":25},{"ruleId":"256","severity":1,"message":"269","line":33,"column":6,"nodeType":"258","endLine":33,"endColumn":17,"suggestions":"270"},{"ruleId":"271","severity":1,"message":"272","line":138,"column":13,"nodeType":"264","endLine":141,"endColumn":14},{"ruleId":"262","severity":1,"message":"273","line":138,"column":13,"nodeType":"264","endLine":141,"endColumn":14},{"ruleId":"271","severity":1,"message":"272","line":144,"column":13,"nodeType":"264","endLine":147,"endColumn":14},{"ruleId":"262","severity":1,"message":"273","line":144,"column":13,"nodeType":"264","endLine":147,"endColumn":14},{"ruleId":"271","severity":1,"message":"272","line":150,"column":13,"nodeType":"264","endLine":153,"endColumn":14},{"ruleId":"262","severity":1,"message":"273","line":150,"column":13,"nodeType":"264","endLine":153,"endColumn":14},{"ruleId":"262","severity":1,"message":"263","line":26,"column":17,"nodeType":"264","endLine":31,"endColumn":18},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'router' and 'setAuthorPageIndex'. Either include them or remove the dependency array.","ArrayExpression",["274"],"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["275"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Assignments to the 'queryString' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","TemplateLiteral","React Hook useEffect has a missing dependency: 'md'. Either include it or remove the dependency array.",["276"],"React Hook useEffect has missing dependencies: 'router' and 'search'. Either include them or remove the dependency array.",["277"],"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},"Update the dependencies array to be: [authorPageIndex, router, setAuthorPageIndex]",{"range":"286","text":"287"},"Update the dependencies array to be: [pageIndex, router]",{"range":"288","text":"289"},"Update the dependencies array to be: [fiction, md, setValue]",{"range":"290","text":"291"},"Update the dependencies array to be: [pageIndex, router, search]",{"range":"292","text":"293"},[991,1008],"[authorPageIndex, router, setAuthorPageIndex]",[1084,1095],"[pageIndex, router]",[6383,6402],"[fiction, md, setValue]",[897,908],"[pageIndex, router, search]"]