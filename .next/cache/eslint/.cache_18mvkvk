[{"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\auth\\[...nextauth].js":"1","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\client.ts":"2","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\comments.ts":"3","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\index.ts":"4","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\comment.ts":"5","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\fav.ts":"6","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\index.ts":"7","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\userRate.ts":"8","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\files.ts":"9","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\keyword\\[search].ts":"10","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\title\\[search].ts":"11","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\confirm.tsx":"12","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\enter.tsx":"13","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\favs.ts":"14","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\index.tsx":"15","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\index.tsx":"16","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\name\\[slug]\\index.tsx":"17","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\[page].tsx":"18","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\enter.tsx":"19","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\create.tsx":"20","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\index.tsx":"21","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[...params].tsx":"22","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\edit.tsx":"23","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\index.tsx":"24","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\index.tsx":"25","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\edit.tsx":"26","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\index.tsx":"27","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\ranking\\index.tsx":"28","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\index.tsx":"29","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\index.tsx":"30","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\[page].tsx":"31","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\title\\[search].tsx":"32","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\tailwind.tsx":"33","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\_app.tsx":"34","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\button.tsx":"35","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\carousel.tsx":"36","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionList.tsx":"37","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionRadarChart.tsx":"38","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\footer.tsx":"39","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\gnb.tsx":"40","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\input.tsx":"41","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\mdEditor.tsx":"42","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\search.tsx":"43","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\textarea.tsx":"44","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\top.tsx":"45","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\userStat.tsx":"46"},{"size":817,"mtime":1665057725518,"results":"47","hashOfConfig":"48"},{"size":84,"mtime":1664704286063,"results":"49","hashOfConfig":"48"},{"size":1340,"mtime":1665057796533,"results":"50","hashOfConfig":"48"},{"size":8500,"mtime":1664867843326,"results":"51","hashOfConfig":"48"},{"size":1084,"mtime":1665057821471,"results":"52","hashOfConfig":"48"},{"size":1503,"mtime":1664876989389,"results":"53","hashOfConfig":"48"},{"size":7766,"mtime":1665057851650,"results":"54","hashOfConfig":"48"},{"size":9717,"mtime":1665058578264,"results":"55","hashOfConfig":"48"},{"size":819,"mtime":1665058090087,"results":"56","hashOfConfig":"48"},{"size":1687,"mtime":1664704286077,"results":"57","hashOfConfig":"48"},{"size":1416,"mtime":1664704286080,"results":"58","hashOfConfig":"48"},{"size":806,"mtime":1664704286083,"results":"59","hashOfConfig":"48"},{"size":1744,"mtime":1665043989691,"results":"60","hashOfConfig":"48"},{"size":690,"mtime":1665058167718,"results":"61","hashOfConfig":"48"},{"size":870,"mtime":1664704286088,"results":"62","hashOfConfig":"48"},{"size":1976,"mtime":1665058351006,"results":"63","hashOfConfig":"48"},{"size":3046,"mtime":1665043704000,"results":"64","hashOfConfig":"48"},{"size":1946,"mtime":1665058429889,"results":"65","hashOfConfig":"48"},{"size":6805,"mtime":1665058116350,"results":"66","hashOfConfig":"48"},{"size":21775,"mtime":1665035400315,"results":"67","hashOfConfig":"48"},{"size":14891,"mtime":1665043587573,"results":"68","hashOfConfig":"48"},{"size":14122,"mtime":1665043551158,"results":"69","hashOfConfig":"48"},{"size":26199,"mtime":1665058445632,"results":"70","hashOfConfig":"48"},{"size":23576,"mtime":1665043624561,"results":"71","hashOfConfig":"48"},{"size":2063,"mtime":1665043473277,"results":"72","hashOfConfig":"48"},{"size":290,"mtime":1665044061433,"results":"73","hashOfConfig":"48"},{"size":2872,"mtime":1665043391171,"results":"74","hashOfConfig":"48"},{"size":294,"mtime":1665043407062,"results":"75","hashOfConfig":"48"},{"size":1374,"mtime":1665043459605,"results":"76","hashOfConfig":"48"},{"size":2842,"mtime":1665043444842,"results":"77","hashOfConfig":"48"},{"size":2854,"mtime":1665043436556,"results":"78","hashOfConfig":"48"},{"size":963,"mtime":1665043451953,"results":"79","hashOfConfig":"48"},{"size":4327,"mtime":1665043479078,"results":"80","hashOfConfig":"48"},{"size":1121,"mtime":1665038391238,"results":"81","hashOfConfig":"48"},{"size":662,"mtime":1665043719738,"results":"82","hashOfConfig":"48"},{"size":6604,"mtime":1665043148532,"results":"83","hashOfConfig":"48"},{"size":21256,"mtime":1665043011935,"results":"84","hashOfConfig":"48"},{"size":3712,"mtime":1665058490287,"results":"85","hashOfConfig":"48"},{"size":295,"mtime":1665042635813,"results":"86","hashOfConfig":"48"},{"size":3053,"mtime":1665042685581,"results":"87","hashOfConfig":"48"},{"size":6675,"mtime":1665042707221,"results":"88","hashOfConfig":"48"},{"size":577,"mtime":1665042732787,"results":"89","hashOfConfig":"48"},{"size":1672,"mtime":1664774751373,"results":"90","hashOfConfig":"48"},{"size":778,"mtime":1665042755408,"results":"91","hashOfConfig":"48"},{"size":121,"mtime":1665042764856,"results":"92","hashOfConfig":"48"},{"size":8219,"mtime":1665043732496,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9o4627",{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\auth\\[...nextauth].js",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\client.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\comments.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\index.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\comment.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\fav.ts",["207"],"import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport withHandler, { ResponseType } from \"@libs/server/withHandler\";\r\nimport client from \"@libs/server/client\";\r\nimport { withApiSession } from \"@libs/server/withSession\";\r\nimport { getSession } from \"next-auth/react\";\r\n\r\nasync function handler(\r\n  req: NextApiRequest,\r\n  res: NextApiResponse<ResponseType>\r\n) {\r\n  let isLiked;\r\n  const {\r\n    query: { id },\r\n    session: { user },\r\n  } = req;\r\n  const session = await getSession({ req });\r\n\r\n  const alreadyExists = await client.fav.findFirst({\r\n    where: {\r\n      fictionId: +id!.toString(),\r\n      userId: session?.user?.id,\r\n    },\r\n  });\r\n  if (req.method === \"GET\") {\r\n    // console.log(\"faved\");\r\n    if (alreadyExists) isLiked = true;\r\n    else isLiked = false;\r\n  } else if (req.method === \"POST\") {\r\n    if (alreadyExists) {\r\n      //delete\r\n      await client.fav.delete({\r\n        where: {\r\n          id: alreadyExists.id,\r\n        },\r\n      });\r\n      isLiked = false;\r\n    } else {\r\n      //create\r\n      await client.fav.create({\r\n        data: {\r\n          user: {\r\n            connect: {\r\n              id: session?.user?.id,\r\n            },\r\n          },\r\n          fiction: {\r\n            connect: {\r\n              id: +id!.toString(),\r\n            },\r\n          },\r\n        },\r\n      });\r\n      isLiked = true;\r\n    }\r\n  }\r\n\r\n  res.json({ isLiked, ok: true });\r\n}\r\n\r\nexport default withApiSession(\r\n  withHandler({\r\n    methods: [\"GET\", \"POST\"],\r\n    handler,\r\n  })\r\n);\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\index.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\fictions\\[id]\\userRate.ts",["208"],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\files.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\keyword\\[search].ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\search\\title\\[search].ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\confirm.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\enter.tsx",["209","210","211"],"import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport withHandler, { ResponseType } from \"@libs/server/withHandler\";\r\nimport client from \"@libs/server/client\";\r\nimport twilio from \"twilio\";\r\nimport mail from \"@sendgrid/mail\";\r\nimport sgMail from \"@sendgrid/mail\";\r\n\r\nsgMail.setApiKey(process.env.SENDGRID_API_KEY!);\r\n\r\nconst twilioClient = twilio(process.env.TWILIO_SID, process.env.TWILIO_TOKEN);\r\n\r\nasync function handler(\r\n  req: NextApiRequest,\r\n  res: NextApiResponse<ResponseType>\r\n) {\r\n  const { phone, email } = req.body;\r\n  const user = phone ? { phone: phone } : email ? { email } : null;\r\n  if (!user) return res.status(400).json({ ok: false });\r\n\r\n  const payload = Math.floor(100000 + Math.random() * 900000) + \"\";\r\n\r\n  const token = await client.token.create({\r\n    data: {\r\n      payload,\r\n      user: {\r\n        connectOrCreate: {\r\n          where: {\r\n            ...user,\r\n          },\r\n          create: {\r\n            name: \"Anonymous\",\r\n            ...user,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  if (phone) {\r\n    const message = await twilioClient.messages.create({\r\n      messagingServiceSid: process.env.TWILIO_MSID,\r\n      to: process.env.MY_PHONE!,\r\n      body: `Your login token is ${payload}`,\r\n    });\r\n    // console.log(message);\r\n  } else if (email) {\r\n    const email = await mail.send({\r\n      from: { email: \"mk44879@naver.com\" },\r\n      to: \"mk44879@naver.com\",\r\n      subject: \"Your Fdbs Verification Email\",\r\n      text: `Your token is ${payload}`,\r\n      html: `<strong>Your token is ${payload}</strong>`,\r\n    });\r\n    // console.log(email);\r\n  }\r\n\r\n  return res.json({\r\n    ok: true,\r\n  });\r\n}\r\n\r\nexport default withHandler({ methods: [\"POST\"], handler, isPrivate: false });\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\favs.ts",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\api\\users\\me\\index.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\index.tsx",["212"],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\name\\[slug]\\index.tsx",["213"],"import React from \"react\";\r\nimport type {\r\n  GetStaticPaths,\r\n  GetStaticProps,\r\n  GetStaticPropsContext,\r\n  NextPage,\r\n} from \"next\";\r\nimport client from \"@libs/server/client\";\r\nimport { Fiction, Author } from \"@prisma/client\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\nimport FictionList from \"@components/fictionList\";\r\n\r\ninterface AuthorWithFictions extends Author {\r\n  fictions: Fiction[];\r\n}\r\n\r\ninterface AuthorResponse {\r\n  author: AuthorWithFictions;\r\n}\r\n\r\n// type Props = {\r\n//   authors: Author[];\r\n// };\r\n\r\n// interface Params extends ParsedUrlQuery {\r\n//   slug: string;\r\n// }\r\n\r\ninterface IParams extends ParsedUrlQuery {\r\n  slug: string;\r\n}\r\n\r\nconst authorDetail: NextPage<AuthorResponse> = ({ author }) => {\r\n  // const { user, isLoading } = useUser();\r\n  const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  // console.log(author);\r\n\r\n  return (\r\n    <section className=\"  w-[100vw] max-w-[1300px] min-h-[213px]\">\r\n      <div className=\" bg-slate-400 mb-7 pl-6 py-4\">\r\n        <h5 className=\" font-bold\">작가 정보</h5>\r\n        <div className=\" \">\r\n          {/* <img src={session?.user?.image}></img> */}\r\n          {/* <Image src={session?.user?.image || \"/\"} width={64} height={64} /> */}\r\n          <p>{`작가 - ` + author?.name}</p>\r\n          <p>{author?.relatedName}</p>\r\n          <p>{`국적 - ` + author?.nationality}</p>\r\n          <p>{`SNS - ` + (author?.sns || \"없음\")}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\" grid grid-cols-12\">\r\n        <div className=\" col-span-0 lg:col-span-1 \"></div>\r\n        <div className=\" col-span-12 lg:col-span-10\">\r\n          <div className=\"mt-5 font-bold text-xl\">작품 List</div>\r\n          <FictionList data={author} type={\"fictions_list\"} />\r\n        </div>\r\n        <div className=\" col-span-0 lg:col-span-1 \"></div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport const getStaticProps: GetStaticProps = async (\r\n  ctx: GetStaticPropsContext\r\n) => {\r\n  const { slug } = ctx.params as IParams;\r\n  if (!slug) {\r\n    return {\r\n      props: {},\r\n    };\r\n  }\r\n  const author = await client.author.findUnique({\r\n    where: {\r\n      name: slug || \"\",\r\n    },\r\n    include: {\r\n      fictions: {\r\n        include: {\r\n          userFictionStat: {\r\n            include: {\r\n              userRationOnFictions: true,\r\n              _count: {\r\n                select: {\r\n                  users: true,\r\n                },\r\n              },\r\n            },\r\n          },\r\n          author: true,\r\n          keywords: {\r\n            include: {\r\n              keyword: true,\r\n            },\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  // await new Promise((resolve) => setTimeout(resolve, 1000));\r\n  return {\r\n    props: {\r\n      author: JSON.parse(JSON.stringify(author)),\r\n    },\r\n  };\r\n};\r\n\r\nexport default authorDetail;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\authors\\[page].tsx",["214","215"],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\enter.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\create.tsx",["216","217","218","219","220","221"],"import \"@uiw/react-md-editor/markdown-editor.css\";\r\nimport \"@uiw/react-markdown-preview/markdown.css\";\r\nimport dynamic from \"next/dynamic\";\r\nimport Button from \"@components/button\";\r\nimport FictionRadarChart from \"@components/fictionRadarChart\";\r\nimport Input from \"@components/input\";\r\nimport Textarea from \"@components/textarea\";\r\nimport useMutation from \"@libs/client/useMutation\";\r\nimport { Fiction } from \"@prisma/client\";\r\nimport type { NextPage } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { FieldErrors, useForm } from \"react-hook-form\";\r\nimport Image from \"next/image\";\r\n\r\ninterface CreateFictionForm {\r\n  title: string;\r\n  author: string;\r\n  nationality: string;\r\n  genre: string[];\r\n  date: Date[];\r\n  status: number[];\r\n  synopsis: string;\r\n  characters: string;\r\n  currentState: string;\r\n  keywords: string[];\r\n  mcKeywords: string[];\r\n  subKeywords: string[];\r\n  consKeywords: string[];\r\n  original: string;\r\n  platforms: string[];\r\n  thumb?: FileList;\r\n  volume?: number;\r\n  isTranslated?: string;\r\n  relatedTitle?: string;\r\n  relatedAuthor?: string;\r\n  type?: string;\r\n  mediaMix?: string;\r\n  setup?: string;\r\n}\r\n\r\ninterface CreateFictionMutation {\r\n  ok: boolean;\r\n  fiction: Fiction;\r\n}\r\n\r\nconst MDEditor = dynamic(() => import(\"@uiw/react-md-editor\"), {\r\n  ssr: false,\r\n});\r\n\r\nconst Create: NextPage = (props) => {\r\n  const [md, setMd] = useState<string | undefined>(\"# Hello World\");\r\n\r\n  // const handleChange = useCallback((md) => {\r\n  //   setMd(md);\r\n  // }, []);\r\n\r\n  const handleChange = (md: any) => {\r\n    setMd(md);\r\n  };\r\n  ///////////\r\n  // console.log(\"redered\");\r\n  const router = useRouter();\r\n  const [createFiction, { loading, data, error }] =\r\n    useMutation<CreateFictionMutation>(\"/api/fictions\");\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    resetField,\r\n    watch,\r\n    formState: { errors },\r\n    setValue,\r\n  } = useForm<CreateFictionForm>({ mode: \"onBlur\" });\r\n\r\n  const onValid = async (data: CreateFictionForm) => {\r\n    // if (data) console.log(data);\r\n    if (loading) return;\r\n    if (data.thumb && data.thumb.length > 0) {\r\n      const { uploadURL } = await (await fetch(`/api/files`)).json();\r\n      const form = new FormData();\r\n      form.append(\"file\", data.thumb[0], data.title);\r\n      const {\r\n        result: { id },\r\n      } = await (await fetch(uploadURL, { method: \"POST\", body: form })).json();\r\n      createFiction({ ...data, thumbId: id, setup: md }, \"POST\");\r\n    } else {\r\n      createFiction({ ...data, setup: md }, \"POST\");\r\n    }\r\n    return;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data?.ok) {\r\n      router.push(`/fictions/${data.fiction.id}`);\r\n    }\r\n  }, [data, router]);\r\n  const [thumbPreview, setThumbPreview] = useState(\"\");\r\n  const thumb = watch(\"thumb\");\r\n\r\n  useEffect(() => {\r\n    if (thumb && thumb.length > 0) {\r\n      const file = thumb[0];\r\n      setThumbPreview(URL.createObjectURL(file));\r\n    }\r\n  }, [thumb]);\r\n\r\n  const onInvalid = (erros: FieldErrors) => {\r\n    if (loading) return;\r\n  };\r\n\r\n  /// watch state (react-hook-form)\r\n  let wKeywords: string[] = watch().keywords;\r\n  let wKeywords2: string[] = watch().mcKeywords;\r\n  let wKeywords3: string[] = watch().subKeywords;\r\n  let wKeywords4: string[] = watch().consKeywords;\r\n  let wStatus: number[] = watch().status;\r\n  // console.log(watch());\r\n\r\n  const onKeyDown: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords.slice(1).includes(wKeywords[0].trim())) {\r\n        wKeywords[0] = wKeywords[0].trim();\r\n        wKeywords.filter((item) => item !== \" \");\r\n        setValue(\"keywords\", [wKeywords[0], ...wKeywords]);\r\n      }\r\n      // console.log(wKeywords);\r\n      resetField(\"keywords.0\");\r\n    }\r\n  };\r\n  const onKeyDown2: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords2[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords2.slice(1).includes(wKeywords2[0].trim())) {\r\n        wKeywords2[0] = wKeywords2[0].trim();\r\n        wKeywords2.filter((item) => item !== \" \");\r\n        setValue(\"mcKeywords\", [wKeywords2[0], ...wKeywords2]);\r\n      }\r\n      // console.log(wKeywords2);\r\n      resetField(\"mcKeywords.0\");\r\n    }\r\n  };\r\n  const onKeyDown3: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords3[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords3.slice(1).includes(wKeywords3[0].trim())) {\r\n        wKeywords3[0] = wKeywords3[0].trim();\r\n        wKeywords3.filter((item) => item !== \" \");\r\n        setValue(\"subKeywords\", [wKeywords3[0], ...wKeywords3]);\r\n      }\r\n      // console.log(wKeywords3);\r\n      resetField(\"subKeywords.0\");\r\n    }\r\n  };\r\n  const onKeyDown4: any = (e: any) => {\r\n    const { key } = e;\r\n    // console.log(key);\r\n\r\n    if (key === \",\" && wKeywords4[0].trim() !== \"\") {\r\n      e.preventDefault();\r\n\r\n      if (!wKeywords4.slice(1).includes(wKeywords4[0].trim())) {\r\n        wKeywords4[0] = wKeywords4[0].trim();\r\n        wKeywords4.filter((item) => item !== \" \");\r\n        setValue(\"consKeywords\", [wKeywords4[0], ...wKeywords4]);\r\n      }\r\n      // console.log(wKeywords4);\r\n      resetField(\"consKeywords.0\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <form className=\" w-[90vw]\" onSubmit={handleSubmit(onValid, onInvalid)}>\r\n          <div className=\" max-w-[1500px]\">\r\n            <div className=\" grid grid-cols-1 sm:grid-cols-5 \">\r\n              <div className=\" bg-white col-span-2 mx-5 mt-7 h-fit border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                <div className=\" min-h-[330px] w-full\">\r\n                  {thumbPreview ? (\r\n                    <label className=\" relative pb-100 w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <Image\r\n                        className=\" object-cover\"\r\n                        src={thumbPreview || \"/\"}\r\n                        layout=\"fill\"\r\n                      />\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  ) : (\r\n                    <label className=\"w-full cursor-pointer text-gray-600 hover:border-blue-500 hover:text-blue-500 flex items-center justify-center border-2 border-dashed border-gray-300 h-[330px] rounded-md\">\r\n                      <svg\r\n                        className=\"h-12 w-12\"\r\n                        stroke=\"currentColor\"\r\n                        fill=\"none\"\r\n                        viewBox=\"0 0 48 48\"\r\n                        aria-hidden=\"true\"\r\n                      >\r\n                        <path\r\n                          d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\r\n                          strokeWidth={2}\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                        />\r\n                      </svg>\r\n\r\n                      <input\r\n                        {...register(\"thumb\")}\r\n                        className=\"hidden\"\r\n                        type=\"file\"\r\n                      />\r\n                    </label>\r\n                  )}\r\n                </div>\r\n                <div className=\" px-4 py-3\">\r\n                  <Input\r\n                    register={register(\"title\", { required: true })}\r\n                    required\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedTitle\", { required: true })}\r\n                    required\r\n                    label=\"RelatedTitle\"\r\n                    name=\"relatedTitle\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"author\", { required: true })}\r\n                    required\r\n                    label=\"Author\"\r\n                    name=\"author\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"relatedAuthor\", { required: true })}\r\n                    required\r\n                    label=\"RelatedAuthor\"\r\n                    name=\"relatedAuthor\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"type\", { required: true })}\r\n                    required\r\n                    label=\"Type\"\r\n                    name=\"type\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"nationality\", { required: true })}\r\n                    required\r\n                    label=\"Nationality\"\r\n                    name=\"nationality\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"genre\")}\r\n                    required\r\n                    label=\"Genre\"\r\n                    name=\"genre\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <div className=\" flex relative items-center justify-between\">\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.0\")}\r\n                        required\r\n                        label=\"StartDate\"\r\n                        name=\"startDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                    <div className=\" w-[48%]\">\r\n                      <Input\r\n                        register={register(\"date.1\")}\r\n                        required\r\n                        label=\"EndDate\"\r\n                        name=\"endDate\"\r\n                        type=\"date\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <Input\r\n                    register={register(\"original\", { required: true })}\r\n                    required\r\n                    label=\"Original\"\r\n                    name=\"original\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"platforms.0\")}\r\n                    required\r\n                    label=\"Platforms\"\r\n                    name=\"platforms\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"currentState\")}\r\n                    required\r\n                    label=\"CurrentState\"\r\n                    name=\"currentState\"\r\n                    type=\"text\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"volume\", { required: true })}\r\n                    required\r\n                    label=\"Volume\"\r\n                    name=\"volume\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"mediaMix\", { required: false })}\r\n                    required\r\n                    label=\"MediaMix\"\r\n                    name=\"mediaMix\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                  <Input\r\n                    register={register(\"isTranslated\", { required: false })}\r\n                    required\r\n                    label=\"IsTranslated\"\r\n                    name=\"isTranslated\"\r\n                    type=\"text_detail\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\" col-span-3 mx-5 mt-7\">\r\n                <div className=\" grid  sm:grid-cols-1\">\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"keywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords = wKeywords.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"keywords\", wKeywords);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Mc Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"mcKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown2}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords2\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords2 = wKeywords2.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"keywords\", wKeywords2);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Sub Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"subKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown3}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords3\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords3 = wKeywords3.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"subKeywords\", wKeywords3);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" mb-10 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">Cons Keywords</h2>\r\n                    <input\r\n                      className=\" w-full\"\r\n                      {...register(\"consKeywords.0\")}\r\n                      type=\"text\"\r\n                      placeholder=\" 키워드(,를 눌러서 입력하세요)\"\r\n                      onKeyDown={onKeyDown4}\r\n                    ></input>\r\n                    <ul className=\" grid grid-cols-4 md:grid-cols-5 lg:grid-cols-8 xl:grid-cols-5 pt-3 px-3\">\r\n                      {wKeywords4\r\n                        ?.filter((item) => item !== undefined)\r\n                        .map((item, index) => (\r\n                          <li\r\n                            className=\" bg-[#3D414D] text-white text-sm text-center ring-offset-1 mx-1 my-1 rounded-md h-fit hover:cursor-pointer\"\r\n                            key={index}\r\n                            onClick={(e) => {\r\n                              wKeywords4 = wKeywords4.filter(\r\n                                (item) => item !== e.currentTarget.innerHTML\r\n                              );\r\n                              setValue(\"consKeywords\", wKeywords4);\r\n                              // console.log(e.currentTarget.innerHTML);\r\n                            }}\r\n                          >\r\n                            {item}\r\n                          </li>\r\n                        ))}\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\" h-max bg-white mb-10 w-full border-[0.5px] border-[#BBBBBB] rounded-md overflow-x-auto\">\r\n                    <h2 className=\" font-bold pt-1 px-2\">graphs and charts</h2>\r\n                    <FictionRadarChart props={wStatus} />\r\n                    <div className=\" grid grid-cols-2 mx-2\">\r\n                      <Input\r\n                        register={register(\"status.0\", {\r\n                          max: 5,\r\n                          min: 0,\r\n                        })}\r\n                        required\r\n                        label=\"오리지널리티\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.1\")}\r\n                        required\r\n                        label=\"필력\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.2\")}\r\n                        required\r\n                        label=\"캐릭터성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.3\")}\r\n                        required\r\n                        label=\"핍진성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.4\")}\r\n                        required\r\n                        label=\"스토리\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                      <Input\r\n                        register={register(\"status.5\")}\r\n                        required\r\n                        label=\"작품성\"\r\n                        name=\"status\"\r\n                        type=\"number\"\r\n                        kind=\"status\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* <div className=\" h-fit w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md\">\r\n                  <h2 className=\" font-bold pt-1 px-2\"> Comments</h2>\r\n                  <ul></ul>\r\n                </div> */}\r\n              </div>\r\n            </div>\r\n            <div className=\" mx-5 my-7 bg-white px-3 py-3 border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n              <Textarea\r\n                register={register(\"synopsis\")}\r\n                name=\"synopsis\"\r\n                label=\"Synopsis\"\r\n                required\r\n              />\r\n              <Textarea\r\n                register={register(\"characters\")}\r\n                name=\"characters\"\r\n                label=\"Characters\"\r\n                required\r\n              />\r\n              <div>\r\n                <MDEditor value={md} onChange={handleChange} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Button text={loading ? \"Loading...\" : \"저장\"} />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\index.tsx",["222","223","224"],"import {\r\n  Fiction,\r\n  Keyword,\r\n  FictionStat,\r\n  KeywordsOnFictions,\r\n  UserFictionStat,\r\n  Author,\r\n} from \"@prisma/client\";\r\nimport type { NextPage } from \"next\";\r\nimport useSWR from \"swr\";\r\nimport client from \"@libs/server/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom } from \"../../atoms\";\r\n\r\ninterface UserFictionStatWithMore extends UserFictionStat {\r\n  _count: {\r\n    users: number;\r\n  };\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: [FictionStat];\r\n  userFictionStat: UserFictionStatWithMore;\r\n  author: Author;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionsResponse {\r\n  ok: boolean;\r\n  fictions: FictionWithMore[];\r\n  fictionsCount: number;\r\n  keywords: Keyword[];\r\n  categories: string[];\r\n  nationalities: string[];\r\n}\r\n\r\nconst Fictions: NextPage<FictionsResponse> = ({\r\n  keywords,\r\n  categories,\r\n  nationalities,\r\n}) => {\r\n  const [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n  const router = useRouter();\r\n  // console.log(router.query?.keywords);\r\n\r\n  let queryString = `/api/fictions?${\r\n    \"keywords=\" + (router.query?.keywords?.toString().split(\",\") || \"\")\r\n  }${\r\n    \"&nationalities=\" +\r\n    (router.query?.nationalities?.toString().split(\",\") || \"\")\r\n  }${\"&genres=\" + (router.query?.genres?.toString().split(\",\") || \"\")}${\r\n    \"&sorting=\" + (router.query?.sorting || \"\")\r\n  }${\"&page=\" + pageIndex}`;\r\n  // console.log(queryString);\r\n\r\n  const { data, error } = useSWR<FictionsResponse>(\r\n    typeof window === \"undefined\" ? null : queryString\r\n  );\r\n\r\n  // pageIndex 변경될때마다 router.push\r\n  useEffect(() => {\r\n    if (router.query.params) {\r\n      queryString = `/api/fictions?${\r\n        \"keywords=\" + (router?.query?.params[4]?.toString().split(\",\") || \"\")\r\n      }${\r\n        \"&nationalities=\" +\r\n        (router?.query?.params[0]?.toString().split(\",\") || \"\")\r\n      }${\"&genres=\" + (router?.query?.params[1]?.toString().split(\",\") || \"\")}${\r\n        \"&sorting=\" + (router?.query?.params[2] || \"\")\r\n      }${\"&page=\" + pageIndex}`;\r\n    }\r\n    // console.log(queryString);\r\n    // console.log(data);\r\n    // const genresMany = { genres: Array.from(checkedGenres).join(\",\") } || {};\r\n\r\n    // console.log(genresMany);\r\n\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${\r\n        Array.from(checkedSortings || \"총점\").join(\",\") || \"all\"\r\n      }/${pageIndex}/${Array.from(checkedItems).join(\",\") || \"all\"}`\r\n    );\r\n  }, [pageIndex]);\r\n\r\n  //세부 필터링\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [checkedItems, setCheckedItems] = useState(new Set());\r\n  const [checkedGenres, setCheckedGenres] = useState(new Set());\r\n  const [checkedNationalities, setCheckedNationalities] = useState(new Set());\r\n  const [checkedSortings, setCheckedSortings] = useState(new Set());\r\n  const sortingList = [\r\n    \"총점\",\r\n    \"캐릭터성\",\r\n    \"오리지널리티\",\r\n    \"스토리\",\r\n    \"작품성\",\r\n    \"핍진성\",\r\n    \"필력\",\r\n    \"화수\",\r\n  ];\r\n\r\n  const checkHandler = ({\r\n    currentTarget,\r\n  }: React.MouseEvent<HTMLInputElement>) => {\r\n    setIsChecked(!isChecked);\r\n\r\n    checkedItemHandler(\r\n      currentTarget.parentNode,\r\n      currentTarget.value,\r\n      currentTarget.checked,\r\n      currentTarget.id,\r\n      currentTarget\r\n    );\r\n  };\r\n\r\n  const checkedItemHandler = (\r\n    box: any,\r\n    name: any,\r\n    isChecked: any,\r\n    id: any,\r\n    target: any\r\n  ) => {\r\n    // console.log(name);\r\n    // console.log(checkedItems);\r\n    // 키워드\r\n    if (isChecked && id === \"keyword\") {\r\n      checkedItems.add(name);\r\n      setCheckedItems(checkedItems);\r\n      // box.style.backgroundColor = \"blue\";\r\n      // box.style.color = \"white\";\r\n    } else if (!isChecked && checkedItems.has(name) && id === \"keyword\") {\r\n      checkedItems.delete(name);\r\n      setCheckedItems(checkedItems);\r\n    }\r\n    // 국가\r\n    if (isChecked && id === \"nationality\") {\r\n      checkedNationalities.add(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    } else if (\r\n      !isChecked &&\r\n      checkedNationalities.has(name) &&\r\n      id === \"nationality\"\r\n    ) {\r\n      checkedNationalities.delete(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    }\r\n    // 장르\r\n    if (isChecked && id === \"genre\") {\r\n      checkedGenres.add(name);\r\n      setCheckedGenres(checkedGenres);\r\n    } else if (!isChecked && checkedGenres.has(name) && id === \"genre\") {\r\n      checkedGenres.delete(name);\r\n      setCheckedGenres(checkedGenres);\r\n    }\r\n    // 정렬\r\n    if (isChecked && id === \"sorting\") {\r\n      checkedSortings.clear();\r\n      checkedSortings.add(name);\r\n      setCheckedSortings(checkedSortings);\r\n      // console.log(name);\r\n    } else if (!isChecked && checkedSortings.has(name) && id === \"sorting\") {\r\n      checkedSortings.delete(name);\r\n      setCheckedSortings(checkedSortings);\r\n    }\r\n  };\r\n\r\n  const buttonFlag = useRef(true);\r\n  const rerenderList = () => {\r\n    // console.log(buttonFlag.current);\r\n    if (!buttonFlag.current) {\r\n      alert(\"새로고침은 5초마다 한번씩 가능합니다.\");\r\n      return;\r\n    }\r\n    buttonFlag.current = !buttonFlag.current;\r\n    setTimeout(() => {\r\n      buttonFlag.current = !buttonFlag.current;\r\n      // console.log(\"해제완료\");\r\n    }, 5000);\r\n    setPageIndex(1);\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${Array.from(checkedSortings).join(\",\") || \"총점\"}/${pageIndex}/${\r\n        Array.from(checkedItems).join(\",\") || \"all\"\r\n      }`\r\n    );\r\n  };\r\n\r\n  // console.log(nationalities, categories, keywords);\r\n\r\n  return (\r\n    <div className=\" mt-10 max-w-[1300px]\">\r\n      <div className=\" w-full justify-center\">\r\n        <form className=\" \">\r\n          <div className=\"  bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n            <table className=\" leading-7\">\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <th>국가</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {nationalities.map((nationality, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          className=\" hidden peer\"\r\n                          id=\"nationality\"\r\n                          value={nationality}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px]\">\r\n                          {nationality}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>장르</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {categories.map((category: any, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          id=\"genre\"\r\n                          className=\" hidden peer\"\r\n                          value={category.name}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {category.name}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                  <th>정렬</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {sortingList.map((sorting, i) => (\r\n                      <label\r\n                        key={i}\r\n                        className=\" bg-white  cursor-pointer flex \"\r\n                      >\r\n                        <input\r\n                          // defaultChecked\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"radio\"\r\n                          className=\" hidden peer\"\r\n                          id=\"sorting\"\r\n                          value={sorting}\r\n                          name=\"sorting\"\r\n                        ></input>\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {sorting}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <details className=\" text-center\">\r\n            <div className=\" mt-5 bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n              <table className=\" leading-7\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <th className=\" min-w-[50px]\">키워드</th>\r\n                    <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                      {keywords\r\n                        .filter((keyword) => keyword?.isOfCons !== true)\r\n                        .map((keyword) => (\r\n                          <label key={keyword?.id} className=\"  flex \">\r\n                            <input\r\n                              onClick={(e) => checkHandler(e)}\r\n                              type=\"checkbox\"\r\n                              id=\"keyword\"\r\n                              className=\" hidden peer\"\r\n                              value={keyword?.name}\r\n                            />\r\n                            <div className=\" cursor-pointer whitespace-nowrap bg-gray-200 text-[#666676] peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 mt-1 text-sm text-center mx-[0.35rem] rounded-3xl border-[#BBBBBB] p-1  \">\r\n                              {/* {\r\n                              \" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-gray-200 text-[#666676] p-1 whitespace-nowrap\"\r\n                            } */}\r\n                              #{keyword?.name}\r\n                            </div>\r\n                          </label>\r\n                        ))}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <summary style={{ listStyle: \"none\" }} className=\" mt-4 w-fit\">\r\n              <span className=\" hover:cursor-pointer hover:bg-gray-200  border-[0.5px] p-1 border-[#BBBBBB] rounded-md flex items-center\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"16\"\r\n                  height=\"16\"\r\n                  fill=\"currentColor\"\r\n                  className=\"bi bi-plus-circle-fill\"\r\n                  viewBox=\"0 0 16 16\"\r\n                >\r\n                  <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />{\" \"}\r\n                </svg>\r\n                &nbsp;\r\n                <span> 키워드 검색</span>\r\n              </span>\r\n            </summary>\r\n          </details>\r\n        </form>\r\n      </div>\r\n      <div className=\" w-full flex justify-center\">\r\n        <button\r\n          onClick={rerenderList}\r\n          className=\" hover:border-gray-400 hover:bg-gray-200 bg-white border-[0.5px] border-[#BBBBBB] rounded-md mt-2 p-1 w-2/3\"\r\n        >\r\n          새로고침\r\n        </button>\r\n      </div>\r\n      <FictionList\r\n        data={data}\r\n        type={\"fictions_list\"}\r\n        count={data?.fictions?.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport async function getStaticProps() {\r\n  // console.log(\"BUILDING fictions index Statically\");\r\n  const fictions = await client.fiction.findMany({\r\n    select: {\r\n      type: true,\r\n      // currentState: true,\r\n      nationality: true,\r\n      // volume: true,\r\n      // createdAt: true,\r\n      keywords: {\r\n        include: {\r\n          keyword: true,\r\n        },\r\n      },\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n      isTranslated: true,\r\n    },\r\n  });\r\n\r\n  const fictionsCount = await client.fiction.count({\r\n    where: {},\r\n  });\r\n\r\n  let keywords = await client.keyword.findMany();\r\n\r\n  let categories = await client.category.findMany();\r\n\r\n  // console.log(keywords.slice(5));\r\n\r\n  // keywords = keywords.filter(\r\n  //   (arr, index, callback) =>\r\n  //     index === callback.findIndex((t) => t.name === arr.name)\r\n  // );\r\n\r\n  // // genre 중복제거 (fiction.genre -> genre)\r\n  // let genres: Array<any> = [];\r\n  // fictions.map((fiction) => genres.push(fiction.genre));\r\n  // genres = [...new Set(genres)].filter((item) => item !== \"\");\r\n\r\n  // nationality 중복제거 (fiction.nationality -> nationality)\r\n  let nationalities: Array<any> = [];\r\n  fictions.map((fiction: any) => nationalities.push(fiction?.nationality));\r\n  nationalities = [...new Set(nationalities)].filter((item) => item !== \"\");\r\n  // console.log(nationalities);\r\n\r\n  // console.log(fictions.slice(0, 2));\r\n\r\n  return {\r\n    props: {\r\n      // fictions: JSON.parse(JSON.stringify(fictions)),\r\n      fictionsCount: JSON.parse(JSON.stringify(fictionsCount)),\r\n      keywords: JSON.parse(JSON.stringify(keywords)),\r\n      nationalities: JSON.parse(JSON.stringify(nationalities)),\r\n      categories: JSON.parse(JSON.stringify(categories)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default Fictions;\r\n\r\n// const fictions = await client.fiction.findMany({\r\n//   include: {\r\n//     _count: {\r\n//       select: {\r\n//         favs: true,\r\n//       },\r\n//     },\r\n//   },\r\n// });\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[...params].tsx",["225","226","227"],"import {\r\n  Fiction,\r\n  Keyword,\r\n  FictionStat,\r\n  KeywordsOnFictions,\r\n  UserFictionStat,\r\n  Author,\r\n} from \"@prisma/client\";\r\nimport type { GetStaticPaths, NextPage } from \"next\";\r\nimport useSWR from \"swr\";\r\nimport client from \"@libs/server/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom } from \"../../atoms\";\r\n\r\ninterface UserFictionStatWithMore extends UserFictionStat {\r\n  _count: {\r\n    users: number;\r\n  };\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: [FictionStat];\r\n  userFictionStat: UserFictionStatWithMore;\r\n  author: Author;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionsResponse {\r\n  ok: boolean;\r\n  fictions: FictionWithMore[];\r\n  fictionsCount: number;\r\n  keywords: Keyword[];\r\n  categories: string[];\r\n  nationalities: string[];\r\n}\r\n\r\nconst FictionsWithParams: NextPage<FictionsResponse> = ({\r\n  keywords,\r\n  categories,\r\n  nationalities,\r\n}) => {\r\n  const [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n  const router = useRouter();\r\n  // console.log(router.query);\r\n  let queryString = \"\";\r\n  if (router.query.params) {\r\n    queryString = `/api/fictions?${\r\n      \"keywords=\" + (router?.query?.params[4]?.toString().split(\",\") || \"\")\r\n    }${\r\n      \"&nationalities=\" +\r\n      (router?.query?.params[0]?.toString().split(\",\") || \"\")\r\n    }${\"&genres=\" + (router?.query?.params[1]?.toString().split(\",\") || \"\")}${\r\n      \"&sorting=\" + (router?.query?.params[2] || \"\")\r\n    }${\"&page=\" + pageIndex}`;\r\n  }\r\n\r\n  const { data, error } = useSWR<FictionsResponse>(\r\n    typeof window === \"undefined\" ? null : queryString\r\n  );\r\n\r\n  // pageIndex 변경될때마다 router.push\r\n  useEffect(() => {\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${\r\n        Array.from(checkedSortings || \"총점\").join(\",\") || \"all\"\r\n      }/${pageIndex}/${Array.from(checkedItems).join(\",\") || \"all\"}`\r\n    );\r\n\r\n    if (router.query.params) {\r\n      queryString = `/api/fictions?${\r\n        \"keywords=\" + (router?.query?.params[4]?.toString().split(\",\") || \"\")\r\n      }${\r\n        \"&nationalities=\" +\r\n        (router?.query?.params[0]?.toString().split(\",\") || \"\")\r\n      }${\"&genres=\" + (router?.query?.params[1]?.toString().split(\",\") || \"\")}${\r\n        \"&sorting=\" + (router?.query?.params[2] || \"\")\r\n      }${\"&page=\" + pageIndex}`;\r\n    }\r\n  }, [pageIndex]);\r\n\r\n  //세부 필터링\r\n  const [isChecked, setIsChecked] = useState(false);\r\n  const [checkedItems, setCheckedItems] = useState(new Set());\r\n  const [checkedGenres, setCheckedGenres] = useState(new Set());\r\n  const [checkedNationalities, setCheckedNationalities] = useState(new Set());\r\n  const [checkedSortings, setCheckedSortings] = useState(new Set());\r\n  const sortingList = [\r\n    \"총점\",\r\n    \"캐릭터성\",\r\n    \"오리지널리티\",\r\n    \"스토리\",\r\n    \"작품성\",\r\n    \"핍진성\",\r\n    \"필력\",\r\n    \"화수\",\r\n  ];\r\n\r\n  const checkHandler = ({\r\n    currentTarget,\r\n  }: React.MouseEvent<HTMLInputElement>) => {\r\n    setIsChecked(!isChecked);\r\n\r\n    checkedItemHandler(\r\n      currentTarget.parentNode,\r\n      currentTarget.value,\r\n      currentTarget.checked,\r\n      currentTarget.id,\r\n      currentTarget\r\n    );\r\n  };\r\n\r\n  const checkedItemHandler = (\r\n    box: any,\r\n    name: any,\r\n    isChecked: any,\r\n    id: any,\r\n    target: any\r\n  ) => {\r\n    // console.log(name);\r\n    // console.log(checkedItems);\r\n    // 키워드\r\n    if (isChecked && id === \"keyword\") {\r\n      checkedItems.add(name);\r\n      setCheckedItems(checkedItems);\r\n      // box.style.backgroundColor = \"blue\";\r\n      // box.style.color = \"white\";\r\n    } else if (!isChecked && checkedItems.has(name) && id === \"keyword\") {\r\n      checkedItems.delete(name);\r\n      setCheckedItems(checkedItems);\r\n    }\r\n    // 국가\r\n    if (isChecked && id === \"nationality\") {\r\n      checkedNationalities.add(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    } else if (\r\n      !isChecked &&\r\n      checkedNationalities.has(name) &&\r\n      id === \"nationality\"\r\n    ) {\r\n      checkedNationalities.delete(name);\r\n      setCheckedNationalities(checkedNationalities);\r\n    }\r\n    // 장르\r\n    if (isChecked && id === \"genre\") {\r\n      checkedGenres.add(name);\r\n      setCheckedGenres(checkedGenres);\r\n    } else if (!isChecked && checkedGenres.has(name) && id === \"genre\") {\r\n      checkedGenres.delete(name);\r\n      setCheckedGenres(checkedGenres);\r\n    }\r\n    // 정렬\r\n    if (isChecked && id === \"sorting\") {\r\n      checkedSortings.clear();\r\n      checkedSortings.add(name);\r\n      setCheckedSortings(checkedSortings);\r\n      // console.log(name);\r\n    } else if (!isChecked && checkedSortings.has(name) && id === \"sorting\") {\r\n      checkedSortings.delete(name);\r\n      setCheckedSortings(checkedSortings);\r\n    }\r\n  };\r\n\r\n  const buttonFlag = useRef(true);\r\n  const rerenderList = () => {\r\n    setPageIndex(1);\r\n\r\n    if (!buttonFlag.current) {\r\n      alert(\"새로고침은 5초마다 한번씩 가능합니다.\");\r\n      return;\r\n    }\r\n    buttonFlag.current = !buttonFlag.current;\r\n    setTimeout(() => {\r\n      buttonFlag.current = !buttonFlag.current;\r\n    }, 5000);\r\n    // setPageIndex(1);\r\n    // router.push({\r\n    //   pathname: \"/fictions\",\r\n    //   query: {\r\n    //     keywords: Array.from(checkedItems).join(\",\"),\r\n    //     nationalities: Array.from(checkedNationalities).join(\",\"),\r\n    //     genres: Array.from(checkedGenres).join(\",\"),\r\n    //     sorting: Array.from(checkedSortings).join(\",\"),\r\n    //     page: pageIndex,\r\n    //   },\r\n    // });\r\n    router.push(\r\n      `/fictions/${Array.from(checkedNationalities).join(\",\") || \"all\"}/${\r\n        Array.from(checkedGenres).join(\",\") || \"all\"\r\n      }/${\r\n        Array.from(checkedSortings || \"총점\").join(\",\") || \"all\"\r\n      }/${pageIndex}/${Array.from(checkedItems).join(\",\") || \"all\"}`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\" mt-10 max-w-[1300px]\">\r\n      <div className=\" w-full justify-center\">\r\n        <form>\r\n          <div className=\"  bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n            <table className=\" leading-7\">\r\n              <thead>\r\n                <tr>\r\n                  <th></th>\r\n                  <th></th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <th>국가</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {nationalities.map((nationality, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          className=\" hidden peer\"\r\n                          id=\"nationality\"\r\n                          value={nationality}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px]\">\r\n                          {nationality}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <th>장르</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {categories.map((category: any, i) => (\r\n                      <label key={i} className=\" cursor-pointer flex\">\r\n                        <input\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"checkbox\"\r\n                          id=\"genre\"\r\n                          className=\" hidden peer\"\r\n                          value={category.name}\r\n                        />\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {category.name}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n\r\n                <tr>\r\n                  <th>정렬</th>\r\n                  <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                    {sortingList.map((sorting, i) => (\r\n                      <label\r\n                        key={i}\r\n                        className=\" bg-white  cursor-pointer flex \"\r\n                      >\r\n                        <input\r\n                          // defaultChecked\r\n                          onClick={(e) => checkHandler(e)}\r\n                          type=\"radio\"\r\n                          className=\" hidden peer\"\r\n                          id=\"sorting\"\r\n                          value={sorting}\r\n                          name=\"sorting\"\r\n                        ></input>\r\n                        <div className=\" peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 p-[0.12rem] mt-1 text-sm text-center  ring-gray-500 mx-[0.35rem] rounded-md border-[#BBBBBB] border-[0.5px] \">\r\n                          {sorting}\r\n                        </div>\r\n                      </label>\r\n                    ))}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <details className=\" text-center\">\r\n            <div className=\" mt-5 bg-white px-2 pt-2 pb-1 border-[0.5px] border-[#BBBBBB] rounded-md blue \">\r\n              <table className=\" leading-7\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th></th>\r\n                    <th></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <th className=\" min-w-[50px]\">키워드</th>\r\n                    <td className=\" leading-[1.8rem] flex flex-wrap\">\r\n                      {keywords\r\n                        .filter((keyword) => keyword?.isOfCons !== true)\r\n                        .map((keyword) => (\r\n                          <label key={keyword?.id} className=\"  flex \">\r\n                            <input\r\n                              onClick={(e) => checkHandler(e)}\r\n                              type=\"checkbox\"\r\n                              id=\"keyword\"\r\n                              className=\" hidden peer\"\r\n                              value={keyword?.name}\r\n                            />\r\n                            <div className=\" cursor-pointer whitespace-nowrap bg-gray-200 text-[#666676] peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 mt-1 text-sm text-center mx-[0.35rem] rounded-3xl border-[#BBBBBB] p-1  \">\r\n                              #{keyword?.name}\r\n                            </div>\r\n                          </label>\r\n                        ))}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <summary style={{ listStyle: \"none\" }} className=\" mt-4 w-fit\">\r\n              <span className=\" hover:cursor-pointer hover:bg-gray-200  border-[0.5px] p-1 border-[#BBBBBB] rounded-md flex items-center\">\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"16\"\r\n                  height=\"16\"\r\n                  fill=\"currentColor\"\r\n                  className=\"bi bi-plus-circle-fill\"\r\n                  viewBox=\"0 0 16 16\"\r\n                >\r\n                  <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3v-3z\" />{\" \"}\r\n                </svg>\r\n                &nbsp;\r\n                <span> 키워드 검색</span>\r\n              </span>\r\n            </summary>\r\n          </details>\r\n        </form>\r\n      </div>\r\n      <div className=\" w-full flex justify-center\">\r\n        <button\r\n          onClick={rerenderList}\r\n          className=\" hover:border-gray-400 hover:bg-gray-200 bg-white border-[0.5px] border-[#BBBBBB] rounded-md mt-2 p-1 w-80\"\r\n        >\r\n          새로고침\r\n        </button>\r\n      </div>\r\n      <FictionList\r\n        data={data}\r\n        type={\"fictions_list\"}\r\n        count={data?.fictions?.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport async function getStaticProps() {\r\n  const fictions = await client.fiction.findMany({\r\n    select: {\r\n      keywords: {\r\n        include: {\r\n          keyword: true,\r\n        },\r\n      },\r\n      type: true,\r\n      currentState: true,\r\n      nationality: true,\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n      isTranslated: true,\r\n    },\r\n  });\r\n\r\n  const fictionsCount = await client.fiction.count({\r\n    where: {},\r\n  });\r\n\r\n  let keywords = await client.keyword.findMany();\r\n\r\n  let categories = await client.category.findMany();\r\n\r\n  let nationalities: Array<any> = [];\r\n  fictions.map((fiction: any) => nationalities.push(fiction.nationality));\r\n  nationalities = [...new Set(nationalities)].filter((item) => item !== \"\");\r\n\r\n  return {\r\n    props: {\r\n      // fictions: JSON.parse(JSON.stringify(fictions)),\r\n      fictionsCount: JSON.parse(JSON.stringify(fictionsCount)),\r\n      keywords: JSON.parse(JSON.stringify(keywords)),\r\n      nationalities: JSON.parse(JSON.stringify(nationalities)),\r\n      categories: JSON.parse(JSON.stringify(categories)),\r\n    },\r\n  };\r\n}\r\n\r\nexport default FictionsWithParams;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\edit.tsx",["228","229","230","231"],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\fictions\\[id]\\index.tsx",["232","233","234"],"import React, { useState } from \"react\";\r\nimport type { GetStaticPaths, GetStaticProps, NextPage } from \"next\";\r\nimport useSWR from \"swr\";\r\nimport { useRouter } from \"next/router\";\r\nimport {\r\n  Fiction,\r\n  FictionStat,\r\n  Keyword,\r\n  UserRationOnFiction,\r\n  KeywordsOnFictions,\r\n  Author,\r\n  Comment,\r\n  Category,\r\n} from \"@prisma/client\";\r\nimport useMutation from \"@libs/client/useMutation\";\r\nimport { cls } from \"@libs/client/utils\";\r\nimport UserStat from \"@components/userStat\";\r\nimport client from \"@libs/server/client\";\r\nimport Image from \"next/image\";\r\nimport useUser from \"@libs/client/useUser\";\r\nimport Link from \"next/link\";\r\nimport Pagination from \"react-js-pagination\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport FictionRadarChart from \"@components/fictionRadarChart\";\r\n\r\ninterface FictionDetailResponse {\r\n  ok: boolean;\r\n  fiction: FictionWithMore;\r\n  similarFictions: Fiction[];\r\n  isLiked: boolean;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: [FictionStat];\r\n  userFictionStat: { userRationOnFictions: [UserRationOnFiction] };\r\n  author: Author;\r\n  categories: [Category];\r\n}\r\n\r\n// interface CommentWithMore extends Comment {\r\n//   ok: boolean;\r\n// }\r\n\r\ninterface CommentResponse {\r\n  comments: Comment[];\r\n  commentsCount: number;\r\n  ok: boolean;\r\n}\r\n\r\nconst FictionDetail: NextPage<FictionDetailResponse> = ({\r\n  fiction,\r\n  similarFictions,\r\n}) => {\r\n  const router = useRouter();\r\n\r\n  // // FAV을 CSR로 받기, 기존 Data 정리하여 fav만 get하여 가져옴\r\n  // const { data, mutate: boundMutate } = useSWR<FictionDetailResponse>(\r\n  //   router.query.id ? `/api/fictions/${router.query.id}` : null\r\n  // );\r\n  const [commentIndex, setCommentIndex] = useState(1);\r\n  const { user, isLoading } = useUser();\r\n\r\n  const { data, mutate: boundMutate } = useSWR<FictionDetailResponse>(\r\n    router.query.id\r\n      ? typeof window === \"undefined\"\r\n        ? null\r\n        : `/api/fictions/${router.query.id}/fav`\r\n      : null\r\n  );\r\n\r\n  const { data: commentsResponse } = useSWR<CommentResponse>(\r\n    router.query.id\r\n      ? `/api/fictions/${router.query.id}/comment?page=${commentIndex}`\r\n      : null\r\n  );\r\n\r\n  const [toggleFav] = useMutation(`/api/fictions/${router.query.id}/fav`);\r\n  const onFavClick = () => {\r\n    toggleFav({}, \"POST\");\r\n    if (!data) return;\r\n\r\n    boundMutate({ ...data, isLiked: !data.isLiked }, false);\r\n  };\r\n\r\n  if (router?.isFallback) {\r\n    return (\r\n      <div title=\"Loaidng for youuuuuuu\">\r\n        <span>I love you</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handlePageChange = (PI: number) => {\r\n    setCommentIndex(PI);\r\n  };\r\n\r\n  fiction.startDate = new Date(fiction?.startDate);\r\n  fiction.endDate = new Date(fiction?.endDate);\r\n\r\n  return (\r\n    <div className=\" max-w-[1100px]\">\r\n      {user ? (\r\n        <div className=\" flex justify-end mx-5 mt-2\">\r\n          <Link href={`/fictions/${fiction?.id}/edit`}>\r\n            <div className=\" hover:cursor-pointer bg-white border-[0.5px] border-[#BBBBBB] rounded-md p-1 mx-1\">\r\n              EDIT\r\n            </div>\r\n          </Link>\r\n          <Link href={`/fictions/${fiction?.id}/delete`}>\r\n            <div className=\" hover:cursor-pointer bg-white border-[0.5px] border-[#BBBBBB] rounded-md p-1 ml-1\">\r\n              DELETE\r\n            </div>\r\n          </Link>\r\n        </div>\r\n      ) : null}\r\n\r\n      <div className=\" grid grid-cols-1 sm:grid-cols-10 h-fit\">\r\n        <div className=\"  sm:max-w-[380px] object-cover h-fit bg-white col-span-3 mt-7 border-[0.5px] border-[#BBBBBB] rounded-md \">\r\n          <div className=\"  w-full h-[467px] relative\">\r\n            <Image\r\n              src={`https://imagedelivery.net/vZ0h3NOKMe-QsJIVyNemEg/${fiction?.image}/fiction`}\r\n              layout=\"fill\"\r\n              objectFit=\"contain\"\r\n              alt={fiction?.title}\r\n            />\r\n          </div>\r\n          <div className=\" px-4\">\r\n            <div className=\" flex justify-between\">\r\n              <h1 className=\" font-semibold text-2xl mb-2 pt-2 ml-\">\r\n                {fiction?.title}\r\n              </h1>\r\n              <button\r\n                onClick={onFavClick}\r\n                className={cls(\r\n                  \"px-3 py-2 rounded-md flex items-center hover:bg-gray-100 justify-center\",\r\n                  data?.isLiked\r\n                    ? \"text-red-400 hover:text-red-500\"\r\n                    : \"text-gray-400  hover:text-gray-500\"\r\n                )}\r\n              >\r\n                {data?.isLiked ? (\r\n                  <svg\r\n                    className=\"w-6 h-6\"\r\n                    fill=\"currentColor\"\r\n                    viewBox=\"0 0 20 20\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                  >\r\n                    <path\r\n                      fillRule=\"evenodd\"\r\n                      d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\"\r\n                      clipRule=\"evenodd\"\r\n                    ></path>\r\n                  </svg>\r\n                ) : (\r\n                  <svg\r\n                    className=\"h-6 w-6 \"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                    aria-hidden=\"true\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth=\"2\"\r\n                      d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"\r\n                    />\r\n                  </svg>\r\n                )}\r\n              </button>\r\n            </div>\r\n            <div className=\" grid grid-cols-10 text-xs overflow-hidden\">\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] \">\r\n                <div className=\" col-span-4 font-bold font-sans\">원제</div>\r\n                <div className=\" col-span-6\">{fiction?.title}</div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">작가</div>\r\n                <Link passHref href={`/authors/name/${fiction?.author?.name}`}>\r\n                  <a\r\n                    title={fiction?.author?.name}\r\n                    className=\" col-span-6 hover:cursor-pointer text-blue-500\"\r\n                  >\r\n                    {fiction?.author?.name}\r\n                  </a>\r\n                </Link>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">국가</div>\r\n                <div className=\" col-span-6\">{fiction?.nationality}</div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">장르</div>\r\n                <div className=\" col-span-6\">\r\n                  <span>\r\n                    {fiction?.categories\r\n                      .reduce(\r\n                        (acc: any, cur: any) => [...acc, cur?.category?.name],\r\n                        []\r\n                      )\r\n                      .join(\", \")}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">연재기간</div>\r\n                <div className=\" col-span-6\">{`${fiction?.startDate.getFullYear()}. ${\r\n                  fiction?.startDate.getMonth() + 1\r\n                }. ${fiction?.startDate.getDate()} ~ ${fiction?.endDate.getFullYear()}. ${\r\n                  fiction?.endDate.getMonth() + 1\r\n                }. ${fiction?.endDate.getDate()}`}</div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px] \">\r\n                <div className=\" col-span-4 font-bold font-sans \">원본</div>\r\n                <div className=\" col-span-6 text-blue-500\">\r\n                  <a\r\n                    className=\" flex\"\r\n                    href={fiction?.original}\r\n                    title={fiction?.original}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"16\"\r\n                      height=\"16\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-link\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M6.354 5.5H4a3 3 0 0 0 0 6h3a3 3 0 0 0 2.83-4H9c-.086 0-.17.01-.25.031A2 2 0 0 1 7 10.5H4a2 2 0 1 1 0-4h1.535c.218-.376.495-.714.82-1z\" />\r\n                      <path d=\"M9 5.5a3 3 0 0 0-2.83 4h1.098A2 2 0 0 1 9 6.5h3a2 2 0 1 1 0 4h-1.535a4.02 4.02 0 0 1-.82 1H12a3 3 0 1 0 0-6H9z\" />\r\n                    </svg>\r\n                    바로가기\r\n                  </a>\r\n                </div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 sm:col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">플랫폼</div>\r\n                <div className=\" col-span-6 text-blue-500\">\r\n                  <a\r\n                    className=\" flex\"\r\n                    href={fiction?.platforms}\r\n                    title={fiction?.platforms}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"16\"\r\n                      height=\"16\"\r\n                      fill=\"currentColor\"\r\n                      className=\"bi bi-link\"\r\n                      viewBox=\"0 0 16 16\"\r\n                    >\r\n                      <path d=\"M6.354 5.5H4a3 3 0 0 0 0 6h3a3 3 0 0 0 2.83-4H9c-.086 0-.17.01-.25.031A2 2 0 0 1 7 10.5H4a2 2 0 1 1 0-4h1.535c.218-.376.495-.714.82-1z\" />\r\n                      <path d=\"M9 5.5a3 3 0 0 0-2.83 4h1.098A2 2 0 0 1 9 6.5h3a2 2 0 1 1 0 4h-1.535a4.02 4.02 0 0 1-.82 1H12a3 3 0 1 0 0-6H9z\" />\r\n                    </svg>\r\n                    바로가기\r\n                  </a>\r\n                </div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">상태</div>\r\n                <div className=\" col-span-6\">\r\n                  {fiction?.volume}&nbsp;\r\n                  {fiction?.currentState || \"??\"}\r\n                </div>\r\n              </div>\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">\r\n                  미디어믹스\r\n                </div>\r\n                <div className=\" col-span-6\">{fiction?.mediaMix || \"X\"}</div>\r\n              </div>\r\n              {fiction?.isTranslated ? (\r\n                <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                  <div className=\" col-span-4 font-bold font-sans\">\r\n                    번역상태\r\n                  </div>\r\n                  <div className=\" col-span-6\">\r\n                    {fiction?.isTranslated ? \"O\" : \"\"}\r\n                  </div>\r\n                </div>\r\n              ) : null}\r\n              <div className=\" w-full col-span-10 grid grid-cols-10 py-[5px] border-t-[1px]\">\r\n                <div className=\" col-span-4 font-bold font-sans\">Related</div>\r\n                <div className=\" col-span-6\">\r\n                  {fiction?.relatedTitle} &nbsp;\r\n                  {fiction?.relatedAuthor}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n            <div className=\" mb-2\"></div>\r\n          </div>\r\n        </div>\r\n        <div className=\" col-span-7 mt-3 sm:mt-7  sm:grid lg:grid-rows-5\">\r\n          <div className=\" grid grid-cols-10 row-span-3\">\r\n            <div className=\" col-span-10 lg:col-span-5 sm:pl-5 lg:px-5 h-full pb-3\">\r\n              <div className=\" mb-5 pb-3 px- w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md h-full\">\r\n                <h2 className=\" pt-1 border-b-[1px] mx-3 text-md\">메인 태그</h2>\r\n                <ul className=\" pt-2 px-3 inline-flex flex-wrap\">\r\n                  {fiction?.keywords\r\n                    ?.filter(\r\n                      (item) =>\r\n                        item?.keyword?.isOfHeroine === false &&\r\n                        item?.keyword?.isOfMC === false &&\r\n                        item?.keyword?.isOfCons === false\r\n                    )\r\n                    .map((item: any, index: any) => (\r\n                      <li\r\n                        key={index}\r\n                        className={\r\n                          item?.keyword?.isOfMC\r\n                            ? \" text-sm text-center ring-2 ring-red-500 mx-1 my-1 rounded-md h-fit border-[#BBBBBB]\"\r\n                            : item?.keyword?.isOfHeroine\r\n                            ? \" text-sm text-center ring-2 ring-blue-500 mx-1 my-1 rounded-md h-fit border-[#BBBBBB]\"\r\n                            : \" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-gray-200 text-[#666676] p-1 whitespace-nowrap cursor-pointer\"\r\n                        }\r\n                      >\r\n                        <Link\r\n                          href={`/search/keyword/${item?.keyword?.name}/1`}\r\n                          passHref\r\n                        >\r\n                          <a>#{item?.keyword?.name}</a>\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n                <h2 className=\" pt-1 border-b-[1px] mx-3 text-md\">\r\n                  주인공 태그\r\n                </h2>\r\n                <ul className=\" pt-2 px-3 inline-flex flex-wrap\">\r\n                  {fiction.keywords\r\n                    .filter((item) => item?.keyword?.isOfMC === true)\r\n                    .map((item: any, index: any) => (\r\n                      <li\r\n                        key={index}\r\n                        className=\" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-gray-200 text-[#666676] p-1 whitespace-nowrap\"\r\n                      >\r\n                        <Link\r\n                          href={`/search/keyword/${item?.keyword?.name}/1`}\r\n                          passHref\r\n                        >\r\n                          <a>#{item?.keyword?.name}</a>\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n                <h2 className=\" pt-1 border-b-[1px] mx-3 text-md\">\r\n                  히로인 태그\r\n                </h2>\r\n                <ul className=\" pt-2 px-3 inline-flex flex-wrap\">\r\n                  {fiction?.keywords\r\n                    .filter((item) => item?.keyword?.isOfHeroine === true)\r\n                    .map((item: any, index: any) => (\r\n                      <li\r\n                        key={index}\r\n                        className=\" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-gray-200 text-[#666676] p-1 whitespace-nowrap\"\r\n                      >\r\n                        <Link\r\n                          href={`/search/keyword/${item?.keyword?.name}/1`}\r\n                          passHref\r\n                        >\r\n                          <a>#{item?.keyword?.name}</a>\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n                <h2 className=\" pt-1 border-b-[1px] mx-3 text-md\">\r\n                  호불호 키워드\r\n                </h2>\r\n                <ul className=\" pt-2 px-3 inline-flex flex-wrap\">\r\n                  {fiction?.keywords\r\n                    .filter((item) => item?.keyword?.isOfCons === true)\r\n                    .map((item: any, index: any) => (\r\n                      <li\r\n                        key={index}\r\n                        className=\" text-sm text-center  mx-1 my-1 rounded-3xl h-fit bg-red-200 text-[#666676] p-1 whitespace-nowrap\"\r\n                      >\r\n                        <Link\r\n                          href={`/search/keyword/${item?.keyword?.name}/1`}\r\n                          passHref\r\n                        >\r\n                          <a>#{item?.keyword?.name}</a>\r\n                        </Link>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n            <div className=\" col-span-10 sm:pl-5 lg:px-0 lg:col-span-5 pb-3\">\r\n              <div className=\" bg-white mb-5 w-full border-[0.5px] border-[#BBBBBB] rounded-md col-span-6 h-full\">\r\n                <h2 className=\" font-bold pt-1 px-2\"></h2>\r\n\r\n                <FictionRadarChart props={fiction?.fictionStat} />\r\n\r\n                <div className=\" w-full px-3 h-fit mx-auto my-2\">\r\n                  <details>\r\n                    <summary\r\n                      style={{ listStyle: \"none\" }}\r\n                      className=\" text-center font-bold cursor-pointer my-2 border-[0.5px] border-[#BBBBBB] rounded-md\"\r\n                    >\r\n                      평가하기\r\n                    </summary>\r\n                    <UserStat />\r\n                  </details>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\" row-span-3 mt-2\">\r\n            <div className=\" sm:pl-5 \">\r\n              <div className=\" w-full bg-white border-[0.5px] border-[#BBBBBB] rounded-md h-fit\">\r\n                <h2 className=\" font-bold pt-1 px-2 \"></h2>\r\n                <ul className=\" \">\r\n                  {commentsResponse?.comments?.map(\r\n                    (comment: Comment, index: number) => (\r\n                      <ul\r\n                        key={index}\r\n                        className=\" flex place-content-between mx-2 border-b-2 pb-1 last:border-b-0 relative\"\r\n                      >\r\n                        <li className=\" mt-2 text-sm overflow-hidden mr-16\">\r\n                          {comment?.comment}\r\n                        </li>\r\n                        <li className=\" mt-2 text-sm absolute right-24\">\r\n                          {`${comment?.createdById.slice(0, 5)}...`}\r\n                        </li>\r\n                        <li className=\" mt-2 ml-5 text-sm min-w-[78px]\">\r\n                          👍 👎 (+3)\r\n                        </li>\r\n                      </ul>\r\n                    )\r\n                  )}\r\n                </ul>\r\n                <div className=\" mb-2 mt-7\">\r\n                  <Pagination\r\n                    activePage={commentIndex}\r\n                    itemsCountPerPage={7}\r\n                    totalItemsCount={commentsResponse?.commentsCount || 1}\r\n                    pageRangeDisplayed={5}\r\n                    prevPageText={\"‹\"}\r\n                    nextPageText={\"›\"}\r\n                    onChange={handlePageChange}\r\n                    innerClass=\" flex justify-center mt-[15px]\"\r\n                    itemClass=\" hover:text-blue-400 flex border-[1px] divide-solid border-[#e2e2e2] inline-block w-[30px] h-[30px] justify-center align-center\"\r\n                    linkClass=\" w-full flex justify-center mt-[0.8px]\"\r\n                    activeClass=\" text-blue-400\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\" mt-3 sm:mt-7  px-3 py-3 \">\r\n        <div className=\" \">\r\n          <h2 className=\" font-bold text-xl border-b-[1px] py-2\">줄거리</h2>\r\n          <p className=\" whitespace-pre-wrap mt-2\">{fiction?.synopsis}</p>\r\n        </div>\r\n        <div className=\" mt-3\">\r\n          <h2 className=\" font-bold text-xl mt-4 border-b-[1px] py-2\">\r\n            등장인물\r\n          </h2>\r\n          {fiction?.characters}\r\n        </div>\r\n        <div className=\" \">\r\n          <h2 className=\" font-bold text-xl mt-4 border-b-[1px] py-2\">\r\n            세계관 및 설정\r\n          </h2>\r\n          {/* <a className=\" \">{fiction?.setup || \"\"}</a> */}\r\n          <ReactMarkdown remarkPlugins={[remarkGfm]}>\r\n            {fiction.setup || \"\"}\r\n          </ReactMarkdown>\r\n        </div>\r\n      </div>\r\n      <div className=\" mt-3 sm:mt-7 bg-white px-3 py-3 border-[0.5px] border-[#BBBBBB] rounded-md\">\r\n        <h3 className=\" font-bold text-xl\">비슷한 소설</h3>\r\n        <div className=\" mt-6 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n          {similarFictions?.slice(0, 4).map((fiction) => (\r\n            <div key={fiction?.id}>\r\n              <div className=\"h-56 w-full mb-4 bg-slate-300\"></div>\r\n              <h3 className=\" text-gray-700 -mb-1\">{fiction?.title}</h3>\r\n              <span>description</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport const getStaticProps: GetStaticProps = async (ctx) => {\r\n  if (!ctx?.params?.id) {\r\n    return {\r\n      props: {},\r\n    };\r\n  }\r\n  const fiction = await client.fiction.findUnique({\r\n    where: {\r\n      id: +ctx.params.id!.toString(),\r\n    },\r\n    include: {\r\n      fictionStat: true,\r\n      userFictionStat: {\r\n        include: {\r\n          userRationOnFictions: true,\r\n          _count: {\r\n            select: {\r\n              users: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      keywords: {\r\n        include: {\r\n          keyword: {\r\n            select: {\r\n              name: true,\r\n              isOfHeroine: true,\r\n              isOfMC: true,\r\n              isOfCons: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n      author: true,\r\n    },\r\n  });\r\n\r\n  const arr: any[] = [];\r\n  fiction?.keywords.map((item) => arr.push(item?.keyword?.name));\r\n  const keywordSame = arr.map((word) => ({\r\n    keywords: {\r\n      some: {\r\n        keyword: {\r\n          name: {\r\n            equals: word,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  }));\r\n\r\n  const arr2: any[] = [];\r\n  const similarFictions = await client.fiction.findMany({\r\n    where: {\r\n      OR: keywordSame,\r\n      AND: {\r\n        id: {\r\n          not: fiction?.id,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  similarFictions.map((item) => arr2.push([item.id, item.title]));\r\n\r\n  const isLiked = false;\r\n\r\n  // const ration = await client.userFictionStat.findFirst({\r\n  //   where: {\r\n  //     fictionId: fiction?.id,\r\n  //   },\r\n  //   select: {\r\n  //     originality: true,\r\n  //     writing: true,\r\n  //     character: true,\r\n  //     verisimilitude: true,\r\n  //     synopsisComposition: true,\r\n  //     value: true,\r\n  //   },\r\n  // });\r\n\r\n  return {\r\n    props: {\r\n      fiction: JSON.parse(JSON.stringify(fiction)),\r\n      similarFictions: JSON.parse(JSON.stringify(similarFictions)),\r\n      isLiked,\r\n    },\r\n  };\r\n};\r\n\r\nexport default FictionDetail;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\index.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\edit.tsx",["235"],"import React from \"react\";\r\nimport type { NextPage } from \"next\";\r\n// import Input from \"@components/input\";\r\nimport useUser from \"@libs/client/useUser\";\r\n\r\nconst EditProfile: NextPage = () => {\r\n  const { user } = useUser();\r\n\r\n  return <>edit page</>;\r\n};\r\n\r\nexport default EditProfile;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\profile\\index.tsx",["236","237"],"import React from \"react\";\r\nimport { Fiction, User, Comment, UserFictionStat } from \"@prisma/client\";\r\nimport type { NextPage } from \"next\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport useSWR from \"swr\";\r\nimport Image from \"next/image\";\r\n\r\ninterface CommentWithUser extends Comment {\r\n  createdBy: User;\r\n  fiction: Fiction;\r\n  userFictionStat: UserFictionStatWithFiction;\r\n}\r\n\r\ninterface UserFictionStatWithFiction extends UserFictionStat {\r\n  fiction: Fiction;\r\n}\r\n\r\ninterface CommentsResponse {\r\n  ok: boolean;\r\n  comments: CommentWithUser[];\r\n}\r\n\r\nconst Profile: NextPage = () => {\r\n  // const { user, isLoading } = useUser();\r\n  // const { data: user, error } = useSWR(\"/api/users/me\");\r\n  const { data } = useSWR<CommentsResponse>(\r\n    typeof window === \"undefined\" ? null : \"/api/comments\"\r\n  );\r\n  const { data: session, status } = useSession();\r\n\r\n  const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  // console.log(session);\r\n  return (\r\n    <div className=\"   w-[100vw] max-w-[1300px] min-h-[213px] \">\r\n      <div className=\" bg-slate-400 mb-7 pl-6 py-4\">\r\n        <h5 className=\" font-bold\">계정 정보</h5>\r\n        <div className=\" \">\r\n          {/* <img src={session?.user?.image}></img> */}\r\n          <Image\r\n            src={session?.user?.image || \"/\"}\r\n            width={64}\r\n            height={64}\r\n            alt={session?.user?.id}\r\n          />\r\n          <div>{`사용자 - ` + session?.user?.name}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\" grid grid-cols-12\">\r\n        <div className=\" col-span-0 lg:col-span-1 \"></div>\r\n        <ul className=\" col-span-12 lg:col-span-10\">\r\n          <h5 className=\" font-bold \">내가 쓴 댓글</h5>\r\n          {data?.comments?.map((comment, i) => (\r\n            <li\r\n              key={i}\r\n              className=\" flex place-content-between items-center mb-2\"\r\n            >\r\n              <div className=\" text-xs ring-black bg-black text-white p-1 rounded\">\r\n                {comment?.userFictionStat?.fiction.title}\r\n              </div>\r\n              <div>{comment.comment}</div>\r\n              <div className=\" relative right-0\">{}</div>\r\n\r\n              {/* <li\r\n                  key={index}\r\n                  className=\" flex place-content-between mx-2 border-b-2 pb-1 last:border-b-0 relative\"\r\n                >\r\n                  <div className=\" mt-2 text-sm overflow-hidden mr-16\">\r\n                    {dummyComment[item]}\r\n                  </div>\r\n                  <div className=\" mt-2 text-sm absolute right-24\">{item}</div>\r\n                  <div className=\" mt-2 ml-5 text-sm min-w-[78px]\">\r\n                    👍 👎 (+3)\r\n                  </div>\r\n                </> */}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div className=\" col-span-0 lg:col-span-1 \"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\ranking\\index.tsx",["238"],"import React from \"react\";\r\nimport type { NextPage } from \"next\";\r\n\r\nconst Ranking: NextPage = () => {\r\n  const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n  return (\r\n    <>\r\n      <br></br>\r\n      랭킹 페이지는 업데이트 예정입니다.\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Ranking;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\index.tsx",["239"],"import React from \"react\";\r\nimport { NextPage } from \"next\";\r\n\r\nconst Search: NextPage = () => {\r\n  const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n  // const [text, updateText] = useState(\"\");\r\n  // // 'text'가 변경되어도 메모합니다:\r\n  // const handleSubmit = useEventCallback(() => {\r\n  //   alert(text);\r\n  // }, [text]);\r\n\r\n  // function useEventCallback(fn: any, dependencies: any) {\r\n  //   const ref = useRef(() => {\r\n  //     throw new Error(\"Cannot call an event handler while rendering.\");\r\n  //   });\r\n\r\n  //   useEffect(() => {\r\n  //     ref.current = fn;\r\n  //   }, [fn, ...dependencies]);\r\n\r\n  //   return useCallback(() => {\r\n  //     const fn = ref.current;\r\n  //     return fn();\r\n  //   }, [ref]);\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <br></br>\r\n      랭킹 페이지는 업데이트 예정입니다.\r\n      {/* <form>\r\n          <input value={text} onChange={(e) => updateText(e.target.value)} />\r\n          <button className=\" bg-blue-200\" onSubmit={handleSubmit}>\r\n            asd\r\n          </button>\r\n        </form> */}\r\n    </>\r\n  );\r\n  // return (\r\n  //   <div>\r\n  //     <div className=\" flex justify-center\">\r\n  //       <ul className=\" grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 px-1 py-2 \">\r\n  //         Ranking 입니다.\r\n  //       </ul>\r\n  //     </div>\r\n  //   </div>\r\n  // );\r\n};\r\n\r\nexport default Search;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\index.tsx",["240","241"],"// import FictionList from \"@components/fictionList\";\r\nimport React from \"react\";\r\nimport { GetStaticPaths, GetStaticProps, NextPage } from \"next\";\r\n// import { useRouter } from \"next/router\";\r\n// import { useEffect } from \"react\";\r\n// import { useRecoilState } from \"recoil\";\r\n// import { pageAtom, searchPageAtom } from \"../../../../atoms\";\r\n\r\n//(fictions, fictionsCount)/\r\nconst SearchKeyword: NextPage = () => {\r\n  // const router = useRouter();\r\n  // const [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n  // const [searchPageIndex, setSearchPageIndex] = useRecoilState(searchPageAtom);\r\n\r\n  // const { search } = router.query;\r\n\r\n  // useEffect(() => {\r\n  //   router.push(`/search/keyword/${search}/${pageIndex}`);\r\n  // }, [searchPageIndex]);\r\n\r\n  return (\r\n    <section className=\"  w-[100vw] max-w-[1300px] min-h-[213px] mx-10\">\r\n      {/* <div className=\" bg-slate-100 mb-7 pl-6 py-4\">\r\n        <h5 className=\" font-bold\">키워드: {router?.query?.search}</h5>\r\n      </div>\r\n      <div className=\" mx-3\">\r\n        <FictionList\r\n          className=\" \"\r\n          data={fictions}\r\n          type={\"fictions_list\"}\r\n          count={fictionsCount}\r\n        />\r\n      </div> */}\r\n    </section>\r\n  );\r\n};\r\n\r\n// export const getStaticPaths: GetStaticPaths = () => {\r\n//   return {\r\n//     paths: [],\r\n//     fallback: \"blocking\",\r\n//   };\r\n// };\r\n\r\n// export const getStaticProps: GetStaticProps = async (ctx) => {\r\n//   if (!ctx?.params?.search) {\r\n//     return {\r\n//       props: {},\r\n//     };\r\n//   }\r\n\r\n//   const fictions = await client?.fiction.findMany({\r\n//     take: 18,\r\n//     where: {\r\n//       keywords: {\r\n//         some: {\r\n//           keyword: {\r\n//             name: ctx?.params?.search.toString(),\r\n//           },\r\n//         },\r\n//       },\r\n//     },\r\n//     include: {\r\n//       _count: {\r\n//         select: {\r\n//           favs: true,\r\n//         },\r\n//       },\r\n//       author: true,\r\n//       userFictionStat: {\r\n//         include: {\r\n//           _count: {\r\n//             select: {\r\n//               users: true,\r\n//             },\r\n//           },\r\n//         },\r\n//       },\r\n//       keywords: {\r\n//         include: {\r\n//           keyword: true,\r\n//         },\r\n//       },\r\n//       categories: {\r\n//         include: {\r\n//           category: true,\r\n//         },\r\n//       },\r\n//     },\r\n//   });\r\n\r\n//   const fictionsCount = await client?.fiction.count({\r\n//     where: {\r\n//       keywords: {\r\n//         some: {\r\n//           keyword: {\r\n//             name: ctx?.params?.search.toString(),\r\n//           },\r\n//         },\r\n//       },\r\n//     },\r\n//   });\r\n\r\n//   return {\r\n//     props: {\r\n//       fictions: JSON.parse(JSON.stringify(fictions)),\r\n//       fictionsCount: JSON.parse(JSON.stringify(fictionsCount)),\r\n//     },\r\n//   };\r\n// };\r\n\r\nexport default SearchKeyword;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\keyword\\[search]\\[page].tsx",["242","243"],"import type {\r\n  GetStaticPaths,\r\n  GetStaticProps,\r\n  GetStaticPropsContext,\r\n  NextPage,\r\n} from \"next\";\r\nimport client from \"@libs/server/client\";\r\nimport { Fiction } from \"@prisma/client\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom } from \"../../../../atoms\";\r\nimport { useRouter } from \"next/router\";\r\n\r\ninterface IParams extends ParsedUrlQuery {\r\n  page: string;\r\n}\r\n\r\ninterface dataResponse {\r\n  fictions: [Fiction];\r\n  fictionsCount: number;\r\n}\r\n\r\nconst SearchKeywordPage: NextPage<dataResponse> = (data) => {\r\n  const router = useRouter();\r\n  const [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n\r\n  const { search } = router.query;\r\n\r\n  useEffect(() => {\r\n    router.push(`/search/keyword/${search}/${pageIndex}`);\r\n  }, [pageIndex]);\r\n\r\n  return (\r\n    <section className=\"  w-[100vw] max-w-[1300px] min-h-[213px] \">\r\n      <div className=\" bg-slate-100 mb-7 pl-6 py-4\">\r\n        <h5 className=\" font-bold\">키워드: {router.query.search}</h5>\r\n      </div>\r\n      <div className=\" mx-3\">\r\n        <FictionList\r\n          className=\" \"\r\n          data={data}\r\n          type={\"fictions_list\"}\r\n          count={data.fictionsCount}\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: [],\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport const getStaticProps: GetStaticProps = async (\r\n  ctx: GetStaticPropsContext\r\n) => {\r\n  const { page, search } = ctx.params as IParams;\r\n  if (!page || !search) {\r\n    return {\r\n      props: {},\r\n    };\r\n  }\r\n\r\n  const fictions = await client.fiction.findMany({\r\n    take: 18,\r\n    skip: (+page - 1) * 18,\r\n    where: {\r\n      keywords: {\r\n        some: {\r\n          keyword: {\r\n            name: search as string,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    include: {\r\n      _count: {\r\n        select: {\r\n          favs: true,\r\n        },\r\n      },\r\n      author: true,\r\n      userFictionStat: {\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              users: true,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      keywords: {\r\n        include: {\r\n          keyword: true,\r\n        },\r\n      },\r\n      categories: {\r\n        include: {\r\n          category: true,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  const fictionsCount = await client.fiction.count({\r\n    where: {\r\n      keywords: {\r\n        some: {\r\n          keyword: {\r\n            name: search as string,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    props: {\r\n      fictions: JSON.parse(JSON.stringify(fictions)),\r\n      fictionsCount: JSON.parse(JSON.stringify(fictionsCount)),\r\n    },\r\n  };\r\n};\r\n\r\nexport default SearchKeywordPage;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\search\\title\\[search].tsx",["244","245","246"],"import React from \"react\";\r\nimport FictionList from \"@components/fictionList\";\r\nimport { NextPage } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom } from \"../../../atoms\";\r\nimport useSWR from \"swr\";\r\n\r\nconst TitleSearch: NextPage = () => {\r\n  const router = useRouter();\r\n  const [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n\r\n  const { data, error, mutate } = useSWR(\r\n    router?.query?.search\r\n      ? typeof window === \"undefined\"\r\n        ? null\r\n        : `/api/search/title/${router?.query?.search}?page=${pageIndex}`\r\n      : null\r\n  );\r\n\r\n  return (\r\n    <section className=\"  w-[100vw] max-w-[1300px] min-h-[213px]\">\r\n      <div className=\" bg-slate-100 mb-7 pl-6 py-4\">\r\n        <h5 className=\" font-bold\">제목: {router.query.search}</h5>\r\n      </div>\r\n\r\n      <FictionList data={data} type={\"fictions_list\"} />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TitleSearch;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\tailwind.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\pages\\_app.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\button.tsx",["247"],"import React from \"react\";\r\nimport { cls } from \"@libs/client/utils\";\r\n\r\ninterface ButtonProps {\r\n  large?: boolean;\r\n  text: string;\r\n  [key: string]: any;\r\n}\r\n\r\nexport default function Button({\r\n  large = false,\r\n  onClick,\r\n  text,\r\n  ...rest\r\n}: ButtonProps) {\r\n  return (\r\n    <button\r\n      {...rest}\r\n      className={cls(\r\n        \"w-full bg-white  hover:border-gray-300 text-black  px-4 border-[0.5px] border-[#BBBBBB] border-transparent rounded-md shadow-sm font-medium focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:outline-none\",\r\n        large ? \"py-3 text-base\" : \"py-2 text-sm \"\r\n      )}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\carousel.tsx",["248","249","250","251","252"],"import React from \"react\";\r\nimport next from \"next\";\r\nimport { useState, useEffect, useRef, TouchEvent } from \"react\";\r\n\r\nexport default function Carousel() {\r\n  // const [currentSlide, setCurrentSlide] = useState(0);\r\n  // const [offSet, setOffSet] = useState(0);\r\n  // const slideRef = useRef(\"\");\r\n\r\n  // window.onload = function touchControll() {\r\n  //   const screenWidth = imgCon?.clientWidth;\r\n  //   let imgCon = document.querySelector(\"#img_container\");\r\n\r\n  //   imgCon?.addEventListener(\"touchstart\", (e) => {\r\n  //     // startPos = e.touches[0].pageX;\r\n  //     console.log(\"2222\");\r\n  //   });\r\n  // };\r\n\r\n  // const TOTAL_SLIDES = 2;\r\n\r\n  // const slideI = () => {\r\n  //   let pos = 0;\r\n  //   setInterval(() => {\r\n  //     pos = (pos + 1) % 3;\r\n  //     let target = document.querySelector(`#img_div_${pos}`);\r\n  //     target?.classList.add(\"-ml-[100%]\");\r\n  //   }, 2000);\r\n  // };\r\n\r\n  // const nextSlide = () => {\r\n  //   if (currentSlide >= TOTAL_SLIDES) {\r\n  //     setCurrentSlide(0);\r\n  //   } else {\r\n  //     setCurrentSlide(currentSlide + 1);\r\n  //   }\r\n  // };\r\n\r\n  // const changeSlide = (index: number) => {\r\n  //   setCurrentSlide(index);\r\n  // };\r\n\r\n  // const prevSlide = () => {\r\n  //   if (currentSlide === 0) {\r\n  //     setCurrentSlide(TOTAL_SLIDES);\r\n  //   } else {\r\n  //     setCurrentSlide(currentSlide - 1);\r\n  //   }\r\n  // };\r\n\r\n  // //touch slide\r\n  // let startPos = 0;\r\n\r\n  // let curPos = 0;\r\n\r\n  // const touchStart = (event: any) => {\r\n  //   let imgCon = document.querySelector(\"#img_container\");\r\n  //   console.log(event?.touches[0].pageX);\r\n  // };\r\n\r\n  // const touchMove = (event: any) => {\r\n  //   let imgICon = document.querySelector(\"#img_inner_container\");\r\n\r\n  //   setOffSet(\r\n  //     Math.round((curPos + (event.targetTouches[0].pageX - startPos)) / 100) *\r\n  //       100\r\n  //   );\r\n  // };\r\n\r\n  // const touchEnd = (event: any) => {\r\n  //   // let imgCon = document.querySelector(\"#img_container\");\r\n  //   // const screenWidth: any = imgCon?.clientWidth;\r\n  //   // const sum = curPos + (event?.touches[0]?.pageX - startPos);\r\n  //   // let destination = Math.round(sum / screenWidth) * screenWidth;\r\n  //   // if (destination > 0) {\r\n  //   //   destination = 0;\r\n  //   // } else if (destination < -(screenWidth * (3 - 1))) {\r\n  //   //   destination = -(screenWidth * (3 - 1));\r\n  //   // }\r\n\r\n  //   // console.log(event?.touches[0]?.pageX);\r\n  //   console.log(offSet);\r\n  //   console.log(\"touchend\");\r\n  // };\r\n\r\n  //   //touch slide end\r\n\r\n  // useEffect(() => {\r\n  // slideRef.current = `-ml-[${100 * currentSlide}%]`;\r\n\r\n  // let cur = `-ml-[${100 * currentSlide}%]`;\r\n  // console.log(cur);\r\n  // console.log(currentSlide);\r\n  // let imgICon = document.querySelector(\"#img_inner_container\");\r\n  // imgICon?.classList.remove(\"-ml-[0%]\");\r\n  // imgICon?.classList.remove(\"-ml-[100%]\");\r\n  // imgICon?.classList.remove(\"-ml-[200%]\");\r\n  // imgICon?.classList.remove(\"-ml-[300%]\");\r\n  // imgICon?.classList.add(cur);\r\n\r\n  // let indexBCon = document.querySelector(\"#indexButtonContainer\");\r\n  // indexBCon?.children[0].classList.replace(\"bg-blue-200\", \"bg-black\");\r\n  // indexBCon?.children[1].classList.replace(\"bg-blue-200\", \"bg-black\");\r\n  // indexBCon?.children[2].classList.replace(\"bg-blue-200\", \"bg-black\");\r\n  // indexBCon?.children[currentSlide].classList.replace(\r\n  //   \"bg-black\",\r\n  //   \"bg-blue-200\"\r\n  // );\r\n\r\n  // let imgCon = document.querySelector(\"#img_container\");\r\n  // imgCon.className = ` translate-x-[${offSet}px] transition-all duration-[0ms]`;\r\n  // imgCon?.addEventListener(\"touchstart\", (e: any) => {\r\n  //   // startPos = e.changedTouches;\r\n  //   console.log(e.changedTouches[0].pageX);\r\n  // });\r\n  // }, [currentSlide]);\r\n\r\n  // useEffect(() => {\r\n  //   let imgCon = document.querySelector(\"#img_container\");\r\n  //   imgCon.className = ` translate-x-[${offSet}px] transition-all duration-[0ms]`;\r\n  //   console.log(\"hi22\");\r\n  //   console.log(offSet);\r\n  // }, [offSet]);\r\n\r\n  return (\r\n    <></>\r\n    // <div className=\" h-[45vh] overflow-hidden w-[100vw] max-h-[250px] min-h-[213px] relative left-1/2 right-1/2 -ml-[50vw] -mr-[50vw]\">\r\n    //   <div\r\n    //     className=\" \"\r\n    //     id=\"img_container\"\r\n    //     // onTouchStart={touchStart}\r\n    //     // onTouchMove={touchMove}\r\n    //     // onTouchEnd={touchEnd}\r\n    //   >\r\n    //     <div\r\n    //       id=\"img_inner_container\"\r\n    //       className=\" overflow-hidden flex w-[300%] transition-all duration-1000 relative\"\r\n    //     >\r\n    //       <div className=\" h-[250px] w-[100%] \" id=\"img_div_1\">\r\n    //         <img\r\n    //           src=\"https://picsum.photos/1422/362?random=1\"\r\n    //           className=\" h-full w-full\"\r\n    //         ></img>\r\n    //       </div>\r\n    //       <div className=\" h-[250px] w-[100%] \" id=\"img_div_2\">\r\n    //         <img\r\n    //           src=\"https://picsum.photos/1422/362?random=2\"\r\n    //           className=\" h-full w-full\"\r\n    //         ></img>\r\n    //       </div>\r\n    //       <div className=\" h-[250px] w-[100%] \" id=\"img_div_3\">\r\n    //         <img\r\n    //           src=\"https://picsum.photos/1422/362?random=3\"\r\n    //           className=\" h-full w-full\"\r\n    //         ></img>\r\n    //       </div>\r\n    //     </div>\r\n    //   </div>\r\n\r\n    //   <div className=\"flex justify-between mx-5 space-x-8 relative bottom-36 opacity-60\">\r\n    //     <button\r\n    //       onClick={prevSlide}\r\n    //       className=\" bg-black text-white hover:text-black border-solid px-2 py-5 hover:bg-white transition-all  rounded-xl font-bold\"\r\n    //     >\r\n    //       &lt;\r\n    //     </button>\r\n    //     <button\r\n    //       onClick={nextSlide}\r\n    //       className=\" bg-black text-white hover:text-black border-solid px-2 py-5 hover:bg-white transition-all rounded-xl font-bold\"\r\n    //     >\r\n    //       &gt;\r\n    //     </button>\r\n    //   </div>\r\n    //   <div\r\n    //     id=\"indexButtonContainer\"\r\n    //     className=\" absolute top-[85%] left-1/2 -translate-x-1/2 opacity-60\"\r\n    //   >\r\n    //     <button\r\n    //       onClick={(e) => changeSlide(0)}\r\n    //       className=\" bg-black rounded-xl w-4 h-4 hover:bg-white transition-all\"\r\n    //     ></button>\r\n    //     <button\r\n    //       onClick={(e) => changeSlide(1)}\r\n    //       className=\" bg-black rounded-xl w-4 h-4 mx-8 hover:bg-white transition-all\"\r\n    //     ></button>\r\n    //     <button\r\n    //       onClick={(e) => changeSlide(2)}\r\n    //       className=\" bg-black rounded-xl w-4 h-4 hover:bg-white transition-all \"\r\n    //     ></button>\r\n    //   </div>\r\n    // </div>\r\n  );\r\n}\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionList.tsx",["253","254","255","256"],"import React from \"react\";\r\nimport {\r\n  Author,\r\n  CategoriesOnFictions,\r\n  Category,\r\n  Fiction,\r\n  FictionStat,\r\n  Keyword,\r\n  KeywordsOnFictions,\r\n  UserFictionStat,\r\n} from \"@prisma/client\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pageAtom, authorPageAtom, searchPageAtom } from \"../atoms\";\r\nimport Pagination from \"react-js-pagination\";\r\n\r\ninterface UserFictionStatWithMore extends UserFictionStat {\r\n  _count: {\r\n    users: number;\r\n  };\r\n}\r\n\r\ninterface FictionWithMore extends Fiction {\r\n  keywords: [KeywordsOnFictionsWithMore];\r\n  fictionStat: [FictionStat];\r\n  userFictionStat: UserFictionStatWithMore;\r\n  author: Author;\r\n  categories: [CategoriesOnFictionsWithMore];\r\n}\r\n\r\ninterface CategoriesOnFictionsWithMore extends CategoriesOnFictions {\r\n  category: Category;\r\n}\r\n\r\ninterface KeywordsOnFictionsWithMore extends KeywordsOnFictions {\r\n  keyword: Keyword;\r\n}\r\n\r\ninterface authorWithMore extends Author {\r\n  fictions: Fiction;\r\n}\r\n\r\nexport default function FictionList(props: any) {\r\n  const router = useRouter();\r\n  const [pageIndex, setPageIndex] = useRecoilState(pageAtom);\r\n  const [authorPageIndex, setAuthorPageIndex] = useRecoilState(authorPageAtom);\r\n  const [searchPageIndex, setSearchPageIndex] = useRecoilState(searchPageAtom);\r\n\r\n  const handlePageChange = (PI: number) => {\r\n    setPageIndex(PI);\r\n    setAuthorPageIndex(PI);\r\n    setSearchPageIndex(PI);\r\n  };\r\n  // console.log(props);\r\n  // console.log(posts);\r\n  // console.log(props?.data);\r\n  return (\r\n    <div className=\" flex justify-center\">\r\n      {props.type === \"fictions_list\" ? (\r\n        <div>\r\n          <ul className=\" grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 py-2\">\r\n            {props?.data?.fictions?.map(\r\n              (fiction: FictionWithMore, i: number) => (\r\n                <li\r\n                  key={fiction.id}\r\n                  className=\" relative flex my-3 bg-white border-[#BBBBBB] rounded-md \"\r\n                >\r\n                  <Link href={`/fictions/${fiction.id}`} passHref>\r\n                    {(fiction.image && (\r\n                      <a className=\" relative w-[108px] h-[166px] min-w-[108px]\">\r\n                        <Image\r\n                          className=\" cursor-pointer\"\r\n                          src={`https://imagedelivery.net/vZ0h3NOKMe-QsJIVyNemEg/${fiction.image}/fiction`}\r\n                          layout=\"fill\"\r\n                          alt={fiction.title}\r\n                        />\r\n                      </a>\r\n                    )) || <a className=\" w-[142px] h-[199.69px]\"></a>}\r\n                  </Link>\r\n                  <div className=\" ml-1 absolute z-10\">\r\n                    {fiction.nationality === \"중국\" ? (\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"24\"\r\n                        zoomAndPan=\"magnify\"\r\n                        viewBox=\"0 0 30 30.000001\"\r\n                        height=\"24\"\r\n                        preserveAspectRatio=\"xMidYMid meet\"\r\n                        version=\"1.0\"\r\n                      >\r\n                        <defs>\r\n                          <clipPath id=\"id1\">\r\n                            <path\r\n                              d=\"M 2.546875 5.527344 L 27.226562 5.527344 L 27.226562 23.671875 L 2.546875 23.671875 Z M 2.546875 5.527344 \"\r\n                              clipRule=\"nonzero\"\r\n                            />\r\n                          </clipPath>\r\n                        </defs>\r\n                        <g clipPath=\"url(#id1)\">\r\n                          <path\r\n                            fill=\"rgb(87.059021%, 16.079712%, 6.269836%)\"\r\n                            d=\"M 27.214844 20.882812 C 27.214844 22.425781 25.988281 23.671875 24.476562 23.671875 L 5.296875 23.671875 C 3.785156 23.671875 2.558594 22.425781 2.558594 20.882812 L 2.558594 8.320312 C 2.558594 6.777344 3.785156 5.527344 5.296875 5.527344 L 24.476562 5.527344 C 25.988281 5.527344 27.214844 6.777344 27.214844 8.320312 Z M 27.214844 20.882812 \"\r\n                            fillOpacity=\"1\"\r\n                            fillRule=\"nonzero\"\r\n                          />\r\n                        </g>\r\n                        <path\r\n                          fill=\"rgb(100%, 87.059021%, 0.779724%)\"\r\n                          d=\"M 10.1875 8.304688 L 10.691406 8.550781 L 11.09375 8.15625 L 11.019531 8.722656 L 11.511719 8.992188 L 10.960938 9.09375 L 10.863281 9.652344 L 10.597656 9.152344 L 10.042969 9.230469 L 10.429688 8.816406 Z M 13.382812 10.355469 L 13.136719 10.871094 L 13.523438 11.28125 L 12.972656 11.203125 L 12.707031 11.707031 L 12.609375 11.144531 L 12.058594 11.042969 L 12.550781 10.773438 L 12.472656 10.210938 L 12.878906 10.605469 Z M 12.726562 12.992188 L 12.910156 13.53125 L 13.46875 13.542969 L 13.023438 13.890625 L 13.183594 14.433594 L 12.726562 14.109375 L 12.265625 14.433594 L 12.429688 13.890625 L 11.980469 13.542969 L 12.542969 13.53125 Z M 10.1875 15.28125 L 10.691406 15.53125 L 11.09375 15.136719 L 11.019531 15.703125 L 11.511719 15.972656 L 10.960938 16.070312 L 10.863281 16.632812 L 10.597656 16.128906 L 10.042969 16.207031 L 10.429688 15.796875 Z M 7.351562 9.683594 L 7.988281 11.546875 L 9.925781 11.585938 L 8.382812 12.777344 L 8.941406 14.667969 L 7.351562 13.539062 L 5.761719 14.667969 L 6.324219 12.777344 L 4.78125 11.585938 L 6.71875 11.546875 Z M 7.351562 9.683594 \"\r\n                          fillOpacity=\"1\"\r\n                          fillRule=\"nonzero\"\r\n                        />\r\n                      </svg>\r\n                    ) : fiction.nationality === \"한국\" ? (\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"24\"\r\n                        zoomAndPan=\"magnify\"\r\n                        viewBox=\"0 0 30 30.000001\"\r\n                        height=\"24\"\r\n                        preserveAspectRatio=\"xMidYMid meet\"\r\n                        version=\"1.0\"\r\n                      >\r\n                        <defs>\r\n                          <clipPath id=\"id1\">\r\n                            <path\r\n                              d=\"M 2.550781 5.53125 L 27.230469 5.53125 L 27.230469 23.675781 L 2.550781 23.675781 Z M 2.550781 5.53125 \"\r\n                              clipRule=\"nonzero\"\r\n                            />\r\n                          </clipPath>\r\n                        </defs>\r\n                        <g clipPath=\"url(#id1)\">\r\n                          <path\r\n                            fill=\"rgb(93.328857%, 93.328857%, 93.328857%)\"\r\n                            d=\"M 27.21875 20.882812 C 27.21875 22.425781 25.992188 23.675781 24.480469 23.675781 L 5.300781 23.675781 C 3.789062 23.675781 2.5625 22.425781 2.5625 20.882812 L 2.5625 8.324219 C 2.5625 6.78125 3.789062 5.53125 5.300781 5.53125 L 24.480469 5.53125 C 25.992188 5.53125 27.21875 6.78125 27.21875 8.324219 Z M 27.21875 20.882812 \"\r\n                            fillOpacity=\"1\"\r\n                            fillRule=\"nonzero\"\r\n                          />\r\n                        </g>\r\n                        <path\r\n                          fill=\"rgb(77.648926%, 4.708862%, 18.818665%)\"\r\n                          d=\"M 17.246094 11.171875 C 15.390625 9.847656 12.828125 10.308594 11.523438 12.203125 C 10.875 13.148438 11.097656 14.453125 12.027344 15.117188 C 12.957031 15.78125 14.238281 15.550781 14.890625 14.605469 C 15.542969 13.65625 16.824219 13.425781 17.753906 14.089844 C 18.683594 14.753906 18.910156 16.058594 18.257812 17.003906 C 19.558594 15.113281 19.105469 12.5 17.246094 11.171875 Z M 17.246094 11.171875 \"\r\n                          fillOpacity=\"1\"\r\n                          fillRule=\"nonzero\"\r\n                        />\r\n                        <path\r\n                          fill=\"rgb(0%, 20.388794%, 47.059631%)\"\r\n                          d=\"M 17.753906 14.089844 C 16.824219 13.425781 15.542969 13.65625 14.890625 14.605469 C 14.238281 15.550781 12.957031 15.78125 12.027344 15.117188 C 11.097656 14.453125 10.875 13.148438 11.523438 12.203125 C 10.222656 14.097656 10.675781 16.707031 12.535156 18.03125 C 14.394531 19.359375 16.953125 18.898438 18.257812 17.003906 C 18.90625 16.058594 18.683594 14.753906 17.753906 14.089844 Z M 17.753906 14.089844 \"\r\n                          fillOpacity=\"1\"\r\n                          fillRule=\"nonzero\"\r\n                        />\r\n                        <path\r\n                          fill=\"rgb(16.079712%, 18.429565%, 19.999695%)\"\r\n                          d=\"M 19.230469 19.886719 L 20.550781 18.285156 L 21.074219 18.734375 L 19.753906 20.335938 Z M 20.988281 17.75 L 22.308594 16.148438 L 22.835938 16.597656 L 21.515625 18.199219 Z M 20.277344 20.785156 L 21.597656 19.183594 L 22.125 19.632812 L 20.804688 21.234375 Z M 22.039062 18.648438 L 23.363281 17.042969 L 23.886719 17.492188 L 22.566406 19.097656 Z M 21.328125 21.683594 L 22.648438 20.082031 L 23.171875 20.53125 L 21.851562 22.132812 Z M 23.089844 19.546875 L 24.40625 17.941406 L 24.933594 18.390625 L 23.613281 19.996094 Z M 23.089844 9.660156 L 23.617188 9.214844 L 24.9375 10.816406 L 24.414062 11.265625 Z M 21.328125 7.523438 L 21.855469 7.074219 L 23.175781 8.679688 L 22.648438 9.125 Z M 20.277344 8.421875 L 20.804688 7.972656 L 23.886719 11.714844 L 23.363281 12.164062 Z M 19.230469 9.316406 L 19.753906 8.867188 L 21.074219 10.472656 L 20.550781 10.921875 Z M 20.988281 11.457031 L 21.515625 11.007812 L 22.835938 12.609375 L 22.3125 13.058594 Z M 6.945312 16.59375 L 7.46875 16.148438 L 10.550781 19.890625 L 10.027344 20.339844 Z M 5.898438 17.492188 L 6.421875 17.046875 L 7.742188 18.648438 L 7.21875 19.097656 Z M 7.65625 19.632812 L 8.179688 19.183594 L 9.503906 20.785156 L 8.976562 21.234375 Z M 4.847656 18.390625 L 5.371094 17.941406 L 8.453125 21.683594 L 7.929688 22.132812 Z M 4.847656 10.816406 L 7.925781 7.074219 L 8.453125 7.523438 L 5.371094 11.265625 Z M 5.894531 11.714844 L 8.976562 7.972656 L 9.503906 8.421875 L 6.421875 12.164062 Z M 6.945312 12.609375 L 10.027344 8.867188 L 10.550781 9.316406 L 7.46875 13.058594 Z M 6.945312 12.609375 \"\r\n                          fillOpacity=\"1\"\r\n                          fillRule=\"nonzero\"\r\n                        />\r\n                      </svg>\r\n                    ) : fiction.nationality === \"일본\" ? (\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        width=\"24\"\r\n                        zoomAndPan=\"magnify\"\r\n                        viewBox=\"0 0 30 30.000001\"\r\n                        height=\"24\"\r\n                        preserveAspectRatio=\"xMidYMid meet\"\r\n                        version=\"1.0\"\r\n                      >\r\n                        <defs>\r\n                          <clipPath id=\"id1\">\r\n                            <path\r\n                              d=\"M 2.226562 6.132812 L 27.628906 6.132812 L 27.628906 24.277344 L 2.226562 24.277344 Z M 2.226562 6.132812 \"\r\n                              clipRule=\"nonzero\"\r\n                            />\r\n                          </clipPath>\r\n                        </defs>\r\n                        <g clipPath=\"url(#id1)\">\r\n                          <path\r\n                            fill=\"rgb(93.328857%, 93.328857%, 93.328857%)\"\r\n                            d=\"M 27.621094 21.488281 C 27.621094 23.027344 26.359375 24.277344 24.800781 24.277344 L 5.054688 24.277344 C 3.496094 24.277344 2.234375 23.027344 2.234375 21.488281 L 2.234375 8.925781 C 2.234375 7.382812 3.496094 6.132812 5.054688 6.132812 L 24.800781 6.132812 C 26.359375 6.132812 27.621094 7.382812 27.621094 8.925781 Z M 27.621094 21.488281 \"\r\n                            fillOpacity=\"1\"\r\n                            fillRule=\"nonzero\"\r\n                          />\r\n                        </g>\r\n                        <path\r\n                          fill=\"rgb(92.939758%, 10.5896%, 18.429565%)\"\r\n                          d=\"M 19.863281 15.207031 C 19.863281 15.527344 19.832031 15.84375 19.769531 16.160156 C 19.707031 16.472656 19.613281 16.78125 19.488281 17.074219 C 19.363281 17.371094 19.210938 17.652344 19.03125 17.921875 C 18.851562 18.1875 18.648438 18.433594 18.417969 18.660156 C 18.1875 18.886719 17.941406 19.089844 17.671875 19.269531 C 17.402344 19.445312 17.117188 19.597656 16.816406 19.71875 C 16.515625 19.84375 16.207031 19.933594 15.890625 19.996094 C 15.574219 20.058594 15.25 20.089844 14.925781 20.089844 C 14.601562 20.089844 14.28125 20.058594 13.964844 19.996094 C 13.644531 19.933594 13.335938 19.84375 13.039062 19.71875 C 12.738281 19.597656 12.453125 19.445312 12.183594 19.269531 C 11.914062 19.089844 11.664062 18.886719 11.4375 18.660156 C 11.207031 18.433594 11.003906 18.1875 10.824219 17.921875 C 10.644531 17.652344 10.492188 17.371094 10.367188 17.074219 C 10.242188 16.78125 10.148438 16.472656 10.085938 16.160156 C 10.023438 15.84375 9.992188 15.527344 9.992188 15.207031 C 9.992188 14.886719 10.023438 14.566406 10.085938 14.253906 C 10.148438 13.9375 10.242188 13.632812 10.367188 13.335938 C 10.492188 13.039062 10.644531 12.757812 10.824219 12.492188 C 11.003906 12.226562 11.207031 11.980469 11.4375 11.75 C 11.664062 11.523438 11.914062 11.324219 12.183594 11.144531 C 12.453125 10.964844 12.738281 10.816406 13.039062 10.691406 C 13.335938 10.570312 13.644531 10.476562 13.964844 10.414062 C 14.28125 10.351562 14.601562 10.320312 14.925781 10.320312 C 15.25 10.320312 15.574219 10.351562 15.890625 10.414062 C 16.207031 10.476562 16.515625 10.570312 16.816406 10.691406 C 17.117188 10.816406 17.402344 10.964844 17.671875 11.144531 C 17.941406 11.324219 18.1875 11.523438 18.417969 11.75 C 18.648438 11.980469 18.851562 12.226562 19.03125 12.492188 C 19.210938 12.757812 19.363281 13.039062 19.488281 13.335938 C 19.613281 13.632812 19.707031 13.9375 19.769531 14.253906 C 19.832031 14.566406 19.863281 14.886719 19.863281 15.207031 Z M 19.863281 15.207031 \"\r\n                          fillOpacity=\"1\"\r\n                          fillRule=\"nonzero\"\r\n                        />\r\n                      </svg>\r\n                    ) : fiction.nationality === \"영미권\" ? (\r\n                      \"EN\"\r\n                    ) : null}\r\n                  </div>\r\n                  <div className=\" flex-col px-2 pb-2\">\r\n                    {fiction.categories?.map((category, i) => (\r\n                      <span\r\n                        key={i}\r\n                        className=\" text-xs text-gray-400 mr-[0.35rem]\"\r\n                      >\r\n                        {category.category.name}\r\n                      </span>\r\n                    ))}\r\n                    {/* <p className=\" text-xs text-gray-400\">{fiction.genre}</p> */}\r\n                    <h3>\r\n                      <Link href={`/fictions/${fiction.id}`}>\r\n                        <a\r\n                          title={`${fiction.title}`}\r\n                          className=\" cursor-pointer hover:underline font-bold \"\r\n                        >\r\n                          {fiction.title}\r\n                        </a>\r\n                      </Link>\r\n                    </h3>\r\n                    <p className=\" text-xs text-gray-400\">\r\n                      {\"by \"}\r\n                      <Link href={`/authors/name/${fiction?.author?.name}`}>\r\n                        <a\r\n                          title={`${fiction?.author?.name}`}\r\n                          className=\" cursor-pointer hover:underline\"\r\n                        >\r\n                          {fiction?.author?.name || \"작자 미상\"}\r\n                        </a>\r\n                      </Link>\r\n                    </p>\r\n                    <p className=\" max-h-[24px] overflow-hidden mt-1\">\r\n                      {fiction?.keywords\r\n                        ?.filter(\r\n                          (keyword) => keyword.keyword.isOfCons === false\r\n                        )\r\n                        .map((keyword, i) => (\r\n                          <Link\r\n                            key={i}\r\n                            href={`/search/keyword/${keyword.keyword.name}/1`}\r\n                            passHref\r\n                          >\r\n                            <a\r\n                              title={`${keyword.keyword.name}`}\r\n                              className=\" hover:underline cursor-pointer whitespace-nowrap bg-gray-200 text-[#666676] peer-checked:bg-blue-600 peer-checked:text-white  hover:border-gray-400 hover:bg-gray-200 mt-1 text-sm text-center mr-[0.35rem] rounded-3xl border-[#BBBBBB] p-[0.2rem]\"\r\n                            >\r\n                              #{keyword.keyword.name}\r\n                            </a>\r\n                          </Link>\r\n                        ))}\r\n                    </p>\r\n                    <p className=\" text-xs h-12 overflow-hidden mt-1\">\r\n                      {fiction.synopsis.slice(0, 150)}...\r\n                    </p>\r\n                    <p className=\" text-xs\"></p>\r\n                    <p className=\" overflow-hidden text-xs \"></p>\r\n                    <p className=\" flex text-xs font-bold mt-1\">\r\n                      <strong className=\" flex w-[4.2rem] text-xs\">\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          width=\"14\"\r\n                          height=\"14\"\r\n                          fill=\"currentColor\"\r\n                          className=\"bi bi-star-fill\"\r\n                          viewBox=\"0 0 16 16\"\r\n                        >\r\n                          <path d=\"M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z\" />{\" \"}\r\n                        </svg>\r\n                        &nbsp;\r\n                        {fiction.userFictionStat?.total || 0}(\r\n                        {fiction.userFictionStat?._count?.users || 0})\r\n                      </strong>\r\n                      <strong className=\" w-24\">\r\n                        {fiction.volume || \"???\"}화 &nbsp;\r\n                        {fiction.currentState || \"???화 완결\"}\r\n                      </strong>\r\n                      <strong className=\" w-20\">{fiction.isTranslated}</strong>\r\n                    </p>\r\n                  </div>\r\n                </li>\r\n              )\r\n            )}\r\n          </ul>\r\n          <div className=\" \">\r\n            {props.isMain === true ? null : (\r\n              <Pagination\r\n                activePage={pageIndex}\r\n                itemsCountPerPage={18}\r\n                totalItemsCount={props?.data?.fictionsCount || 1}\r\n                pageRangeDisplayed={5}\r\n                prevPageText={\"‹\"}\r\n                nextPageText={\"›\"}\r\n                onChange={handlePageChange}\r\n                innerClass=\" flex justify-center mt-[15px]\"\r\n                itemClass=\" hover:text-blue-400 flex border-[1px] divide-solid border-[#e2e2e2] inline-block w-[30px] h-[30px] justify-center align-center\"\r\n                linkClass=\" w-full flex justify-center mt-[0.8px]\"\r\n                activeClass=\" text-blue-400\"\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : props.type === \"authors_list\" ? (\r\n        <div>\r\n          <div className=\" grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 px-1 py-2 \">\r\n            {props?.data?.map((author: authorWithMore, i: number) => (\r\n              <Link\r\n                key={author.id}\r\n                href={`/authors/name/${author.name}`}\r\n                passHref\r\n              >\r\n                <a className=\" relative flex-col w-[144px] h-[190] my-3 mx-1 cursor-pointer bg-white border-[0.5px] border-[#BBBBBB] rounded-md overflow-hidden\">\r\n                  <Image\r\n                    className=\" \"\r\n                    src=\"/anoynymous_user.png\"\r\n                    width={142}\r\n                    height={160}\r\n                    alt={author.name}\r\n                  />\r\n                  <div className=\" ml-1 absolute bottom-[17.2rem] z-10\"></div>\r\n                  <div className=\" flex-col px-2 pb-2\">\r\n                    <div className=\" flex justify-between\"></div>\r\n                    <div className=\" text-center\">{author.name}</div>\r\n                  </div>\r\n                </a>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n          <div className=\" \">\r\n            <Pagination\r\n              activePage={authorPageIndex}\r\n              itemsCountPerPage={18}\r\n              totalItemsCount={props?.authorsCount || 1}\r\n              pageRangeDisplayed={5}\r\n              prevPageText={\"‹\"}\r\n              nextPageText={\"›\"}\r\n              onChange={handlePageChange}\r\n              innerClass=\" flex justify-center mt-[15px]\"\r\n              itemClass=\" hover:text-blue-400 flex border-[1px] divide-solid border-[#e2e2e2] inline-block w-[30px] h-[30px] justify-center align-center\"\r\n              linkClass=\" w-full flex justify-center mt-[0.8px]\"\r\n              activeClass=\" text-blue-400\"\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\fictionRadarChart.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\footer.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\gnb.tsx",["257","258","259"],"import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport { useSession, signIn, signOut } from \"next-auth/react\";\r\nimport useUser from \"@libs/client/useUser\";\r\nimport Image from \"next/image\";\r\nimport logo from \"../public/fdb_logo.png\";\r\n\r\nexport default function Gnb() {\r\n  const { data: nextSession } = useSession();\r\n  const { user, isLoading } = useUser();\r\n  // const { data: CredentailSession } = useSWR(\"/api/users/me\");\r\n  // console.log(user);\r\n  // console.log(nextSession);\r\n  // useEffect(() => {\r\n  //   if (data && !data.ok) {\r\n  //     router.replace(\"/enter\");\r\n  //   }\r\n  // }, [data, router]);\r\n  // console.log(data);\r\n  return (\r\n    <header className=\"flex bg-blue-200 fixed top-0 w-full py-2 z-20\">\r\n      <nav className=\"flex w-full justify-between items-center\">\r\n        <ul className=\"flex uppercase font-bold \">\r\n          <li className=\" ml-3 mr-3 cursor-pointer\">\r\n            <Link className=\" \" href=\"/\" passHref>\r\n              <a className=\" flex items-center \">\r\n                <Image\r\n                  className=\" rounded-xl border-blue-800 border-4 border-solid\"\r\n                  src={logo}\r\n                  width={26}\r\n                  height={26}\r\n                  alt=\"FictionDbs\"\r\n                ></Image>\r\n              </a>\r\n            </Link>\r\n          </li>\r\n          <li className=\"mr-3\">\r\n            <Link href=\"/fictions/all/all/all/1/all\">\r\n              <a>작품</a>\r\n            </Link>\r\n          </li>\r\n          <li className=\"mr-3\">\r\n            <Link href=\"/authors/1\" passHref>\r\n              <a>작가</a>\r\n            </Link>\r\n          </li>\r\n          <Link href=\"/ranking\">\r\n            <li className=\"mr-3\">Ranking</li>\r\n          </Link>\r\n          {user ? (\r\n            <li className=\"mr-3\">\r\n              <Link href=\"/fictions/create\">\r\n                <a>Create</a>\r\n              </Link>\r\n            </li>\r\n          ) : null}\r\n        </ul>\r\n        <ul className=\" flex font-bold items-center\">\r\n          {user ? <li className=\"mr-3\">Admin</li> : null}\r\n          {nextSession ? (\r\n            <li className=\" mr-3 p-0 flex items-center cursor-pointer min-w-[26px]\">\r\n              <Link className=\" rounded-full\" href=\"/profile\" passHref>\r\n                <a className=\" flex items-center\">\r\n                  <Image\r\n                    className=\" rounded-full\"\r\n                    src={nextSession?.user?.image ?? \"\"}\r\n                    width={26}\r\n                    height={26}\r\n                    alt={nextSession?.user?.id ?? \"\"}\r\n                  ></Image>\r\n                </a>\r\n              </Link>\r\n            </li>\r\n          ) : null}\r\n          {nextSession ? (\r\n            <button className=\" mr-5 font-bold\" onClick={() => signOut()}>\r\n              Sign out\r\n            </button>\r\n          ) : (\r\n            <li>\r\n              <Link href=\"/enter\">\r\n                <a className=\" mr-5 hover:cursor-pointer\">Enter</a>\r\n              </Link>\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\input.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\mdEditor.tsx",["260","261"],"import React, { useState, useCallback } from \"react\";\r\nimport \"@uiw/react-md-editor/markdown-editor.css\";\r\nimport \"@uiw/react-markdown-preview/markdown.css\";\r\n\r\n// const MDEditor = dynamic(() => import(\"@uiw/react-md-editor\"), {\r\n//   ssr: false,\r\n// });\r\n\r\nconst MdEditor = () => {\r\n  // const [md, setMd] = useState<string | undefined>(\"# Hello World\");\r\n\r\n  // const handleChange = useCallback((md: any) => {\r\n  //   setMd(md);\r\n  //   console.log(md);\r\n  // }, []);\r\n\r\n  return <>{/* <MDEditor value={md} onChange={handleChange} /> */}</>;\r\n};\r\n\r\nexport default MdEditor;\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\search.tsx",["262","263","264","265","266","267"],"import React from \"react\";\r\nimport Input from \"@components/input\";\r\nimport { FieldErrors, useForm } from \"react-hook-form\";\r\nimport { useRouter } from \"next/router\";\r\n\r\ninterface SearchForm {\r\n  title?: string;\r\n  author?: string;\r\n}\r\n\r\nexport default function Search() {\r\n  // const [search, setSearch] = useState<string>();\r\n  // const [input, setInput] = useState(\"\");\r\n  const router = useRouter();\r\n\r\n  const onValid = async (data: SearchForm) => {\r\n    if (!data.title) return;\r\n    router.push(`/search/title/${data.title}`);\r\n  };\r\n\r\n  //   const { result } = useSearch(search);\r\n\r\n  //   if (result) console.log(result);\r\n\r\n  const onInvalid = (erros: FieldErrors) => {\r\n    alert(\"한글, 영어, 숫자만 입력가능합니다.\");\r\n  };\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    resetField,\r\n    watch,\r\n    formState: { errors },\r\n    setValue,\r\n  } = useForm<SearchForm>({ mode: \"onBlur\" });\r\n\r\n  // console.log(errors);\r\n\r\n  return (\r\n    <div className=\" \">\r\n      <form\r\n        className=\" max-w-[581px] mx-auto\"\r\n        onSubmit={handleSubmit(onValid, onInvalid)}\r\n      >\r\n        {/* <input\r\n        value={input}\r\n        onChange={handleInputChange}\r\n        placeholder=\"검색어를 입력하세요\"\r\n      /> */}\r\n        <Input\r\n          register={register(\"title\", {\r\n            pattern: {\r\n              value: /^[ㄱ-ㅎ|가-힣|a-z|A-Z|0-9|]+$/,\r\n              message: \"한글,영어, 숫자만 입력할 수 있습니다.\",\r\n            },\r\n          })}\r\n          required\r\n          label=\"\"\r\n          name=\"title\"\r\n          type=\"text\"\r\n          kind=\"search\"\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\textarea.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\top.tsx",[],"C:\\Users\\mk448\\Dv_study\\fdbs_proto\\fdbsVer1.0\\components\\userStat.tsx",["268","269","270","271","272","273","274","275","276","277","278"],"import React from \"react\";\r\nimport useMutation from \"@libs/client/useMutation\";\r\nimport { Fiction } from \"@prisma/client\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Input from \"@components/input\";\r\nimport useSWR, { useSWRConfig } from \"swr\";\r\n// import { validateRequest } from \"twilio/lib/webhooks/webhooks\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { useRef } from \"react\";\r\n\r\ninterface RateUserStatForm {\r\n  UserFictionStat: number[];\r\n  comment: string;\r\n}\r\n\r\nexport default function UserStat() {\r\n  const { data: session, status } = useSession();\r\n  const router = useRouter();\r\n  const { mutate: unboundMutate } = useSWRConfig();\r\n  const [rateUserStat, { loading, data, error }] =\r\n    useMutation<RateUserStatMutation>(\r\n      `/api/fictions/${router.query.id}/userRate`\r\n    );\r\n  const { data: UserStatData, mutate: boundMutate } = useSWR<any>(\r\n    router.query.id\r\n      ? typeof window === \"undefined\"\r\n        ? null\r\n        : `/api/fictions/${router.query.id}`\r\n      : null\r\n  );\r\n\r\n  interface RateUserStatMutation {\r\n    ok: boolean;\r\n    fiction: Fiction;\r\n  }\r\n\r\n  // Useform\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    resetField,\r\n    watch,\r\n    formState: { errors },\r\n    setValue,\r\n  } = useForm<RateUserStatForm>({ mode: \"onBlur\" });\r\n\r\n  const [\r\n    curOriginality,\r\n    curWriting,\r\n    curCharacter,\r\n    curVerisimilitude,\r\n    curSynopsisCompositon,\r\n    curValue,\r\n  ] = watch()?.UserFictionStat || [0, 0, 0, 0, 0, 0];\r\n\r\n  const userCount = UserStatData?.prevFiction?.userFictionStat?._count?.users;\r\n\r\n  function btnOnOff() {\r\n    const target = document.getElementById(\r\n      \"rateButton\"\r\n    ) as HTMLButtonElement | null;\r\n    target!.disabled = !target?.disabled;\r\n  }\r\n\r\n  //소수점 둘째자리 숫자로 변환\r\n  const fixFloat = function (n: number) {\r\n    const m = Number((Math.abs(n) * 100).toPrecision(15));\r\n    return Math.round(m) / (100 * Math.sign(n));\r\n  };\r\n\r\n  const buttonFlag = useRef(true);\r\n  const onRateClick = (data: RateUserStatForm) => {\r\n    // console.log(buttonFlag.current);\r\n    if (!buttonFlag.current) {\r\n      alert(\"평가는 한번만 가능합니다.\");\r\n      return;\r\n    }\r\n    buttonFlag.current = !buttonFlag.current;\r\n    setTimeout(() => {\r\n      buttonFlag.current = !buttonFlag.current;\r\n      // console.log(\"해제완료\");\r\n    }, 5000);\r\n    btnOnOff();\r\n    if (!session) {\r\n      alert(\"Please log in\");\r\n      btnOnOff();\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !curOriginality ||\r\n      !curWriting ||\r\n      !curCharacter ||\r\n      !curVerisimilitude ||\r\n      !curSynopsisCompositon ||\r\n      !curValue\r\n    ) {\r\n      alert(\"Please fill in the blanks\");\r\n      btnOnOff();\r\n      return;\r\n    }\r\n\r\n    // fixFloat(\r\n    //   (+alreadyExists.originality * alreadyExists._count.users +\r\n    //     +UserFictionStat[0]) /\r\n    //     (+alreadyExists._count.users + 1)\r\n    // )\r\n\r\n    // console.log(data);\r\n\r\n    rateUserStat(data, \"POST\");\r\n    unboundMutate(\r\n      `/api/fictions/${router.query.id}`,\r\n      (prev: any) => ({\r\n        ...prev,\r\n        prevFiction: {\r\n          ...prev?.prevFiction,\r\n          userFictionStat: {\r\n            originality:\r\n              ((+prev?.prevFiction?.userFictionStat?.originality || 0) *\r\n                (+prev?.prevFiction?.userFictionStat?._count?.users || 0) +\r\n                +curOriginality) /\r\n              ((+prev?.prevFiction?.userFictionStat?._count?.users || 0) + 1),\r\n            writing:\r\n              ((+prev?.prevFiction?.userFictionStat?.writing || 0) *\r\n                (+prev?.prevFiction?.userFictionStat?._count?.users || 0) +\r\n                +curWriting) /\r\n              ((+prev?.prevFiction?.userFictionStat?._count?.users || 0) + 1),\r\n            character:\r\n              ((+prev?.prevFiction?.userFictionStat?.character || 0) *\r\n                (+prev?.prevFiction?.userFictionStat?._count?.users || 0) +\r\n                +curCharacter) /\r\n              ((+prev?.prevFiction?.userFictionStat?._count?.users || 0) + 1),\r\n            verisimilitude:\r\n              ((+prev?.prevFiction?.userFictionStat?.verisimilitude || 0) *\r\n                (+prev?.prevFiction?.userFictionStat?._count?.users || 0) +\r\n                +curVerisimilitude) /\r\n              ((+prev?.prevFiction?.userFictionStat?._count?.users || 0) + 1),\r\n            synopsisComposition:\r\n              ((+prev?.prevFiction?.userFictionStat?.synopsisComposition || 0) *\r\n                (+prev?.prevFiction?.userFictionStat?._count?.users || 0) +\r\n                +curSynopsisCompositon) /\r\n              ((+prev?.prevFiction?.userFictionStat?._count?.users || 0) + 1),\r\n            value:\r\n              ((+prev?.prevFiction?.userFictionStat?.value || 0) *\r\n                (+prev?.prevFiction?.userFictionStat?._count?.users || 0) +\r\n                +curValue) /\r\n              ((+prev?.prevFiction?.userFictionStat?._count?.users || 0) + 1),\r\n            _count: {\r\n              users:\r\n                +prev?.prevFiction?.userFictionStat?._count?.users + 1 || 1,\r\n            },\r\n          },\r\n        },\r\n        userRation: {\r\n          originality: +curOriginality,\r\n          writing: +curWriting,\r\n          character: +curOriginality,\r\n          verisimilitude: +curVerisimilitude,\r\n          synopsisComposition: +curSynopsisCompositon,\r\n          value: +curValue,\r\n        },\r\n      }),\r\n      false\r\n    );\r\n    btnOnOff();\r\n  };\r\n\r\n  // console.log(data ? data : null);\r\n  // console.log(\"Hi\");\r\n  // console.log(watch());\r\n  // console.log(UserStatData?.UserFictionStat);\r\n\r\n  // console.log(userCount);\r\n\r\n  return (\r\n    <form className=\" w-full\" onSubmit={handleSubmit(onRateClick)}>\r\n      <div className=\" grid grid-cols-2 mt-3\">\r\n        <Input\r\n          register={register(\"UserFictionStat.0\", {\r\n            max: 5,\r\n            min: 0,\r\n            pattern: /^[0-9]*$/,\r\n          })}\r\n          required\r\n          label=\"오리지널리티\"\r\n          name=\"UserFictionStat\"\r\n          type=\"number\"\r\n          kind=\"status\"\r\n        />\r\n        <Input\r\n          register={register(\"UserFictionStat.1\", {\r\n            max: 5,\r\n            min: 0,\r\n            pattern: /^[0-9]*$/,\r\n          })}\r\n          required\r\n          label=\"필력\"\r\n          name=\"UserFictionStat\"\r\n          type=\"number\"\r\n          kind=\"status\"\r\n        />\r\n        <Input\r\n          register={register(\"UserFictionStat.2\", {\r\n            max: 5,\r\n            min: 0,\r\n            pattern: /^[0-9]*$/,\r\n          })}\r\n          required\r\n          label=\"캐릭터성\"\r\n          name=\"UserFictionStat\"\r\n          type=\"number\"\r\n          kind=\"status\"\r\n        />\r\n        <Input\r\n          register={register(\"UserFictionStat.3\", {\r\n            max: 5,\r\n            min: 0,\r\n            pattern: /^[0-9]*$/,\r\n          })}\r\n          required\r\n          label=\"핍진성\"\r\n          name=\"UserFictionStat\"\r\n          type=\"number\"\r\n          kind=\"status\"\r\n        />\r\n        <Input\r\n          register={register(\"UserFictionStat.4\", {\r\n            max: 5,\r\n            min: 0,\r\n            pattern: /^[0-9]*$/,\r\n          })}\r\n          required\r\n          label=\"스토리\"\r\n          name=\"UserFictionStat\"\r\n          type=\"number\"\r\n          kind=\"status\"\r\n        />\r\n        <Input\r\n          register={register(\"UserFictionStat.5\", {\r\n            max: 5,\r\n            min: 0,\r\n            pattern: /^[0-9]*$/,\r\n          })}\r\n          required\r\n          label=\"작품성\"\r\n          name=\"UserFictionStat\"\r\n          type=\"number\"\r\n          kind=\"status\"\r\n        />\r\n      </div>\r\n      <Input\r\n        register={register(\"comment\", {\r\n          maxLength: 40,\r\n        })}\r\n        required\r\n        label=\"코멘트\"\r\n        name=\"Comment\"\r\n        type=\"text\"\r\n        kind=\"comment\"\r\n      ></Input>\r\n      <button\r\n        id=\"rateButton\"\r\n        type=\"submit\"\r\n        className=\"w-full bg-white  hover:border-gray-300 text-black  px-4 border-[0.5px] border-[#BBBBBB] border-transparent rounded-md shadow-sm font-medium focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:outline-none\"\r\n      >\r\n        등록\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n",{"ruleId":"279","severity":2,"message":"280","line":14,"column":16,"nodeType":"281","messageId":"282","endLine":14,"endColumn":20},{"ruleId":"279","severity":2,"message":"283","line":133,"column":9,"nodeType":"281","messageId":"282","endLine":133,"endColumn":15},{"ruleId":"279","severity":2,"message":"284","line":22,"column":9,"nodeType":"281","messageId":"282","endLine":22,"endColumn":14},{"ruleId":"279","severity":2,"message":"285","line":40,"column":11,"nodeType":"281","messageId":"282","endLine":40,"endColumn":18},{"ruleId":"279","severity":2,"message":"286","line":47,"column":11,"nodeType":"281","messageId":"282","endLine":47,"endColumn":16},{"ruleId":"287","severity":1,"message":"288","line":28,"column":6,"nodeType":"289","endLine":28,"endColumn":23,"suggestions":"290"},{"ruleId":"279","severity":2,"message":"291","line":35,"column":9,"nodeType":"281","messageId":"282","endLine":35,"endColumn":12},{"ruleId":"279","severity":2,"message":"292","line":34,"column":21,"nodeType":"281","messageId":"282","endLine":34,"endColumn":33},{"ruleId":"287","severity":1,"message":"293","line":39,"column":6,"nodeType":"289","endLine":39,"endColumn":17,"suggestions":"294"},{"ruleId":"279","severity":2,"message":"295","line":51,"column":27,"nodeType":"281","messageId":"282","endLine":51,"endColumn":32},{"ruleId":"279","severity":2,"message":"296","line":64,"column":42,"nodeType":"281","messageId":"282","endLine":64,"endColumn":47},{"ruleId":"279","severity":2,"message":"297","line":69,"column":5,"nodeType":"281","messageId":"282","endLine":69,"endColumn":10},{"ruleId":"279","severity":2,"message":"298","line":72,"column":18,"nodeType":"281","messageId":"282","endLine":72,"endColumn":24},{"ruleId":"279","severity":2,"message":"299","line":108,"column":22,"nodeType":"281","messageId":"282","endLine":108,"endColumn":40},{"ruleId":"300","severity":1,"message":"301","line":195,"column":23,"nodeType":"302","endLine":199,"endColumn":25},{"ruleId":"279","severity":2,"message":"296","line":63,"column":17,"nodeType":"281","messageId":"282","endLine":63,"endColumn":22},{"ruleId":"287","severity":1,"message":"303","line":70,"column":21,"nodeType":"304","endLine":77,"endColumn":32},{"ruleId":"279","severity":2,"message":"305","line":130,"column":5,"nodeType":"281","messageId":"282","endLine":130,"endColumn":16},{"ruleId":"279","severity":2,"message":"296","line":64,"column":17,"nodeType":"281","messageId":"282","endLine":64,"endColumn":22},{"ruleId":"287","severity":1,"message":"303","line":79,"column":21,"nodeType":"304","endLine":86,"endColumn":32},{"ruleId":"279","severity":2,"message":"305","line":126,"column":5,"nodeType":"281","messageId":"282","endLine":126,"endColumn":16},{"ruleId":"279","severity":2,"message":"298","line":109,"column":18,"nodeType":"281","messageId":"282","endLine":109,"endColumn":24},{"ruleId":"287","severity":1,"message":"306","line":194,"column":6,"nodeType":"289","endLine":194,"endColumn":25,"suggestions":"307"},{"ruleId":"279","severity":2,"message":"299","line":229,"column":22,"nodeType":"281","messageId":"282","endLine":229,"endColumn":40},{"ruleId":"300","severity":1,"message":"301","line":319,"column":23,"nodeType":"302","endLine":323,"endColumn":25},{"ruleId":"279","severity":2,"message":"308","line":67,"column":17,"nodeType":"281","messageId":"282","endLine":67,"endColumn":26},{"ruleId":"309","severity":1,"message":"310","line":110,"column":11,"nodeType":"302","endLine":110,"endColumn":56},{"ruleId":"309","severity":1,"message":"310","line":115,"column":11,"nodeType":"302","endLine":115,"endColumn":58},{"ruleId":"279","severity":2,"message":"280","line":7,"column":11,"nodeType":"281","messageId":"282","endLine":7,"endColumn":15},{"ruleId":"279","severity":2,"message":"311","line":29,"column":26,"nodeType":"281","messageId":"282","endLine":29,"endColumn":32},{"ruleId":"279","severity":2,"message":"291","line":31,"column":9,"nodeType":"281","messageId":"282","endLine":31,"endColumn":12},{"ruleId":"279","severity":2,"message":"291","line":5,"column":9,"nodeType":"281","messageId":"282","endLine":5,"endColumn":12},{"ruleId":"279","severity":2,"message":"291","line":5,"column":9,"nodeType":"281","messageId":"282","endLine":5,"endColumn":12},{"ruleId":"279","severity":2,"message":"312","line":3,"column":10,"nodeType":"281","messageId":"282","endLine":3,"endColumn":24},{"ruleId":"279","severity":2,"message":"313","line":3,"column":26,"nodeType":"281","messageId":"282","endLine":3,"endColumn":40},{"ruleId":"279","severity":2,"message":"292","line":27,"column":21,"nodeType":"281","messageId":"282","endLine":27,"endColumn":33},{"ruleId":"287","severity":1,"message":"314","line":33,"column":6,"nodeType":"289","endLine":33,"endColumn":17,"suggestions":"315"},{"ruleId":"279","severity":2,"message":"292","line":11,"column":21,"nodeType":"281","messageId":"282","endLine":11,"endColumn":33},{"ruleId":"279","severity":2,"message":"296","line":13,"column":17,"nodeType":"281","messageId":"282","endLine":13,"endColumn":22},{"ruleId":"279","severity":2,"message":"316","line":13,"column":24,"nodeType":"281","messageId":"282","endLine":13,"endColumn":30},{"ruleId":"279","severity":2,"message":"317","line":12,"column":3,"nodeType":"281","messageId":"282","endLine":12,"endColumn":10},{"ruleId":"279","severity":2,"message":"318","line":2,"column":8,"nodeType":"281","messageId":"282","endLine":2,"endColumn":12},{"ruleId":"279","severity":2,"message":"319","line":3,"column":10,"nodeType":"281","messageId":"282","endLine":3,"endColumn":18},{"ruleId":"279","severity":2,"message":"320","line":3,"column":20,"nodeType":"281","messageId":"282","endLine":3,"endColumn":29},{"ruleId":"279","severity":2,"message":"321","line":3,"column":31,"nodeType":"281","messageId":"282","endLine":3,"endColumn":37},{"ruleId":"279","severity":2,"message":"322","line":3,"column":39,"nodeType":"281","messageId":"282","endLine":3,"endColumn":49},{"ruleId":"279","severity":2,"message":"323","line":46,"column":9,"nodeType":"281","messageId":"282","endLine":46,"endColumn":15},{"ruleId":"279","severity":2,"message":"324","line":49,"column":10,"nodeType":"281","messageId":"282","endLine":49,"endColumn":25},{"ruleId":"279","severity":2,"message":"325","line":65,"column":42,"nodeType":"281","messageId":"282","endLine":65,"endColumn":51},{"ruleId":"279","severity":2,"message":"325","line":302,"column":56,"nodeType":"281","messageId":"282","endLine":302,"endColumn":65},{"ruleId":"279","severity":2,"message":"326","line":3,"column":22,"nodeType":"281","messageId":"282","endLine":3,"endColumn":28},{"ruleId":"279","severity":2,"message":"308","line":10,"column":17,"nodeType":"281","messageId":"282","endLine":10,"endColumn":26},{"ruleId":"309","severity":1,"message":"310","line":47,"column":11,"nodeType":"302","endLine":47,"endColumn":33},{"ruleId":"279","severity":2,"message":"319","line":1,"column":17,"nodeType":"281","messageId":"282","endLine":1,"endColumn":25},{"ruleId":"279","severity":2,"message":"327","line":1,"column":27,"nodeType":"281","messageId":"282","endLine":1,"endColumn":38},{"ruleId":"279","severity":2,"message":"299","line":25,"column":22,"nodeType":"281","messageId":"282","endLine":25,"endColumn":40},{"ruleId":"279","severity":2,"message":"297","line":31,"column":5,"nodeType":"281","messageId":"282","endLine":31,"endColumn":10},{"ruleId":"279","severity":2,"message":"328","line":32,"column":5,"nodeType":"281","messageId":"282","endLine":32,"endColumn":15},{"ruleId":"279","severity":2,"message":"329","line":33,"column":5,"nodeType":"281","messageId":"282","endLine":33,"endColumn":10},{"ruleId":"279","severity":2,"message":"298","line":34,"column":18,"nodeType":"281","messageId":"282","endLine":34,"endColumn":24},{"ruleId":"279","severity":2,"message":"330","line":35,"column":5,"nodeType":"281","messageId":"282","endLine":35,"endColumn":13},{"ruleId":"279","severity":2,"message":"311","line":18,"column":26,"nodeType":"281","messageId":"282","endLine":18,"endColumn":32},{"ruleId":"279","severity":2,"message":"331","line":21,"column":26,"nodeType":"281","messageId":"282","endLine":21,"endColumn":33},{"ruleId":"279","severity":2,"message":"332","line":21,"column":35,"nodeType":"281","messageId":"282","endLine":21,"endColumn":39},{"ruleId":"279","severity":2,"message":"296","line":21,"column":41,"nodeType":"281","messageId":"282","endLine":21,"endColumn":46},{"ruleId":"279","severity":2,"message":"333","line":25,"column":39,"nodeType":"281","messageId":"282","endLine":25,"endColumn":50},{"ruleId":"279","severity":2,"message":"297","line":42,"column":5,"nodeType":"281","messageId":"282","endLine":42,"endColumn":10},{"ruleId":"279","severity":2,"message":"328","line":43,"column":5,"nodeType":"281","messageId":"282","endLine":43,"endColumn":15},{"ruleId":"279","severity":2,"message":"298","line":45,"column":18,"nodeType":"281","messageId":"282","endLine":45,"endColumn":24},{"ruleId":"279","severity":2,"message":"330","line":46,"column":5,"nodeType":"281","messageId":"282","endLine":46,"endColumn":13},{"ruleId":"279","severity":2,"message":"334","line":58,"column":9,"nodeType":"281","messageId":"282","endLine":58,"endColumn":18},{"ruleId":"279","severity":2,"message":"335","line":68,"column":9,"nodeType":"281","messageId":"282","endLine":68,"endColumn":17},"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'Ration' is assigned a value but never used.","'token' is assigned a value but never used.","'message' is assigned a value but never used.","'email' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'router' and 'setAuthorPageIndex'. Either include them or remove the dependency array.","ArrayExpression",["336"],"'arr' is assigned a value but never used.","'setPageIndex' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["337"],"'props' is defined but never used.","'error' is assigned a value but never used.","'reset' is assigned a value but never used.","'errors' is assigned a value but never used.","'erros' is defined but never used.","jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Assignments to the 'queryString' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","TemplateLiteral","'target' is defined but never used.","React Hook useEffect has a missing dependency: 'md'. Either include it or remove the dependency array.",["338"],"'isLoading' is assigned a value but never used.","@next/next/link-passhref","passHref is missing. See: https://nextjs.org/docs/messages/link-passhref","'status' is assigned a value but never used.","'GetStaticPaths' is defined but never used.","'GetStaticProps' is defined but never used.","React Hook useEffect has missing dependencies: 'router' and 'search'. Either include them or remove the dependency array.",["339"],"'mutate' is assigned a value but never used.","'onClick' is defined but never used.","'next' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'TouchEvent' is defined but never used.","'router' is assigned a value but never used.","'searchPageIndex' is assigned a value but never used.","'i' is defined but never used.","'signIn' is defined but never used.","'useCallback' is defined but never used.","'resetField' is assigned a value but never used.","'watch' is assigned a value but never used.","'setValue' is assigned a value but never used.","'loading' is assigned a value but never used.","'data' is assigned a value but never used.","'boundMutate' is assigned a value but never used.","'userCount' is assigned a value but never used.","'fixFloat' is assigned a value but never used.",{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},"Update the dependencies array to be: [authorPageIndex, router, setAuthorPageIndex]",{"range":"348","text":"349"},"Update the dependencies array to be: [pageIndex, router]",{"range":"350","text":"351"},"Update the dependencies array to be: [fiction, md, setValue]",{"range":"352","text":"353"},"Update the dependencies array to be: [pageIndex, router, search]",{"range":"354","text":"355"},[866,883],"[authorPageIndex, router, setAuthorPageIndex]",[1023,1034],"[pageIndex, router]",[6438,6457],"[fiction, md, setValue]",[899,910],"[pageIndex, router, search]"]